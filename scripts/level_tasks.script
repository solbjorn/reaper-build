local string_sub = string.sub

local level_scripts = {
	l01_escape  = escape_tasks,
	l02_garbage = garbage_tasks,
	l04u_labx18 = darkvalley_tasks,
	l06_rostok  = bar_rostok_tasks,
	l11_pripyat = pripyat_tasks
}

local info_scripts = {
	esc = escape_tasks,
	gar = garbage_tasks,
	agr = agroprom_tasks,
	val = darkvalley_tasks,
	bar = bar_rostok_tasks,
	mil = mil_tasks,
	["rad"] = radar_tasks,
	pri = pripyat_tasks,
	aes = pripyat_tasks
}

function proceed()
	if Actor == nil then
		return
	end
	local task_stuff = level_scripts[curr_level]
	if task_stuff then task_stuff.proceed() end
end

function process_info_portion(info_id)
	if Actor == nil then
		return
	end
	local info_script = info_scripts[string_sub(info_id, 1, 3)]
	if info_script then info_script.process_info_portion(info_id) end

	proceed_lchanger_location(info_id)
end

function add_location(sid, location, hint, persistent)
	local obj = story_object(sid)
	if obj then
		if not hint then hint = "" end
		if persistent then
			map_spot(obj.id, location, hint)
		else
			level_map_spot(obj.id, location, hint)
		end
	end
end

function remove_location(sid, location)
	local obj = story_object(sid)
	if obj and has_map_spot(obj.id, location) > 0 then
		del_map_spot(obj.id, location)
	end
end

function remove_location_safe(sid, location)
	local obj = story_object(sid)
	if obj then
		for a = 1, has_map_spot(obj.id, location), 1 do
			del_map_spot(obj.id, location)
		end
	end
end

function set_task_state(id_state, id_task, id_subtask)
	if Actor then
		Actor:set_task_state(id_state, id_task, id_subtask)
	end
end

local lc_location = {
	-- escape
	[91] = {
		dir	= "up"
	},

	-- garbage
	[192] = {
		dir	= "left"
	},
	[193] = {
		dir	= "down"
	},
	[194] = {
		dir	= "up"
	},
	[196] = {
		dir	= "right"
	},

	-- agroprom
	[392] = {
		dir	= "right"
	},

	-- darkvalley
	[416] = {
		dir	= "left"
	},
	[417] = {
		info	= "val_chase_start",
		dir	= "down"
	},

	-- rostok
	[591] = {
		info	= "info_way114a",
		dir	= "right"
	},

	[608] = {
		dir	= "left"
	},

	-- bar
	[592] = {
		info	= "info_way113a",
		dir	= "up"
	},
	[593] = {
		dir	= "down"
	},
	[594] = {
		info	= "info_way114a",
		dir	= "left"
	},

	-- military
	[771] = {
		info	= "info_way113a",
		dir	= "left"
	},
	[773] = {
		info	= "info_way112a",
		dir	= "right"
	},

	-- yantar
	[925] = {
		dir	= "right"
	},

	-- radar
	[1007] = {
		info	= "bar_deactivate_radar_done",
		dir	= "up"
	},
	[1008] = {
		info	= "info_way112a",
		dir	= "down"
	},

	-- pripyat
	[833] = {
		info	= "bar_deactivate_radar_done",
		dir	= "down"
	},
	[832] = {
		info	= "pri_stadium_reached",
		dir	= "up"
	},

	-- С ЧАЭС1 в Припять
	[6001] = {
		info	= "pri_stadium_reached",
		dir	= "down"
	},
	-- С Кордона в ТД
	[6002] = {
		info	= "val_chase_start",
		dir	= "right"
	},

	-- С Агропрома на Кордон
	[9100] = {
		info	= "info_way100a",
		dir	= "down"
	},
	-- С Кордона на Агропром
	[9101] = {
		info	= "info_way101a",
		dir	= "left"
	},
	-- С Агропрома на Янтарь
	[9102] = {
		info	= "info_way102a",
		dir	= "up"
	},
	-- С Янтаря на Агропром
	[9103] = {
		info	= "info_way103a",
		dir	= "down"
	},
	-- С ДТ на АС
	[9104] = {
		info	= "info_way104a",
		dir	= "up"
	},
	-- С АС на ДТ
	[9105] = {
		info	= "info_way105a",
		dir	= "left"
	},
	-- С Янтаря на Радар
	[9106] = {
		info	= "info_way106a",
		dir	= "up"
	},
	-- С Радара в ТД
	[9107] = {
		info	= "info_way107a",
		dir	= "down"
	},
	-- С Радара на Янтарь
	[9108] = {
		info	= "info_way108a",
		dir	= "left"
	},
	-- Из ТД на Радар
	[9109] = {
		info	= "info_way109a",
		dir	= "up"
	},
	-- Из ТД на АС
	[9110] = {
		info	= "info_way110a",
		dir	= "up"
	},
	-- С АС в ТД
	[9111] = {
		info	= "info_way111a",
		dir	= "down"
	},

	[11001] = {
		info	= "agr_find_gunslinger_cache_start"
	},

	[11002] = {
		info	= "agr_collector_entrance_info"
	},

	[11003] = {
		info	= "agr_collector_entrance_info"
	},

	[11004] = {
		indoor	= true
	},

	[11005] = {
		info	= "agr_find_gunslinger_cache_final",
		indoor	= true
	},

	[11006] = {
		info	= "val_x18_door_open",
	},

	[11007] = {
		indoor	= true
	},

	[11008] = {
		info	= "yan_find_laboratory_end",
		keep	= true
	},

	[11009] = {
		indoor	= true
	},

	[11010] = {
		info	= "yantar_tunnel_finish",
		keep	= true,
		indoor	= true
	},

	[11011] = {
		info	= "rad_bun_found"
	},

	[11012] = {
		indoor	= true
	},

	[11013] = {
		info	= "aes_found_sarcofag"
	},

	[11014] = {
		indoor	= true
	},

	[11015] = {
		info	= "sar2_monolith_miracle"
	},

	[11016] = {
		info	= "sar_finish_decoding",
		indoor	= true
	},

	[11017] = {
		info	= "sar2_monolith_miracle",
		indoor	= true
	},

	[31410] = {
		info	= "level_newtri",
		indoor	= true
	},

	[31510] = {
		info	= "level_newtwo",
		indoor	= true
	},

	[31610] = {
		info	= "level_newfive",
		indoor	= true
	},

	[31710] = {
		info	= "level_newfour"
	}
}
local info_to_lc = { }

for id, data in pairs(lc_location) do
	if data.info then
		local cur = info_to_lc[data.info]
		if cur then
			cur[#cur + 1] = id
		else
			info_to_lc[data.info] = { id }
		end
	end
end

function add_lchanger_location()
	local obj, spot

	for id, data in pairs(lc_location) do
		obj = story_object(id)
		if obj and data.info and not has_info(data.info) and not data.keep then
			release(obj)
			obj = nil
		end

		if obj and not (data.indoor or data.keep) then
			spot = "level_changer_" .. data.dir
			map_spot(obj.id, spot, "to_" .. obj:get_netpk("dest_level_name"))
			lc_location[id] = nil
		end
	end
end

function check_lchanger_location()
	for info, _ in pairs(info_to_lc) do
		if has_info(info) then
			info_to_lc[info] = nil
		end
	end

	if not level.indoor() then return end
	local spot, obj = "level_changer"

	for id, data in pairs(lc_location) do
		if data.indoor then
			obj = story_object(id)
			if obj and level_object(obj.id) and
			   (not data.keep or has_info(data.info)) and
			   has_map_spot(obj.id, spot) == 0 then
				level_map_spot(obj.id, spot, "to_" .. obj:get_netpk("dest_level_name"))
				lc_location[id] = nil
			end
		end
	end
end

function proceed_lchanger_location(info_id)
	local lc = info_to_lc[info_id]
	if not lc then return end
	info_to_lc[info_id] = nil

	local id, obj, data, spot, fn, to
	for i = 1, #lc do
		id = lc[i]
		obj = story_object(id)
		if not obj then
			obj = create(AI:spawn_id(id))
		end
		if obj then
			data = lc_location[id]
			if data.dir then
				spot = "level_changer_" .. data.dir
			else
				spot = "level_changer"
			end
			if has_map_spot(obj.id, spot) == 0 then
				to = obj:get_netpk("dest_level_name")

				if not data.indoor then
					fn = map_spot
				elseif level_object(obj.id) then
					fn = level_map_spot
				end
				if fn then
					fn(obj.id, spot, "to_" .. to)
					lc_location[id] = nil
				end

				news_manager.send_level_changer(object_level_name(obj), to)
			end
		end
	end
end
