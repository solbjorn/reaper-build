-- Расширения базовых библиотек Lua и движка

local string_gmatch = string.gmatch
local string_gsub = string.gsub
local string_match = string.match

-- table

-- Инвертирование таблицы - ключ<->значение
table.invert = function(tbl)
   local result = {}
   for key,value in pairs(tbl) do
     result[value] = key
   end
   return result
end

-- Добавление в таблицу вида {[key] = count} подсчитываемого предмета
table.add = function(tbl, key,count)
	if not count then
		count=1
	end
	if tbl[key] then
		tbl[key] = tbl[key]+count
	else
		tbl[key] = count
	end
end

-- Удаление из таблицы вида {[key] = count} подсчитываемого предмета
table.sub = function(tbl, key, count)
	if not tbl[key] then
		return
	end
	if not count then count = 1 end

	tbl[key] = tbl[key] - count
	if tbl[key] <= 0 then
		tbl[key] = nil
	end
end

-- Выбор случайного элемента таблицы
table.random_key=function(tbl)
	if not tbl then
		abort("! ERROR table.random got nil expected table")
		return nil
	end
	local keys = {}
	local size = 0
    for key, value in pairs(tbl) do
		size = size + 1
		keys[size] = key
    end
	if size==0 then
		abort("! ERROR table.random got unexpected data from input table")
		return nil
	elseif size == 1 then
		return keys[1]
	end
    return keys[math.random(1, size)]
end
local table_random_key = table.random_key

table.random = function(tbl)
    return tbl[table_random_key(tbl)]
end

-- размер любой таблицы
table.size = function(tbl)
	if not tbl then return 0 end

	local count = 0
	for key in pairs(tbl) do
		count = count+1
	end
	return count
end

local table_copy
table.copy = function(src, dst)
	if not dst then dst = { } end

	for k, v in pairs(src) do
		dst[k] = type(v) == "table" and table_copy(v) or v
	end

	return dst
end
table_copy = table.copy

-- string

-- Удаление начальных и конечных пробелов
string.trim = function(str)
	--out of bugged scripts code!
	if not str then
		return ""
	end

	--return str:match("^%s*(.-)%s*$")
	--more quickly (~30%)
	local from = string_match(str, "^%s*()")
	return from > #str and "" or string_match(str, ".*%S", from)
end
local string_trim = string.trim

-- Разбирает cтроку в таблицу по разделителю
-- {"substring1", "substring2", ...}
-- clear = true - обрезать пробелы
string.explode = function(str, div, clear)
	local t = {}
	if clear==nil then
		clear=true
	end
	for s in string_gmatch(str, "([^"..div.."]+)") do
		if clear then
			t[#t + 1] = string_trim(s)
		else
			t[#t + 1] = s
		end
	end
	return t
end

string.clear = function(str)
	return string_gsub(str, "%p", function(s) return string_match(s, "[%.%-_]*") end )
end

-- Парсит строку вида "ааа, ббб, ввв..." в таблицу {"ааа", "ббб", "ввв", ...}
string.parse_names = function(s, tohash)
	local t = {}

	for name in string_gmatch(s, "([%w_%-.\\]+)%p*") do
		if tohash == true then
			t[name] = true
		else
			t[#t + 1] = name
		end
	end

	return t
end

-- разбирает строку вида "n1, n2, n3..." в таблицу {n1, n2, n3, ...} где n1, n2, n3... - числа
string.parse_nums = function (s)
	local t = {}
	for value in string_gmatch(s, "([^,]+)") do
		local num=tonumber(value)
		if not num then
			abort("! lua_ext.parse_nums: error input value "..value..". ignoring!")
		else
			t[#t + 1] = num
		end
	end
	return t
end

-- разбирает строку key,value,key,value ... в таблицу t = {key = value}, value должно быть числом. Его можно не указывать, тогда будет подставляться дефолт def
string.key_value_num = function (str, def)
	if not str then return nil end
	if not def then def = 1 end

	local t = {}
	local key, value
	for name in string_gmatch(str, "[%w%_%.%-%+]+") do
		value = tonumber(name)
		if key == nil then	-- name это key
			key = name
		elseif value == nil then	-- value не указано, значит это следующий key, ставим def и переносим key
			t[key] = def
			key = name
		else	-- name это value
			t[key] = value
			key = nil
		end
	end

	-- цепляем дефолт для последнего key
	if key then
		t[key] = def
	end

	return t
end

-- math

-- Выравнивание числа n в пределах от _min до_max
math.clamp = function(n, _min, _max)
	if _min>_max then
		_max,_min=_min,_max
	end
	return (n<_min and _min)
		or (n>_max and _max)
		or n
end

math.nan = (0/0) -- не число

math.isnan = function(value)
	return value ~= value
end

-- ini_file, system_ini

--[[ Перебирает все строки в секции ini. Использование:
local tbl = {}
ini:iterate_lines(section, function(result, id, value)
	tbl[...] = ... -- любой скрипт
end)
--]]
ini_file.iterate_lines = function (ini, section, f)
	if ini:section_exist(section) then
		for i=0,ini:line_count(section)-1 do
			f(ini:r_line(section, i, "", ""))
		end
	end
end
config.iterate_lines = ini_file.iterate_lines

-- Из всех значений секции возвращает таблицу t[id] = value. tonum = true - преобразовать в число
ini_file.key_value = function (ini, section, tonum)
	local t = {}

	ini:iterate_lines(section, function(result, id, value)
		t[id] = tonum and tonumber(value) or value
	end)

	return t
end
config.key_value = ini_file.key_value

-- Из всех значений секции возвращает список t = {id1, id2 ...}
ini_file.list = function (ini, section)
	local t = {}
	local i = 1

	ini:iterate_lines(section, function(result, id, value)
		t[i] = id
		i = i + 1
	end)

	return t
end
config.list = ini_file.list

-- Из всех значений секции возвращает таблицу t[id] = true
ini_file.key_true = function (ini, section)
	local t = {}

	ini:iterate_lines(section, function(result, id, value)
		t[id] = true
	end)

	return t
end
config.key_true = ini_file.key_true

-- net_packet

local CTime_0 = game.CTime()

-- Чтение CTime
net_packet.r_CTime = function(p)
	local t = game.CTime()

	local year = p:r_u8()
	if year == 0 then return t end

	return t:set_table({
		year	= year + 2000,
		month	= p:r_u8(),
		day	= p:r_u8(),
		hour	= p:r_u8(),
		["min"]	= p:r_u8(),
		sec	= p:r_u8(),
		msec	= p:r_u16()
	})
end
reader.r_CTime = net_packet.r_CTime

-- Запись CTime. Если t = nil, то запишет один нулевой байт
net_packet.w_CTime = function(p, t)
	if t and t ~= CTime_0 then
		local time_table = t:get_table()
		p:w_u8(time_table["year"]-2000)
		p:w_u8(time_table["month"])
		p:w_u8(time_table["day"])
		p:w_u8(time_table["hour"])
		p:w_u8(time_table["min"])
		p:w_u8(time_table["sec"])
		p:w_u16(time_table["msec"])
	else
		p:w_u8(0)
	end
end
