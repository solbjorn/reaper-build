--[[

File:  amk_utils .script
Created:  23.05.2008
Copyright:  © 2008 AMK team
Version:  1.1.0.5

--]]

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                         Menu 					                 *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
local RestrictionStock = 1   --Ограничения на вместимость инвентаря

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                         Callback 					                 *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

--Callback на взятие предмета в инвентарь гг
function actor_item_take(obj)
	inventory_update(obj, 1)
	if obj ~= nil and RestrictionStock ~= nil then
		restriction_stock.restriction_of_stock(obj,0)
	end
end

--Callback на потерю предмета из инвенаря гг
function actor_item_drop(obj)
	inventory_update(obj, -1)
	if obj ~= nil and RestrictionStock ~= nil then
		restriction_stock.restriction_of_stock(obj,1)
	end
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                         Inventory					       *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

--Кеш текущего состояния инвентаря ГГ (только предметы проверяемые функцией inventory_search, их обычно немного)
--Структура: [секция_предмета] = количество_в_инвентаре
local InventoryState = {}

--Проверка на количество предметов в инвентаре гг
function inventory_count(iItemSection)
	--Взятие из кеша текущего состояния инвентаря:
	local vCount = InventoryState[iItemSection]
	--Загрузка текущего состояния инвентаря в кеш:
	if vCount == nil then
		vCount = 0
		db.actor:iterate_inventory(function (dummy, vItem)
				if vItem:section() == iItemSection then
					vCount = vCount + 1
				end
			end, nil)
		InventoryState[iItemSection] = vCount
	end
	--Выдача результата проверки:
	return vCount
end

function inventory_search(iItemSection, iNeededCount)
	if iNeededCount == 1 then return db_actor:object(iItemSection) or false end
	return inventory_count(iItemSection) >= iNeededCount
end

--Обработчик появления или исчезновения предмета в инвентаре (нужно обновить кеш):
function inventory_update(iObject, iCountDelta)
	if iObject == nil then return end
	local vItemSection = iObject:section()
	--Взятие из кеша текущего состояния инвентаря:
	local vCount = InventoryState[vItemSection]
	--Обновление текущего состояния инвентаря в кеше:
	if vCount ~= nil then
		vCount = vCount + iCountDelta
		InventoryState[vItemSection] = vCount
	end
end

--Проверка на предмет в инвентаре гг
function have_a_item(itemS)
    local actor = db.actor
    if actor ~= nil and actor:object(itemS) ~= nil then
		return true
	else
		return false
	end
end

--Проверка на предмет в инветаре и выдачу инфопоршена
function have_a_item_info(itemS, info)
    local actor = db.actor
    if actor ~= nil and actor:object(itemS) ~= nil and actor:dont_has_info(info) then
		actor:give_info_portion(info)
	end
end

--Проверка инфопоршенов
function have_a_info(info_has, not_info_has)
	local actor = db.actor
	if has_alife_info(info_has) and not has_alife_info(not_info_has) then
		return true
	else
		return false
	end
end

--Проверка денег у гг
function actor_has_money(money)
	local actor = db.actor
	if actor:money() >= money then
		return true
	else
		return false
	end
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                         Transfers					       *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

--Трансфер денег между гг и нпс
function actor_give_money(npcObj, actorObj, money, Type)
	local actor, npc
	if db.actor and db.actor:id() == npc:id() then
		actor = npcObj
		npc = actorObj
	else
		actor = actorObj
		npc = npcObj
	end

	if Type == "out" then
		dialogs.relocate_money(npc, money, "out")
	elseif Type == "in" then
		dialogs.relocate_money(npc, money, "in")
	end
end

--Трансфер предмета между гг и нпс
function actor_give_item(npcObj, actorObj, itemS, Type)
	local actor, npc
	if db.actor and db.actor:id() == npc:id() then
		actor = npcObj
		npc = actorObj
	else
		actor = actorObj
		npc = npcObj
	end

	if 	   Type == "out" then
		dialogs.relocate_item_section(npc, itemS, "out")
	elseif Type == "in" then
		dialogs.relocate_item_section(npc, itemS, "in")
	end
end

--Трансфер предметов между гг и нпс
function relocate_n_items_section(victim, section, Type, count)
    if db.actor and victim then
		if Type == "in" then
			for i=1, n do
                alife():create(section,
					db.actor:position(),
					db.actor:level_vertex_id(),
					db.actor:game_vertex_id(),
					db.actor:id())
			end
		elseif Type == "out" then
			db.actor:iterate_inventory(function (dummy,item) if item:section() == section and count > 0 then
			db.actor:transfer_item(item, victim) count = count - 1 end end, nil)
		end
		news_manager.relocate_item(db.actor, Type, section)
    end
end
