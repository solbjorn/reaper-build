--------------------------------------------------------------------------------------------------------
-- Trader Repair
--------------------------------------------------------------------------------------------------------

local weapon_profit_margin = 1.3
local armor_profit_margin = 1.2

function trader_repair_precond(trader, actor)
	local item_in_slot_1 = Actor:item_in_slot(1)
	local item_in_slot_2 = Actor:item_in_slot(2)
	local item_in_slot_6 = Actor:item_in_slot(6)
	if item_in_slot_1 ~= nil and 1 > item_in_slot_1:condition() + 0.01 then return true
	elseif item_in_slot_2 ~= nil and 1 > item_in_slot_2:condition() + 0.01 then return true
	elseif item_in_slot_6 ~= nil and 1 > item_in_slot_6:condition() + 0.01 then return true
	else return false
	end
end

function trader_check_money_s1(trader, actor)
	local item_in_slot = Actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and Actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end
	end
	return false
end

function trader_check_money_s2(trader, actor)
	local item_in_slot = Actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and Actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end
	end
	return false
end

function trader_check_money_s6(trader, actor)
	local item_in_slot = Actor:item_in_slot(6)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		if item_repair_cost > 0 and Actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end
	end
	return false
end

function trader_repiar_weapon_s1(trader, actor)
	local item_in_slot = Actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		item_in_slot:set_condition(1)
		lost_money(item_repair_cost)
	end
end

function trader_repiar_weapon_s2(trader, actor)
	local item_in_slot = Actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		item_in_slot:set_condition(1)
		lost_money(item_repair_cost)
	end
end

function trader_repiar_armor_s6(trader, actor)
	local item_in_slot = Actor:item_in_slot(6)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		amk_mod.repair_armor(1)
		lost_money(item_repair_cost)
	end
end

function repair_costs(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")

	local item_name_and_price = ""
	local item_repair_cost = 0
	if Actor ~= nil then
		local item_in_slot_1 = Actor:item_in_slot(1)
		local item_in_slot_2 = Actor:item_in_slot(2)
		local item_in_slot_6 = Actor:item_in_slot(6)

		if item_in_slot_1 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_1:condition()) * item_in_slot_1:cost() * weapon_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_0").." %c[255,238,155,23]"..item_repair_cost.." рублей%c[default]"
				Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_2 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_2:condition()) * item_in_slot_2:cost() * weapon_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_1").." %c[255,238,155,23]"..item_repair_cost.." рублей%c[default]"
				Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_6 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_6:condition()) * item_in_slot_6:cost() * armor_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_2").." %c[255,238,155,23]"..item_repair_cost.." рублей%c[default]"
				Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
	end
end

function trader_miniquest_precond(trader, actor)
	-- Читаем customdata
	local obj = story_object(3)
	if (obj) then
		local cd = (obj:get_netpk("custom_data")):getTable()
		return cd.microquest
			and ( tonumber(cd.microquest.reward_money) > 0
			or cd.microquest.reward_items ~= "" )
	end
	return false
end

function trader_check_money_miniquest(trader, actor)
	return Actor:money() >= 100
end

function trader_miniquest_transfer(trader, actor)
	lost_money(100)
	news_main.on_miniquest_reward(trader)
end

function trader_miniquest_free_transfer(trader, actor)
	news_main.on_miniquest_reward(trader)
end

function trader_check_miniquest_free(trader, actor)
	if (has_info("esc_trader_miniquest_free")) then
		return true
	end
	return false
end

function trader_check_miniquest_free_neg(trader, actor)
	if (has_info("esc_trader_miniquest_free")) then
		return false
	end
	return true
end

function trader_check_miniquest_free_all_neg(trader, actor)
	if (has_info("esc_trader_miniquest_free") or has_info("esc_trader_miniquest_notfree")) then
		return false
	end
	return true
end

--------------------------------------------------------------------------------------------------------
-- Dialog & InfoPortions Function
--------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
-- Trader
--------------------------------------------------------------------------------------------------------

function transfer_deneg(first_speaker, second_speaker)
	got_money(1400)
    dialogs.relocate_item_section(second_speaker, "detector_simple", "in")
	dialogs.relocate_item_section(second_speaker, "arc_art_box_8basic", "in")
	dialogs.relocate_item_section(first_speaker, "arc_art_box_1basic", "out")
end

function give_weapon_from_trader(trader, actor)
    dialogs.relocate_item_section(trader, "wpn_knife", "in")
	dialogs.relocate_item_section(trader, "arc_art_box_1basic", "in")

	got("fake_bolt", 5)
end

function otday_art (first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "amk_af_night_star", "out")
end

function have_a_art()
    local actor = Actor
    if actor ~= nil and actor:object("amk_af_night_star") ~= nil and actor:dont_has_info("test_quest_art_vziat") then
actor:give_info_portion("test_quest_art_vziat")
    end
end

function have_a_art2 (stalker, player)
    return stalker:object ("amk_af_night_star") ~= nil
end
function have_box (stalker, player)
    return stalker:object ("arc_art_box_1basic") ~= nil
end

function trader_alredy_give_job(trader, actor)
	if (has_alife_info("agroprom_military_case") and not has_alife_info("agroprom_military_case_done")) or
	   (has_alife_info("escape_blockpost_case") and not has_alife_info("escape_blockpost_case_done")) or
	   (has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done")) or
	   (has_alife_info("tutorial_wounded_start") and not has_alife_info("esc_serious_talk"))
	then
		return true
	end
	return false
end

function trader_give_extra_job(trader, actor)
	if has_alife_info("escape_blockpost_case") and not has_alife_info("escape_blockpost_case_done")
	then
		return true
	end
	return false
end

function bandits_die(actor,npc)
	if has_alife_info("esc_kill_bandits_quest_kill") and not has_alife_info("esc_kill_bandits_noquest_kill")
	then
		return true
	end
	return false
end

function trader_need_extra_job(trader, actor)
	if not has_alife_info("escape_blockpost_case") and
	    has_alife_info("esc_return")
	then
		return true
	end
	return false
end

function is_tutorial()
	return not has_alife_info("tutorial_end")
end

function is_not_tutorial()
	return has_alife_info("tutorial_end")
end

function is_not_tutorial_art(actor, trader)
	local tutorial_artefact = Actor:object("af_blood_tutorial")
	if (has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done")
		and  tutorial_artefact ~= nil) or has_alife_info("tutorial_artefact_done")
	then
		return true
	end
	return false
end

function not_final_job(trader, actor)
	return not has_alife_info("escape_blockpost_case_done")
end

function trader_dont_give_job(first_speaker, second_speaker)
	return not trader_alredy_give_job(first_speaker, second_speaker)
end

function finalize_quests(first_speaker, second_speaker)
	if tutorial_artefact_end(first_speaker, second_speaker) == true or
	   tutorial_wounded_end(first_speaker, second_speaker) == true
	then
		return true
	end
	return false
end

function not_finalize_quests(first_speaker, second_speaker)
	return not this.finalize_quests(first_speaker, second_speaker)
end

function tutorial_artefact_end(first_speaker, second_speaker)
	local tutorial_artefact = first_speaker:object("af_blood_tutorial")
	if has_alife_info("tutorial_artefact_start") and
	   not has_alife_info("tutorial_artefact_done") and
	   tutorial_artefact ~= nil
	then
		return true
	end
	return false
end

function tutorial_artefact_have_not(first_speaker, second_speaker)
	local tutorial_artefact = first_speaker:object("af_blood_tutorial")
	if has_alife_info("tutorial_artefact_start") and
	   not has_alife_info("tutorial_artefact_done") and
	   tutorial_artefact == nil
	then
		return true
	end
	return false
end

function tutorial_wounded_end(first_speaker, second_speaker)
	-- local wounded_flash = first_speaker:object("esc_wounded_flash")
	if has_alife_info("tutorial_wounded_start")	and
		has_alife_info("tutorial_wounded_give_info")	and
	   not has_alife_info("esc_serious_talk")
 -- and   wounded_flash ~= nil
	then
		return true
	end
	return false
end

function trader_dont_has_job(first_speaker, second_speaker)
    if trader_need_military_case(first_speaker, second_speaker) == false and
	   trader_need_blockpost_box(first_speaker, second_speaker) == false
	then
		return true
	end
	return false
end

--' Escape tutorial artefact
function have_tutorial_artefact(first_speaker, second_speaker)
  	return first_speaker:object("af_blood_tutorial") ~= nil
end
function give_medkit(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "medkit", "in")
end
function give_tutorial_artefact(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "af_blood_tutorial", "out")
end

--' Meet fox
function have_fox_info(first_speaker, second_speaker)
  	return first_speaker:object("fox_flash") ~= nil
end

--' fox help

function transfer_medikit_to_fox (player, wounded)
	wounded:set_relation(game_object.friend, player)
	Actor:give_info_portion("escape_fox_heal")
end

function give_weapon_to_actor (trader, actor)
	if not has_alife_info("kvest_art_started") then
	    dialogs.relocate_item_section(trader, "wpn_knife", "in")
		dialogs.relocate_item_section(trader, "vodka", "in")
	else
		--dialogs.relocate_item_section(trader, "wpn_pm", "in")
	    dialogs.relocate_item_section(trader, "vodka", "in")
	    --dialogs.relocate_item_section(trader, "ammo_9x18_fmj", "in")
	end
end

--' Escape blockpost box
function have_blockpost_case(first_speaker, second_speaker)
  	return first_speaker:object("quest_case_01") ~= nil
end

function give_blockpost_case(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "quest_case_01", "out")
end

function give_blockpost_case_reward(first_speaker, second_speaker)
	got_money(2000)
end

--' Agroprom military case
function trader_need_military_case(first_speaker, second_speaker)
    if has_alife_info("esc_serious_talk") and
	   not has_alife_info("agroprom_military_case")
	then
		return true
	end
	return false
end

--' Escape trader artefact
function have_artefact_from_fleshes(first_speaker, second_speaker)
	local actor = Actor
	if actor ~= nil and
	   (actor:object("af_vyvert") ~= nil or
	   actor:object("af_gravi") ~= nil or
	   actor:object("af_gold_fish") ~= nil)
	then
		return true
	end
  	return false
end

--' Ящик с блокпоста
function trader_need_blockpost_box(first_speaker, second_speaker)
    if has_alife_info("tutorial_end") and
	   has_alife_info("esc_trader_speak") and
	   not has_alife_info("escape_blockpost_case")
	then
		return true
	end
	return false
end

--' tutorial wounded in vagon
function wounded_need_help(first_speaker, second_speaker)
	return not has_info("tutorial_wounded_help")
end

--' trader needs military documents
function trader_need_military_document(first_speaker, second_speaker)
    if has_alife_info("escape_blockpost_case_done") and
	   not has_alife_info("agroprom_military_case")
	then
		return true
	end
	return false
end

--' trader dialog about docs from labx18
function actor_has_documents (actor, npc)
	if actor:object("dar_document4") then
		return true
	else
		return false
	end
end

--' Escape dynamite for Wolf
function transfer_wolf_reward(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "af_medusa", "in")
end

function wolf_additional_reward(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "in")
    dialogs.relocate_item_section(first_speaker, "bandage", "in")
    dialogs.relocate_item_section(first_speaker, "grenade_f1", "in")
end

--' Escape Wounded's flash
function wounded_give_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "esc_wounded_flash", "in")
end

function have_wounded_flash(first_speaker, second_speaker)
  	return first_speaker:object("esc_wounded_flash") ~= nil
end
function dont_have_wounded_flash(first_speaker, second_speaker)
  	return not have_wounded_flash(first_speaker, second_speaker)
end

function give_wounded_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "esc_wounded_flash", "out")
	got_money(1500)
end

function give_knife_to_actor(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "wpn_knife", "in")
end

--' Escape bandits factory
function give_factory_reward_trader(first_speaker, second_speaker)
	got_money(500)
end

--' Give X-18 documents read

function give_documents_reward (first_speaker, second_speaker)
	got_money(1000)
end

--' Kill killers raid
function give_reward_killers(first_speaker, second_speaker)
	got_money(2500)
end

--' Soldiers on bridge
function has_soldiers_bribe(actor, npc)
	return actor:money() >= 500
end

function give_soldiers_bribe(actor, npc)
	lost_money(500)
end

function fox_pay_money(actor, npc)
	got_money(1500)
	Treasure:give_treasure("esc_secret_truck_goods")
end

function wolf_precond_univ (actor, npc)
	return has_alife_info("esc_kill_bandits_quest_done") or (has_alife_info("tutorial_wounded_give_info") and not has_alife_info("esc_kill_bandits_quest_have"))
end

function loc_info()
	give_info("l01_escape_level_info")
end
