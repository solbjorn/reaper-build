----------------- Схема пост-процессинга пси-зон для OGSM 2.4 -----------------

------------------------- Copyright 2007-2018 DEXXX ---------------------------

class "PPEffector" (effector)

function PPEffector:__init(id_number) super(id_number, 10000000)
	self.params = effector_params()
end

function PPEffector:process(pp)
	pp:assign(self.params)
	effector.process(self,pp)
	return true
end

class "action_postprocess"

function action_postprocess:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function action_postprocess:reset_scheme()
	self.gray_amplitude = 1.0
	self.gray_color = color (0.5,0.5,0.5)
	self.base_color = color (0.5,0.5,0.5)
	self.noise_var = noise (0,0,30)
	self.intensity_base = 1
	self.intensity_speed = 0.1
	self.intensity = 0
	self.sound_obj_right = voice([[ambient\random\rnd_the_horror]] .. math.random(1, 4))
	self.sound_obj_left = voice([[ambient\random\rnd_the_horror]] .. math.random(1, 4))
end

function action_postprocess:update(delta, force)
	if self.st then
		if xr_logic.try_switch_to_another_section(self.object, self.st) then
			return
		end

		force = self.object:inside(Actor:position()) and not ogsm_psyzones.npc_is_safe(Actor)
	end
	if force then
		self:play_sounds()
		self:gen_phantoms()
		self:update_hit()
		self.pp = PPEffector(self.object:id() + 2000)
		if self.base_color.r >= 0.2 then
			if self.intensity ~= self.intensity_base then
				self.intensity = self.intensity + self.intensity_speed
				if self.intensity > self.intensity_base then
					self.intensity = self.intensity_base
				end
			end
			self.pp:start()
			self.base_color.r = self.base_color.r - 0.01
			self.base_color.g = self.base_color.g - 0.01
			self.base_color.b = self.base_color.b - 0.01
			self.gray_color.r = self.gray_color.r - 0.01
			self.gray_color.g = self.gray_color.g - 0.01
			self.gray_color.b = self.gray_color.b - 0.01
			self.pp.params.color_base = color(self.base_color.r, self.base_color.g, self.base_color.b)
			self.pp.params.color_gray = color(self.gray_color.r, self.gray_color.g, self.gray_color.b)
			self.pp.params.gray = self.gray_amplitude*self.intensity
			self.pp.params.noise = noise(1*self.intensity,1*self.intensity,30)
		else
			self.pp:start()
			self.pp.params.color_base = self.base_color
			self.pp.params.color_gray = self.gray_color
			self.pp.params.gray = 1
			self.pp.params.noise = noise(1,1,30)
		end
	else
		self.pp = PPEffector(self.object:id() + 2000)
		if self.base_color.r < 0.5 then
			if self.intensity ~= 0 then
				self.intensity = self.intensity - self.intensity_speed
				if self.intensity < 0 then
					self.intensity = 0
				end
			end
			self.pp:start()
			self.base_color.r = self.base_color.r + 0.01
			self.base_color.g = self.base_color.r + 0.01
			self.base_color.b = self.base_color.r + 0.01
			self.gray_color.r = self.gray_color.r + 0.01
			self.gray_color.g = self.gray_color.g + 0.01
			self.gray_color.b = self.gray_color.b + 0.01
			self.pp.params.color_base = color(self.base_color.r, self.base_color.g, self.base_color.b)
			self.pp.params.color_gray = color(self.gray_color.r, self.gray_color.g, self.gray_color.b)
			self.pp.params.gray = self.gray_amplitude*self.intensity
			self.pp.params.noise = noise(1*self.intensity,1*self.intensity,30)
		else
			self.pp:finish()
		end
	end
end

function action_postprocess:gen_phantoms()
	if phantom_manager.phantom_count() < 5 then
		local yaw = math.pi*2.0*math.random()
		local radius = 30*(math.random()/2.0+0.5)
		local height = 2.5*math.random()
		local a_pos = Actor:position()
		local pos = vector():set(math.sin(yaw)*radius+a_pos.x,a_pos.y+height,math.cos(yaw)*radius+a_pos.z)
		phantom_manager.spawn_phantom(pos)
	end
end

function action_postprocess:play_sounds()
	self.sound_obj_right.volume = 0.5
	self.sound_obj_left.volume = 0.5

	if not self.sound_obj_left:playing() then
		self.sound_obj_left = voice([[ambient\random\rnd_the_horror]] .. math.random(1, 4))
		self.sound_obj_left:play_at_pos(Actor, vector():set(1, 0, 1), 0, sound_object.s2d)
	end

	if not self.sound_obj_right:playing() then
		self.sound_obj_right = voice([[ambient\random\rnd_the_horror]] .. math.random(1, 4))
		self.sound_obj_right:play_at_pos(Actor, vector():set(-1, 0, 1), 0, sound_object.s2d)
	end
end

function action_postprocess:update_hit()
	local h = hit()
	h.power = self.intensity == self.intensity_base and 0.03 or 0.02
	h.direction = vector():set(0, 0, 0)
	h.impulse = 0
	h.draftsman = Actor
	h.type = hit.telepatic
	Actor:hit(h)
end

function add_to_binder(obj, storage)
	storage.actions[action_postprocess(obj, storage)] = true
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
end

----------------- Схема пост-процессинга пси-зон для OGSM 2.4 -----------------

------------------------- Copyright 2007-2018 DEXXX ---------------------------
