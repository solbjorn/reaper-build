--[[-----------------------------------------------------------------------------------------------
 File         : sa_utils.script
 Description  : Вспомогательные функции
 Copyright    : Shadows Addon
 Author       : Ray Twitty aka Shadows
 Date         : 16.06.2013
 Last edit    : 08.11.2018
--]]-----------------------------------------------------------------------------------------------
--[[-----------------------------------------------------------------------------------------------
 * Object data
--]]-----------------------------------------------------------------------------------------------
function _G.get_ammo_data(obj, param)
	if obj and param then
		if param == "box_size" then
			return obj:get_go_int16(nil, 476)
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.set_ammo_data(obj, param, value)
	if obj and param and value then
		if param == "box_size" then
			obj:set_go_int16(476, value)
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Sounds
--]]-----------------------------------------------------------------------------------------------
function _G.play_safe_sound_object(sound_path, timeout, volume)
	if sound_path then
		if not timeout then
			timeout = 0
		end
		if not volume then
			volume = 1.0
		end
		sound_object(sound_path):play_no_feedback(db_actor, sound_object.s2d, timeout, vector(), volume)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Game log
--]]-----------------------------------------------------------------------------------------------
function _G.msg(fmt, ...)
	log1(string.format(tostring(fmt), ...))
end
--[[-----------------------------------------------------------------------------------------------
 * Extended level namespace
--]]-----------------------------------------------------------------------------------------------
function level.add_cam_effector3(time, amplitude, period_number, power)
	if time and amplitude and period_number and power then
		level.set_ce_time(time)
		level.set_ce_amplitude(amplitude)
		level.set_ce_period_number(period_number)
		level.set_ce_power(power)
		level.add_ce()
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Ini
--]]-----------------------------------------------------------------------------------------------
function _G.read_line(section, line, line_type, ini, default_value)
	if section and line then
		if not ini then
			ini = system_ini()
		end
		if not line_type then
			line_type = "number"
		end
		if ini:section_exist(section) and ini:line_exist(section, line) then
			if line_type == "string" then
				return ini:r_string(section, line)
			elseif line_type == "number" then
				return ini:r_float(section, line)
			elseif line_type == "bool" then
				return ini:r_bool(section, line)
			elseif line_type == "vector" then
				return ini:r_vector(section, line)
			end
		end
		return default_value
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Others
--]]-----------------------------------------------------------------------------------------------
function _G.get_item_place(obj, npc)
	if not npc then
		npc = db_actor
	end
	if npc:is_in_slot(obj) then
		return item_place.slot
	elseif npc:is_on_belt(obj) then
		return item_place.belt
	elseif npc:is_in_ruck(obj) then
		return item_place.ruck
	end
	return item_place.undefined
end
---------------------------------------------------------------------------------------------------
local show_in_dialogs = {
	["encyclopedia"]	= true,
}
---------------------------------------------------------------------------------------------------
function _G.send_tip(news_text, header, timeout, showtime, sender, sound)
	if news_text then
		if not header then header = game.translate_string("st_tip") end
		if not timeout then timeout = 0 end
		if not showtime then showtime = 5 end
		if not (sender and news_manager.tips_icons[sender]) then sender = "default" end
		if sound then sound_object("device\\pda\\"..sound):play(db_actor, timeout, sound_object.s2d) end

		local news_text = "%c[255,160,160,160]"..header.."\\n%c[default]"..news_text
		local x, y = news_manager.tips_icons[sender][1], news_manager.tips_icons[sender][2]
		local rect = Frect():set(x, y, 83, 47)
		if sender and show_in_dialogs[sender] and db_actor:is_talking() then
			db_actor:give_talk_message(news_text, "ui\\ui_iconsTotal", rect, "iconed_answer_item")
		else
			db_actor:give_game_news(news_text, "ui\\ui_iconsTotal", rect, timeout * 1000, showtime * 1000)
		end
	end
end
