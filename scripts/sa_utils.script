--[[-----------------------------------------------------------------------------------------------
 File         : sa_utils.script
 Description  : Вспомогательные функции
 Copyright    : Shadows Addon
 Author       : Ray Twitty aka Shadows
 Date         : 16.06.2013
 Last edit    : 08.11.2018
--]]-----------------------------------------------------------------------------------------------
_G.base_time_factor = level.get_time_factor()
_G.pressed_keys = {}
--[[-----------------------------------------------------------------------------------------------
 * Car
--]]-----------------------------------------------------------------------------------------------
function _G.change_car_health(obj, health)
	if obj and health > 0 then
		local car = obj:get_car()
		if car then
			car:SetfHealth(math.clamp(car:GetfHealth() + health, 0, 1))
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.change_car_fuel(obj, fuel)
	if obj and fuel > 0 then
		obj:set_fuel(math.clamp(obj:get_fuel() + fuel, 0, obj:get_fuel_tank()))
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Light
--]]-----------------------------------------------------------------------------------------------
function _G.is_light_alive(obj)
	if obj and obj:is_hanging_lamp() then
		return get_light_data(obj, "health") > 0
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Object data
--]]-----------------------------------------------------------------------------------------------
function _G.get_weapon_data(obj, param)
	if obj and param then
		if param == "is_attached_grenade_launcher" then
			return toboolean(bit_and(obj:get_wpn_int(nil, 936), 2))
		elseif param == "ammo_type" then
			return obj:get_wpn_int(nil, 1444)
		elseif param == "grenade_mode" and obj:is_weapon_gl() then
			return toboolean(bit_and(obj:get_wpn_int(nil, 2392), 1))
		elseif param == "mag_size" then
			return obj:get_wpn_int(nil, 1408)
		elseif param == "zoom_mode" then
			return toboolean(bit_and(obj:get_wpn_int(nil, 1012), 1))
		elseif param == "zoom_rotation_factor" then
			return obj:get_wpn_float(1016)
		elseif param == "scope_texture" then
			return not toboolean(bit_and(obj:get_wpn_int(nil, 936), 128))
		elseif param == "scope_enabled" then
			return toboolean(obj:get_wpn_int(nil, 1000))
		elseif param == "scope_name" then
			set_int_arg0(952)
			return obj:get_wpn_shared_str()
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_ammo_data(obj, param)
	if obj and param then
		if param == "box_size" then
			if obj.get_go_int16 then
				return obj:get_go_int16(nil, 476)
			else
				return obj:get_netpk("ammo_left")
			end
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.set_ammo_data(obj, param, value)
	if obj and param and value then
		if param == "box_size" then
			if obj.set_go_int16 then
				obj:set_go_int16(476, value)
			else
				obj:modify_netpk("ammo_left", value, "upd.ammo_left", value)
			end
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_actor_data(param)
	if param then
		if param == "camera_type" then
			return Actor:get_actor_int(nil, 1328)
		elseif param == "zoom_mode" then
			return toboolean(bit_and(Actor:get_actor_int(nil, 1480), 1))
		elseif param == "walk_power" then
			return Actor:get_actor_condition_float(284)
		elseif param == "walk_weight_power" then
			return Actor:get_actor_condition_float(292)
		elseif param == "overweight_walk_k" then
			return Actor:get_actor_condition_float(296)
		elseif param == "sprint_k" then
			return Actor:get_actor_condition_float(308)
		elseif param == "accel_k" then
			return Actor:get_actor_condition_float(304)
		elseif param == "delta_time" then
			return Actor:get_actor_condition_float(208)
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.set_actor_data(param, value)
	if param and value then
		if param == "camera_type" then
			Actor:set_actor_int(1328, value)
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_light_data(obj, param)
	if obj and param then
		if param == "health" then
			return obj:get_go_float(484)
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_monster_data(obj, param)
	if obj and param then
		if param == "speed" then
			return obj:get_custom_monster_float(920)
		elseif param == "invisible" then
			return toboolean(obj:get_custom_monster_int(nil, 1713))
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_outfit_data(obj, param)
	if obj and param then
		if param == "power_loss" then
			return obj:get_inventory_item_float(696)
		elseif param == "additional_inventory_weight2" then
			return obj:get_inventory_item_float(720)
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_inventory_item_data(obj, param)
	if obj and param then
		if param == "slot" then
			return obj:get_inventory_item_int(nil, 156)
		elseif param == "inv_name" then
			set_int_arg0(140)
			return obj:get_inventory_item_shared_str()
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.set_inventory_item_flag(obj, mask, value)
	obj:set_inventory_item_int16(132, flags16():assign(obj:get_inventory_item_int16(nil, 132)):set(mask, value):get())
end
---------------------------------------------------------------------------------------------------
function _G.set_item_tradability_highlight_color(obj, color_idx)
	obj:set_inventory_item_int16(134, bit_or(bit_and(obj:get_inventory_item_int16(nil, 134), 65520), color_idx))
end
---------------------------------------------------------------------------------------------------
function _G.get_hud_data(obj, param)
	if obj and param then
		if param == "hud_section" then
			set_int_arg0(24)
			return obj:get_hud_shared_str()
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.get_car_data(obj, param)
	if obj and param then
		if param == "current_transmission_num" then
			return obj:get_car_int(nil, 1560)
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.set_car_data(obj, param, value)
	if obj and param and value then
		if param == "camera_position" then
			obj:set_car_float(nil, value.x, 1324)
			obj:set_car_float(nil, value.y, 1328)
			obj:set_car_float(nil, value.z, 1332)
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Sounds
--]]-----------------------------------------------------------------------------------------------
function _G.play_safe_sound_object(sound_path, timeout, volume)
	if sound_path then
		if not timeout then
			timeout = 0
		end
		if not volume then
			volume = 1.0
		end
		sound_object(sound_path):play_no_feedback(Actor, sound_object.s2d, timeout, xyz(), volume)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Particles
--]]-----------------------------------------------------------------------------------------------
local safe_particle_objects = {}
local safe_particle_objects_id = 0
---------------------------------------------------------------------------------------------------
function _G.safe_particle_object(particle_path)
	if particle_path then
		safe_particle_objects_id = safe_particle_objects_id + 1
		safe_particle_objects[safe_particle_objects_id] = particles_object(particle_path)
		return safe_particle_objects[safe_particle_objects_id]
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Camera
--]]-----------------------------------------------------------------------------------------------
function _G.camera_rotate_on_position(pos, speed, action, ...)
	if pos and speed >= 1 and speed <= 20 then
		local args = {...}
		local current_dir = screen.cam_dir:mul(level.get_target_dist())
		local end_dir = pos:sub(screen.cam_pos)
		local current_angle = -current_dir:getH()
		local end_angle = -end_dir:getH()
		if vector():crossproduct(end_dir, screen.cam_dir).y > 0 then
			speed = -speed
		end
		level.add_call(
			function()
				if current_angle > 1.57 then
					current_angle = -4.71
				elseif current_angle < -4.71 then
					current_angle = 1.57
				end
				current_angle = current_angle + speed / 1000
				Actor:set_camera_direction(xyz(current_angle, 0, 0))
				return math.abs(current_angle - end_angle) < 0.01
			end,
			function()
				if action then
					loadstring("return function(args) "..action.."(unpack(args)) end")()(args)
				end
			end
		)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * HUD
--]]-----------------------------------------------------------------------------------------------
function _G.add_message(xml, text, x, y, a, r, g, b)
	if xml and text then
		local st = hud:AddCustomStatic(xml, true):wnd()
		st:SetTextST(text)
		if x then st:SetTextX(x) end
		if y then st:SetTextY(y) end
		if a and r and g and b then st:SetTextColor(a, r, g, b) end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * UI
--]]-----------------------------------------------------------------------------------------------
function _G.validate_list(list)
	if list and list:GetSize() ~= 0 then
		local index = list:GetSelectedItem()
		return index ~= -1 and list:GetItem(index)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Extended level namespace
--]]-----------------------------------------------------------------------------------------------
function level.add_cam_effector3(time, amplitude, period_number, power)
	if time and amplitude and period_number and power then
		level.set_ce_time(time)
		level.set_ce_amplitude(amplitude)
		level.set_ce_period_number(period_number)
		level.set_ce_power(power)
		level.add_ce()
	end
end
---------------------------------------------------------------------------------------------------
local gcfg = game_ini()
---------------------------------------------------------------------------------------------------
function level.indoor(lname)
	if not lname then
		if level.present() then
			lname = level.name()
		else
			return false
		end
	end
	return gcfg:r_string_cache(lname, "indoor", false)
end
---------------------------------------------------------------------------------------------------
function level.parked_call(action, x)
	if not x then
		x = 1
	end
	level.add_call(
		function()
			x = x - 1
			return x == 0
		end,
		action
	)
end
--[[-----------------------------------------------------------------------------------------------
 * Ini
--]]-----------------------------------------------------------------------------------------------
function _G.read_line(section, line, line_type, ini, default_value)
	if section and line then
		if not ini then
			ini = system_ini()
		end
		if not line_type then
			line_type = "number"
		end
		if ini:section_exist(section) and ini:line_exist(section, line) then
			if line_type == "string" then
				return ini:r_string(section, line)
			elseif line_type == "number" then
				return ini:r_float(section, line)
			elseif line_type == "bool" then
				return ini:r_bool(section, line)
			elseif line_type == "vector" then
				return ini:r_vector(section, line)
			end
		end
		return default_value
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Others
--]]-----------------------------------------------------------------------------------------------
function _G.is_key_pressed(dik)
	return dik and pressed_keys[dik]
end
---------------------------------------------------------------------------------------------------
function _G.is_hud_draw()
	return console:get_bool("hud_draw")
end
---------------------------------------------------------------------------------------------------
function _G.toboolean(e)
	return e ~= nil and e ~= 0 and e ~= "0" and e ~= "false" and e ~= false
end
---------------------------------------------------------------------------------------------------
function _G.random_position(center, radius)
	center.x = center.x + math.random(-radius, radius)
	center.z = center.z + math.random(-radius, radius)
	return center
end
---------------------------------------------------------------------------------------------------
function _G.get_item_place(obj, npc)
	if not npc then
		npc = Actor
	end
	if npc:is_in_slot(obj) then
		return item_place.slot
	elseif npc:is_on_belt(obj) then
		return item_place.belt
	elseif npc:is_in_ruck(obj) then
		return item_place.ruck
	end
	return item_place.undefined
end
---------------------------------------------------------------------------------------------------
function _G.play_object_bones_particle(obj, particle_path)
	if obj and particle_path then
		local ini = obj:get_visual_ini()
		if ini and ini:section_exist("particle_bones") then
			local bones = ini:key_value("particle_bones")
			for k, v in pairs(bones) do
				safe_particle_object(particle_path):play_at_pos(obj:bone_position(k))
			end
		end
	end
end
---------------------------------------------------------------------------------------------------
function _G.make_hit(victim, power, impulse, type, direction, who, bone_name)
	if victim then
		if not type then type = hit.wound end
		if not direction then direction = xyz() end
		if not power then power = 1 end
		if not impulse then impulse = 1 end
		if not who then who = victim end
		local h = hit()
		h.type = type
		h.direction = direction
		if bone_name then
			h:bone(bone_name)
		end
		h.power = power
		h.impulse = impulse
		h.draftsman = who
		victim:hit(h)
	end
end
---------------------------------------------------------------------------------------------------
local names_cnt = { }
for i, group in ipairs({ "stalker", "bandit", "science", "private", "sergeant", "lieutenant", "captain" }) do
	names_cnt[group] = {
		name	= config:r_u32("stalker_names_" .. group, "name_cnt"),
		lname	= config:r_u32("stalker_names_" .. group, "last_name_cnt")
	}
end
---------------------------------------------------------------------------------------------------
function _G.generate_name(group)
	local cnt = names_cnt[group]
	if not cnt then
		return ""
	end
	local fname = translate("name_stalker_" .. math.random(cnt.name))
	local sname = translate("lname_stalker_" .. math.random(cnt.lname))
	return string.format("%s %s", fname, sname)
end
---------------------------------------------------------------------------------------------------
function _G.check_time_interval(hours_from, minutes_from, hours_to, minutes_to)
	local time_from = game.CTime():set_table({ hour = hours_from, ["min"] = minutes_from })
	local time_to = game.CTime():set_table({ hour = hours_to, ["min"] = minutes_to })
	local cur_time = game.CTime():set_table({
		hour	= level.get_time_hours(),
		["min"]	= level.get_time_minutes()
	})
	return cur_time >= time_from and cur_time < time_to
end
---------------------------------------------------------------------------------------------------
function _G.send_tip(news_text, header, timeout, showtime, sender, sound)
	if news_text then
		if timeout ~= nil and timeout > 0 then
			timer("send_tip", timeout * 1000, true, news_text, header, 0, showtime, sender, sound)
			return
		end
		local sinfo = news_manager.sender_info_byname(sender, header)
		header = sinfo[3] or header or translate("st_tip")
		if not showtime then showtime = 5 end
		if sound then sound_object("device\\pda\\"..sound):play(Actor, 0, sound_object.s2d) end
		Actor:give_game_news("%c[255,160,160,160]"..header.."\\n%c[default]"..news_text, "ui\\ui_iconsTotal", Frect():set(sinfo[1], sinfo[2], 83, 47), 0, showtime * 1000)
	end
end
