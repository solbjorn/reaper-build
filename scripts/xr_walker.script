----------------------------------------------------------------------------------------------------
-- Walkers
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_walker" (property_evaluator)

function evaluator_need_walker:__init(storage, name) super(nil, name)
	self.st = storage
end

function evaluator_need_walker:evaluate()
	return self.st.section == db.storage[self.object:id()].active_section
end

----------------------------------------------------------------------------------------------------------------------
class "action_walker_activity" (action_base)

function action_walker_activity:__init (npc, action_name, storage) super(nil, action_name)
	self.st = storage
	self.move_mgr = db.storage[npc:id()].move_mgr
end

function action_walker_activity:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self:reset_scheme(nil, self.object)
end

function action_walker_activity:activate_scheme(loading, npc)
	self.st.signals = {}
	self:reset_scheme(loading, npc)
end

function action_walker_activity:reset_scheme(loading, npc)
	if self.st.path_walk_info == nil then			
		self.st.path_walk_info = utils.path_parse_waypoints(self.st.path_walk)
	end
	if self.st.path_look_info == nil then
		self.st.path_look_info = utils.path_parse_waypoints(self.st.path_look)
	end

	self.move_mgr:reset(self.st.path_walk, self.st.path_walk_info, self.st.path_look, self.st.path_look_info, self.st.team, self.st.suggested_state)
	xr_sound.set_sound(npc, self.st.sound_idle)
end

function action_walker_activity:execute()
	action_base.execute(self)

	self.move_mgr:update()
	xr_logic.try_switch_to_another_section(self.object, self.st, db_actor)
end

function action_walker_activity:finalize()
	self.move_mgr:finalize()
	xr_sound.set_sound(self.object, nil)
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--walker binder
----------------------------------------------------------------------------------------------------------------------

local prop_need_walker = xr_evaluators_id.zmey_walker_base + 1
local operator_action_walker = xr_actions_id.zmey_walker_base + 1
local xr_actions_id_alife = xr_actions_id.alife
local wp_stalker_ids_property_alive_true = world_property(stalker_ids.property_alive, true)
local wp_stalker_ids_property_danger_false = world_property(stalker_ids.property_danger, false)
local wp_stalker_ids_property_enemy_false = world_property(stalker_ids.property_enemy, false)
local wp_stalker_ids_property_anomaly_false = world_property(stalker_ids.property_anomaly, false)
local wp_prop_need_walker_true = world_property(prop_need_walker, true)
local wp_prop_need_walker_false = world_property(prop_need_walker, false)

function add_to_binder_q(npc, storage)
	local manager = npc:motivation_action_manager()

	-- // evaluators
	manager:add_evaluator(prop_need_walker, this.evaluator_need_walker(storage, "walker_need"))

	local new_action = this.action_walker_activity(npc, "action_walker_activity", storage)
	new_action:add_precondition(wp_stalker_ids_property_alive_true)
	new_action:add_precondition(wp_stalker_ids_property_danger_false)
	new_action:add_precondition(wp_stalker_ids_property_enemy_false)
	new_action:add_precondition(wp_stalker_ids_property_anomaly_false)
	new_action:add_precondition(wp_prop_need_walker_true)
	xr_motivator.addCommonPrecondition(new_action)
	new_action:add_effect(wp_prop_need_walker_false)
	manager:add_action(operator_action_walker, new_action)

		-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	storage.actions[ new_action ] = true

	new_action = manager:action(xr_actions_id_alife)
	new_action:add_precondition(wp_prop_need_walker_false)
end

-- Включение схемы
--
-- enabled - включена ли схема
-- path_walk - основной путь, по которому ходит охранник
-- path_look [опционально] - путь, куда смотрит охранник
-- team [опционально] - команда для синхронизации
--
function set_scheme(npc, ini, scheme, section, gulag_name)
	local function get_field_string(field)
		return (ini:line_exist(section, field) and ini:r_string(section, field)) or nil
	end

	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	if section and ini:section_exist(section) then
		if not ini:line_exist(section, "path_walk") then
			abort("xr_walker scheme %s, section %s: no path_walk field", scheme, section)
			return
		end
		if gulag_name and gulag_name ~= "" then
			gulag_name = gulag_name .. "_"
			st.path_walk  = gulag_name .. ini:r_string(section, "path_walk")
			st.path_look  = (ini:line_exist(section, "path_look") and gulag_name .. ini:r_string(section, "path_look")) or nil
			st.team       = (ini:line_exist(section, "team") and gulag_name .. ini:r_string(section, "team")) or nil
		else
			st.path_walk  = ini:r_string(section, "path_walk")
			st.path_look  = get_field_string("path_look")
			st.team       = get_field_string("team")
		end
		st.sound_idle = get_field_string("sound_idle")

		st.suggested_state = {
			standing	= get_field_string("def_state_standing"),
			moving1		= get_field_string("def_state_moving1"),
			moving2		= get_field_string("def_state_moving2"),
			moving3		= get_field_string("def_state_moving3")
		}

		st.path_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
		st.path_look_info = nil -- не загружены.
	else 
			abort("xr_walker scheme %s has bad or missing section: %s", scheme, tostring(section))
			return
	end
end
