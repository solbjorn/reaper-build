--[[------------------------------------------------------------------------------------------------
Зона смерти на ЧАЭС (2)
--------------------------------------------------------------------------------------------------]]

----------------------------------------------------------------------------------------------------
-- Класс, отвечающий за постпроцесс
----------------------------------------------------------------------------------------------------
-------------------
class "PPEffector" (effector)
-------------------
function PPEffector:__init (id_number, host) super (id_number, 10000000)
	self.params = effector_params ()
	self.host = host
end
-------------------
function PPEffector:process (pp)
    self.host:update_params ()
	pp:assign (self.params)
    effector.process (self, pp)

    return true
end
-------------------

-------------------
class "action_postprocess"
-------------------
function action_postprocess:__init (obj, storage)
	self.object         = obj
	self.st             = storage
	self.actor_inside   = false
end
-------------------
function action_postprocess:reset_scheme ()
	self.actor_inside = false
-- ----------------------------------------------------------------------------------------
-- postprocess
-- ----------------------------------------------------------------------------------------
	self.gray_amplitude					= 1.0						    -- gray max intensity			[0.0-1.0]
	self.gray_color						= color (0.5, 0.5, 0.5)		-- RGB							[0.0-1.0]
	self.base_color						= color (0.5, 0.5, 0.5)	    -- RGB							[0.0-1.0]
	self.noise_var						= noise (0.9, 0.5, 30)		    -- intensity, grain, fps		[0.0-1.0,0.0-1.0,1-100]
	self.eff_time						= 0
	self.hit_time						= 0
	self.intensity						= 0
	self.intensity_base					= self.st.intensity
	self.hit_power                      = 0
	self.old_time                       = time_global ()

	if self.intensity_base < 0.0 then
	   self.intensity_inertion	= -self.st.intensity_speed
	else
	   self.intensity_inertion	= self.st.intensity_speed
	end

	self.pp 							= PPEffector (self.object:id () + 2000, self)
	self.pp.params.noise				= noise ()
	self.pp:start						()

	self.gray  = 1
	self.noise = noise (1.0, 0.3, 30)
end
-------------------
function action_postprocess:deactivate()
	-- Ray Twitty aka Shadows: убираем хвосты sr_psy_antenna и просто останавливаем эффектор при переключении схемы
	self.pp:finish()
end
-------------------
function action_postprocess:update_params ()

	local c_time = (time_global () - self.old_time) * 0.001
	self.old_time = time_global ()

	if self.actor_inside == true then
	   self.intensity = self.intensity + self.intensity_inertion * c_time
	   if self.intensity_base < 0.0 then
	      if self.intensity < self.intensity_base then self.intensity = self.intensity_base end
	   else
	      if self.intensity > self.intensity_base then self.intensity = self.intensity_base end
	   end
	else
	   if self.intensity_base < 0.0 then
	      self.intensity = self.intensity - self.intensity_inertion * c_time
	      if self.intensity > 0.0 then self.intensity = 0.0 end
	   else
	      self.intensity = self.intensity - self.intensity_inertion * c_time
	      if self.intensity < 0.0 then self.intensity = 0.0 end
	   end

	end

	self.pp.params.color_base			= self.base_color
	self.pp.params.color_gray			= color (self.gray_color.r + self.intensity, self.gray_color.g + self.intensity, self.gray_color.b +  self.intensity)
	self.pp.params.gray					= self.gray_amplitude * self.intensity
	self.pp.params.noise				= noise (self.noise_var.intensity * self.intensity, self.noise_var.grain, self.noise_var.fps)
	self.pp.params.dual                 = duality (0.01 * self.intensity, 0.01 * self.intensity)
end
-------------------
function action_postprocess:update (delta)
	if xr_logic.try_switch_to_another_section (self.object, self.st) then
		return
	end

	self.actor_inside = self.object:inside(Actor:position())

	self:update_hit (delta)
end
-------------------
function action_postprocess:update_hit		(delta)
    if self.actor_inside == false then
       self.hit_power = 0
       return
    end
    self.hit_power = self.hit_power + (delta * 0.001) * (self.st.hit_intensity * 0.01)
    if time_global () - self.hit_time < 1000 then
       return
    end
    self.hit_time = time_global ()
    local h = hit ()
    h.power = self.hit_power
	h.direction = vector ():set (0, 0, 0)
	h.impulse	= 0
	h.draftsman = Actor
	h.type = hit.radiation
	Actor:hit (h)

	h.type = hit.shock
	Actor:hit (h)

end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, storage)
	storage.actions[ action_postprocess( npc, storage ) ] = true
end
---------------------------------------------------------------------------------------------------------------------
function set_scheme(npc, ini, scheme, section, gulag_name)
	local function get_field_number(field, default)
		return (ini:line_exist(section, field) and ini:r_float(section, field)) or default or 0
	end
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.intensity       = get_field_number("intensity") * 0.01
	st.intensity_speed = get_field_number("intensity_speed") * 0.01
	st.hit_intensity   = get_field_number("hit_intensity")
end
