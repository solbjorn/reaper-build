----------------------------------------------------------------------------------------------------------------------
--'	Схема кемпер. Чудак с бальшой пушкой ходит и отстреливает живность.
--'	автор: Диденко Руслан (Stohe)
--'	TODO:
----------------------------------------------------------------------------------------------------------------------

local def_ignore_distance			= 150
local def_ignore_distance_grenade	= 15
local def_ignore_distance_corpse	= 10
local def_ignore_distance_hit		= 150
local def_ignore_distance_sound		= 50

local def_danger_inertion_time_grenade	= 20000
local def_danger_inertion_time_corpse	= 10000
local def_danger_inertion_time_hit		= 60000
local def_danger_inertion_time_sound	= 15000
local def_danger_inertion_time_ricochet	= 30000

local danger_object_bullet_ricochet = danger_object.bullet_ricochet
local danger_object_attack_sound = danger_object.attack_sound
local danger_object_entity_attacked = danger_object.entity_attacked
local danger_object_entity_death = danger_object.entity_death
local danger_object_entity_corpse = danger_object.entity_corpse
local danger_object_attacked = danger_object.attacked
local danger_object_grenade = danger_object.grenade
local danger_object_enemy_sound = danger_object.enemy_sound
local game_object_enemy = game_object.enemy

local db_storage = db.storage

local engage_after_update 	= 5 	-- С какого апдейта схема начинает работать. Нельзя чтобы схема стартовала включенной сразу же, иначе будут застранцы без вариантов
local count_update 			= {}		-- Счетчик апдейтов

local always_ignore_danger_from = { m_car = "true" }

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
-- true - есть danger, false - нет danger
class "evaluator_danger" (property_evaluator)
function evaluator_danger:__init(name, storage) super (nil, name)
	self.a = storage
end

function evaluator_danger:evaluate()
	local self_obj = self.object
	local npc_id = self_obj:id()
	if not self.enabled then
		if (count_update[npc_id] or 0) <= engage_after_update then
			table.add(count_update, npc_id)
			return false
		else
			self.enabled = true
			count_update[npc_id] = nil
		end
	end
	if not self_obj:alive() then return false end

	local best_danger = self_obj:best_danger()
	-- проверка на денжер.
	if best_danger == nil then
		self.danger_time = nil
		return false
	end

	-- проверка не находится ли денжер в списке вечнозапрещенных.(БТР, Вертолеты и тд)
	local best_danger_section_name
	local best_danger_object
	if best_danger:dependent_object() ~= nil then
		best_danger_object = best_danger:dependent_object()
	else
		if best_danger:object() ~= nil then
			best_danger_object = best_danger:object()
		end
	end
	if best_danger_object ~= nil then
		best_danger_section_name = best_danger_object:section()
	end

	if best_danger_section_name ~= nil then
		if always_ignore_danger_from[best_danger_section_name] == "true" then
			return false
		end
	end

	local bd_type = best_danger:type()
	-- Проверка на запрещенный денжер от актера
	if best_danger_object ~= nil and
	   best_danger_object:id() == 0 and
	   (bd_type == danger_object_attack_sound or
	    bd_type == danger_object_bullet_ricochet)
	then
		if self_obj:best_enemy() == nil and
		   self_obj:relation(Actor) ~= game_object_enemy
		then
      if bd_type ~= danger_object_bullet_ricochet or time_global()-best_danger:time()>10000 then
        return false
      end
		end
	end

	-- фикс агра на звуки от трупов
	if best_danger_object ~= nil and best_danger_object:alive() == false and bd_type ~= danger_object_entity_death and bd_type ~= danger_object_grenade then
		return false
	end

	-- Проверка, не находится ли данжер в списке запрещенных.
	if bd_type == danger_object_grenade then
		if self.a.ignore_types["grenade"] == true then
			return false
		end
	elseif bd_type == danger_object_entity_corpse then
		if self.a.ignore_types["corpse"] == true then
			return false
		end
	elseif bd_type == danger_object_entity_attacked or
			bd_type == danger_object_attacked then
		if self.a.ignore_types["hit"] == true then
			return false
		end
	elseif bd_type == danger_object_enemy_sound or
	       bd_type == danger_object_attack_sound or
	       bd_type == danger_object_entity_death then
		if self.a.ignore_types["sound"] == true then
			return false
		end
	end

	-- отсеиваем по настройке combat_ignore/danger
	local bd_obj = best_danger:object()
	local npc_storage = db_storage[npc_id]
	npc_storage.enemy = bd_obj
	if bd_obj ~= nil and npc_storage.active_scheme ~= nil then
		local overrides = npc_storage.overrides
		if overrides and
		   overrides.combat_ignore and
		   overrides.combat_ignore.cached_condlist:pick_section_from_condlist(self_obj) ~= nil then
			return false
		end
	end

	-- инерция возврата. Только не для кемпера.
	if self.danger_time then
		self.danger_time = best_danger:time()
		local passed_time = time_global() - self.danger_time
		-- и еще небольшой фикс
		if passed_time < 0 and bd_type == danger_object_entity_death then
			return false
		end
		if check_danger_inertion_time(self_obj, best_danger, passed_time) == true then
			return true
		else
			return false
		end
	end

	-- Отсеиваем по дистанции
	if check_danger_distance(self_obj, best_danger) == false then
		return false
	end

	-- Отсеиваем по зоне
	if sr_danger.territory ~= nil and sr_danger.check_danger_position(best_danger:position()) then
		return false
	end

	-- Отсеиваем по информационным рестрикторам
	if xr_gulag.is_info_restricted(npc_id, best_danger:position()) then
		return false
	end

	-- Отсеиваем тяжелораненых
	if xr_wounded.is_heavy_wounded_by_id(npc_id) then
		return false
	end

	-- Денжер для снайпера
	if npc_storage.active_scheme == "camper" then
		if bd_type == danger_object_grenade then
			self.danger_time = best_danger:time()
			return true
		end
		return false
	else
		self.danger_time = best_danger:time()
		return true
	end
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
local stalker_ids_property_danger = stalker_ids.property_danger

function add_to_binder(object, storage)
	local manager = object:motivation_action_manager()

	manager:remove_evaluator(stalker_ids_property_danger)
	manager:add_evaluator(stalker_ids_property_danger, evaluator_danger("danger", storage))
end

function set_danger(npc, ini, scheme, section)
	xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end

function reset_danger(npc, scheme, st, section)
	local st_ini = st.ini
	local function get_field_number(field, default)
		return (st_ini:line_exist(section, field) and st_ini:r_float(section, field)) or default
	end
	local st_danger = st.danger
	if scheme == nil or scheme == "nil" then
		section = nil
	else
		if section and st_ini:section_exist(section) then
			section = (st_ini:line_exist(section, "danger") and st_ini:r_string(section, "danger")) or nil
		else
			section = nil
		end
	end

	st_danger.ignore_types = {}
	if npc:character_community() == "zombied" then st_danger.ignore_types["grenade"] = true end

	if section and st_ini:section_exist(section) then
		local t = string.parse_names((st_ini:line_exist(section, "danger") and st_ini:r_string(section, "danger")) or "")
		for k,v in pairs(t) do
			st_danger.ignore_types[v] = true
		end

		st_danger.ignore_distance			=  get_field_number("ignore_distance", def_ignore_distance)
		st_danger.ignore_distance_grenade	=  get_field_number("ignore_distance_grenade", def_ignore_distance_grenade)
		st_danger.ignore_distance_corpse	=  get_field_number("ignore_distance_corpse", def_ignore_distance_corpse)
		st_danger.ignore_distance_hit		=  get_field_number("ignore_distance_hit", def_ignore_distance_hit)
		st_danger.ignore_distance_sound		=  get_field_number("ignore_distance_sound", def_ignore_distance_sound)

		st_danger.danger_inertion_time_grenade		=  get_field_number("danger_inertion_time_grenade", def_danger_inertion_time_grenade)
		st_danger.danger_inertion_time_corpse		=  get_field_number("danger_inertion_time_corpse", def_danger_inertion_time_corpse)
		st_danger.danger_inertion_time_hit			=  get_field_number("danger_inertion_time_hit", def_danger_inertion_time_hit)
		st_danger.danger_inertion_time_sound		=  get_field_number("danger_inertion_time_sound", def_danger_inertion_time_sound)
		st_danger.danger_inertion_time_ricochet		=  get_field_number("danger_inertion_time_ricochet", def_danger_inertion_time_ricochet)
	else
		st_danger.ignore_distance			= def_ignore_distance
		st_danger.ignore_distance_grenade	= def_ignore_distance_grenade
		st_danger.ignore_distance_corpse	= def_ignore_distance_corpse
		st_danger.ignore_distance_hit		= def_ignore_distance_hit
		st_danger.ignore_distance_sound		= def_ignore_distance_sound

		st_danger.danger_inertion_time_grenade		= def_danger_inertion_time_grenade
		st_danger.danger_inertion_time_corpse		= def_danger_inertion_time_corpse
		st_danger.danger_inertion_time_hit			= def_danger_inertion_time_hit
		st_danger.danger_inertion_time_sound		= def_danger_inertion_time_sound
		st_danger.danger_inertion_time_ricochet		= def_danger_inertion_time_ricochet
	end
end

function check_danger_inertion_time(npc, danger, passed_time)
	local danger_settings = db_storage[npc:id()].danger
	local bd_type = danger:type()

	if danger_settings ~= nil then
		if bd_type == danger_object_grenade then
			if danger_settings.danger_inertion_time_grenade <= passed_time then
				return false
			end
		elseif bd_type == danger_object_entity_corpse then
			if danger_settings.danger_inertion_time_corpse <= passed_time then
				return false
			end
		elseif bd_type == danger_object_entity_attacked or
			bd_type == danger_object_attacked then
			if danger_settings.danger_inertion_time_hit <= passed_time then
				return false
			end
		elseif bd_type == danger_object_enemy_sound or
			bd_type == danger_object_attack_sound or
			bd_type == danger_object_entity_death then
			if danger_settings.danger_inertion_time_sound <= passed_time then
				return false
			end
		elseif bd_type == danger_object_bullet_ricochet then
			if danger_settings.danger_inertion_time_ricochet <= passed_time then
				return false
			end
		end
	else
		if bd_type == danger_object_grenade then
			if def_danger_inertion_time_grenade <= passed_time then
				return false
			end
		elseif bd_type == danger_object_entity_corpse then
			if def_danger_inertion_time_corpse <= passed_time then
				return false
			end
		elseif bd_type == danger_object_entity_attacked or
			bd_type == danger_object_attacked then
			if def_danger_inertion_time_hit <= passed_time then
				return false
			end
		elseif bd_type == danger_object_enemy_sound or
			bd_type == danger_object_attack_sound or
			bd_type == danger_object_entity_death then
			if def_danger_inertion_time_sound <= passed_time then
				return false
			end
		elseif bd_type == danger_object_bullet_ricochet then
			if def_danger_inertion_time_ricochet <= passed_time then
				return false
			end
		end
	end
	return true
end

function check_danger_distance(npc, danger)
	local danger_settings = db_storage[npc:id()].danger
	local bd_type = danger:type()
	local danger_distance_sqr = danger:position():distance_to(npc:position())

	if danger_settings ~= nil then
		if danger_distance_sqr >= danger_settings.ignore_distance then
			return false
		end
		if bd_type == danger_object_grenade then
			if danger_distance_sqr >= danger_settings.ignore_distance_grenade then
				return false
			end
		elseif bd_type == danger_object_entity_corpse then
			if danger_distance_sqr >= danger_settings.ignore_distance_corpse then
				return false
			end
		elseif bd_type == danger_object_entity_attacked or
				bd_type == danger_object_attacked then
			if danger_distance_sqr >= danger_settings.ignore_distance_hit then
				return false
			end
		elseif bd_type == danger_object_enemy_sound or
				bd_type == danger_object_attack_sound or
				bd_type == danger_object_entity_death then
			if danger_distance_sqr >= danger_settings.ignore_distance_sound then
				return false
			end
		end
	else
		if danger_distance_sqr >= def_ignore_distance then
			return false
		end
		if bd_type == danger_object_grenade then
			if danger_distance_sqr >= def_ignore_distance_grenade then
				return false
			end
		elseif bd_type == danger_object_entity_corpse then
			if danger_distance_sqr >= def_ignore_distance_corpse then
				return false
			end
		elseif bd_type == danger_object_entity_attacked or
				bd_type == danger_object_attacked then
			if danger_distance_sqr >= def_ignore_distance_hit then
				return false
			end
		elseif bd_type == danger_object_enemy_sound or
				bd_type == danger_object_attack_sound or
				bd_type == danger_object_entity_death then
			if danger_distance_sqr >= def_ignore_distance_sound then
				return false
			end
		end
	end
	return true
end
