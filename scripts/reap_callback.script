--[[---------------------------------------------------------------------------
 * Shortcuts
--]]---------------------------------------------------------------------------

local string_sub = string.sub

--[[---------------------------------------------------------------------------
 * Callbacks
--]]---------------------------------------------------------------------------

function __init(self)
	self.weather_manager = reap_weather.get_weather_manager()
end

local item_take_fn = {
	arhara_listok		= arhara_dialog.spawn_strelok_pda,
	val_zapis_1 = function()
		if not has_info("coll_tele1_on") then
			valerich_treasures.spawn_next(1)
		end
	end
}

for _, item in ipairs({
	"strelok_taynik_pda1", "strelok_taynik_pda1_2", "strelok_taynik_pda1_3",
	"strelok_taynik_pda1_4", "strelok_taynik_pda1_5", "strelok_taynik_pda30",
	"strelok_taynik_pda2_1", "strelok_taynik_pda2_2", "strelok_taynik_pda3_1",
	"strelok_taynik_pda3_2", "strelok_taynik_pda3", "strelok_taynik_pda3_3",
	"strelok_taynik_pda4", "strelok_taynik_pda5", "strelok_taynik_pda6",
	"strelok_taynik_pda7", "strelok_taynik_pda0", "stdt_pda1"
}) do
	item_take_fn[item] = proper_dialog["take_" .. item]
end

function item_take(obj)
	Inventory:on_item_take(obj)
	bolt_ending.on_item_take(obj)

	if obj:is_artefact() then
		art_hit.hit_by_art(obj)
	end

	local fn = item_take_fn[obj:section()]
	if not fn then return end

	if type(fn) == "string" then
		give_info(fn)
	else
		fn(obj)
	end
end

function take_item_from_box(box, item)
	if box:section() == "m_inventory_box" and box:is_inv_box_empty() then
		level.start_stop_menu(level.main_input_receiver(), true)
		got_item("treasure_item")
		release(box)
	end

	local sect = item:section()
	if string_sub(sect, 1, 10) == "val_zapis_" then
		local name, id = string.match(sect, "(val_zapis_)(%d+)")
		if name and id then
			valerich_treasures.spawn_next(tonumber(id))
		end
	end
end

local item_drop_fn = {
	af_caterpillar		= arhara_dialog.spawn_teleport_agro_norm_taynik
}

function item_drop(obj)
	Inventory:on_item_drop(obj)

	bolt_ending.on_item_drop(obj)
	grenade_belt.on_item_drop(obj)

	reap_af.item_drop(obj)

	local fn = item_drop_fn[obj:section()]
	if fn then
		fn(obj)
	end
end

function actor_death(victim, who)
	Dream:stopper()

	reap_misc.actor_killed()
	reap_misc.kill_online_controllers()

	news_main.on_death(victim, who)
end

function net_destroy(self)
	self.weapon_manager:clear_scope_texture()
	ui_scroll_indicators.destroy_indicators()
end

local torch_snd = { voice([[interface\inv_torch_on]]), voice([[interface\inv_torch_off]]) }
local tmp

local hotkeys = {
	[key_bindings.kQUICK_SAVE] = function(binded, bind, kbd)
		kbd.ignore = true
		if level.main_input_receiver() then return end

		screen:pause(true)
		level.parked_call(function()
			console:execute("save " .. user_name() .. "_quicksave")
			screen:pause(false)
		end)
	end,
	[key_bindings.kTORCH] = function()
		local torch = Actor:item_in_slot(inventory_slots.TORCH)
		if not torch then return end

		say(torch_snd[torch:get_torch().on and 2 or 1])
	end,
	[key_bindings.kUSE_BANDAGE] = function(binded, bind, kbd)
		local item = Actor:object("bandage")
		if item then
			Actor:eat(item)
		end

		kbd.ignore = true
	end,
	[key_bindings.kUSE_MEDKIT] = function(binded, bind, kbd)
		local item = Actor:object("medkit") or Actor:object("medkit_army") or
			     Actor:object("medkit_scientic")
		if item then
			Actor:eat(item)
		end

		kbd.ignore = true
	end
}

tmp = function(binded, bind)
	binded.weapon_manager:on_key_press(bind)
end
for _, key in ipairs({
	"kWPN_FIREMODE_NEXT",
	"kWPN_FIREMODE_PREV"
}) do
	hotkeys[key_bindings[key]] = tmp
end

tmp = nil

function key_press(binded, dik, bind, kbd)
	if not actor_flags.alive then return end

	local fn = hotkeys[bind]
	if fn then
		fn(binded, bind, kbd)
	end
end
