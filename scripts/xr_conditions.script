
-- Каждая функция в этом файле используется как условие xr_logic: {=функция !функция}
-- Если в функцию необходимо передавать параметры, то:  {=функция(парам1:парам2:...) !функция(парам1:парам2:...)}
-- Формат: function f(actor, npc). В случае передачи параметров: function f(actor, npc, p).

-- ----------------------------------------------------------------------------------------------------
-- amk function
-- ----------------------------------------------------------------------------------------------------
function time_hours()
	local hr = level.get_time_hours()
	return hr >= 5 and hr <= 22
end

-- ----------------------------------------------------------------------------------------------------
-- Общие функции
-- ----------------------------------------------------------------------------------------------------
-- видим ли мы еще "черный экран" или нет?
function black_screen()
	return screen.precache_frame > 1
end

--
function is_actor_sleeping()
    return db_actor:is_actor_sleeping()
end

-- проверка, что актер жив
function actor_alive(actor, npc)
    if db_actor and db_actor:alive() then
	    return true
	end
	return false
end

-- проверка, что актер мертв
function actor_dead(actor, npc)
    if db_actor and not db_actor:alive() then
	    return true
	end
	return false
end

function see_npc(actor, npc, p)
    local npc1 = level_object_by_sid(p[1])
    if npc and npc1 then
        return npc:see(npc1)
    else
        return false
    end
end

function is_wounded(actor, npc)
	return xr_wounded.is_wounded(npc)
end

function dist_to_actor_le(actor, npc, p)
    local d = p[1]
    return d and npc:position():distance_to_sqr(db_actor:position()) <= d * d
end

function dist_to_actor_ge(actor, npc, p)
    local d = p[1]
    return d and npc:position():distance_to_sqr(db_actor:position()) >= d * d
end

-- проверка того что дистанция до обьекта <= заданной
-- параметры: [sid,dist]
function distance_to_obj_le(actor, npc, p)
    local npc1 = level_object_by_sid(p[1])
    if npc1 then
		return npc:position():distance_to_sqr(npc1:position()) <= p[2]*p[2]
	end
	return false
end

-- проверка того что дистанция до обьекта >= заданной
-- параметры: [sid,dist]
function distance_to_obj_ge(actor, npc, p)
    local npc1 = level_object_by_sid(p[1])
    if npc1 then
		return npc:position():distance_to_sqr(npc1:position()) >= p[2]*p[2]
	end
	return false
end

-- проверка того что npc находится в заданной зоне
-- !!! ВЫЗЫВАТЬ ТОЛЬКО ИЗ SPACE RESTRICTOR !!!
-- параметры: [sid1:sid2:...]
-- !!! НЕКОРРЕКТНО РАБОТАЕТ ДЛЯ ОБЬЕКТОВ В offline'e !!!
-- !!! ДЛЯ ГАРАНТИИ ИСПОЛЬЗОВАТЬ one_obj_in_zone !!!
function obj_in_zone(actor, zone, p)
    local npc1, i, v = 0, 0, 0
	for i, v in pairs(p) do
	    npc1 = level_object_by_sid(v)
        if npc1 and zone:inside(npc1:position()) then
            return true
        end
    end
    return false
end

local jail_door = nil
-- параметры: [sid:def*] def=true|false
-- * параметр не обязателен
function one_obj_in_zone(actor, zone, p)
	local obj1 = level_object_by_sid(p[1])

    if obj1 then -- npc is online
		if p[1] == 402 then
			local sim = g_alife
			if jail_door == nil then
				if has_alife_info("val_prisoner_free") then return false end
				for idb_ = 0, 65534, 1 do
					local lobj = sim:object(idb_)
					if lobj ~= nil and lobj:name() == "val_prisoner_jail_door" then
						jail_door = lobj
						break
					end
				end
			end
			local real_obj = level.object_by_id(jail_door.id)
			if real_obj ~= nil then
				local obj_pos = obj1:position()
				if not zone:inside(obj_pos) then
					if has_alife_info("val_prisoner_door_unlocked") then return false end
					if obj_pos.x > 47.1 and obj_pos.x < 48.3 and obj_pos.z > -54.8 and obj_pos.z < -52.8 then
						sim:set_switch_online(jail_door.id, false)
						sim:set_switch_offline(jail_door.id, true)
					end
				end
			else
				if obj1:position().z < (jail_door.position.z - 0.3) then
					sim:set_switch_offline(jail_door.id, false)
					sim:set_switch_online(jail_door.id, true)
				end
			end
			return true
		end
        return zone:inside(obj1:position())
    else -- npc is offline
        return (p[2] ~= "false") -- default (true) result if npc in offline
    end
end

function actor_in_zone(actor, npc, p)
	local zone = db.zone_by_name[p[1]]
	return db_actor ~= nil and zone ~= nil and zone:inside(db_actor:position())
end
function actor_out_zone(actor, npc, p)
	local zone = db.zone_by_name[p[1]]
	if zone == nil then
		return false
	end
	return not (db_actor ~= nil and zone:inside(db_actor:position()))
end

-- true, если здоровье npc <= заданному значению
-- false в противном случае
function health_le(actor, npc, p)
    return p[1] and npc.health < p[1]
end

-- true, если здоровье вертолёта <= заданному значению
-- false в противном случае
function heli_health_le(actor, obj, p)
	return p[1] and obj:get_helicopter():GetfHealth() < tonumber(p[1])
end

-- видит ли вертолёт npc (по story id)
function heli_see_npc(actor, obj, p)
	if p[1] then
		local o = level_object_by_sid( p[1] )
		return o ~= nil and obj:get_helicopter():isVisible( o )
	else
		return false
	end
end

-- Проверка на принадлежность врага к одной из групп
-- (можно задавать несколько через двоеточие)
function enemy_group(actor, npc, p)
	local g = db.storage[npc:id()].enemy:group()
	local i, v = 0, 0
	for i, v in pairs(p) do
		if v == g then
			return true
		end
	end
	return false
end

function enemy_gulag(actor, npc, p)
	local enemy = db.storage[npc:id()].enemy

	if enemy and enemy:alive() and enemy:id() ~= db_actor_id then
        local g = xr_gulag.get_npc_gulag(enemy)

        if g ~= nil then
            local n = g.name
	        local i, v = 0, 0

            for i, v in pairs(p) do
                if n == v then
                    return true
                end
            end
        end
    end
    return false
end

function gulag_state(actor, npc, p)
	if xr_gulag.getGulagState(p[1]) == p[2] then
		return true
	end
	return false
end

function npc_community(actor, npc, p)
	if p[1] == nil then
		abort("Wrong number of params in npc_community")
	end

	if npc:character_community() == p[1] then
		return true
	end
	return false
end

function npc_rank(actor, npc, p)
	if p[1] == nil then
		abort("Wrong number of params in npc_rank")
	end

	if ranks.get_obj_rank_name(npc) == p[1] then
		return true
	end
	return false
end

function npc_profile(actor, npc, p)
	if p[1] == nil then
		abort("Wrong number of params in npc_profile")
	end

	if npc:profile_name() == p[1] then
		return true
	end
	return false

end

-- Проверка того что удар был нанесен кем-то из npc указанных в списке.
-- Параметры это story_id персонажей. Можно задавать несколько story_id.
function hitted_by(actor, npc, p)
	local t = db.storage[npc:id()].hit
	if t then
		local npc1
		for i, v in ipairs(p) do
			npc1 = story_object(v)
			if npc1 and t.who == npc1.id then
				return true
			end
		end
	end
	return false
end

-- Проверка, что лучшее оружие персонажа - пистолет
function best_pistol(actor, npc)
	return npc:item_in_slot(1) ~= nil
end

-- Проверка того что персонаж был убит кем-то из npc указанных в списке.
-- Параметры это story_id персонажей. Можно задавать несколько story_id.
function killed_by(actor, npc, p)
	local t = db.storage[npc:id()].death
	if t then
		local npc1
		for i, v in ipairs(p) do
			npc1 = story_object(v)
			if npc1 and t.killer == npc1.id then
				return true
			end
		end
	end
	return false
end

-- проверка (по story_id) все ли проверяемые сталкеры живы
function is_alive_all(actor, npc, p)
	local npc1
	for i, v in ipairs(p) do
		npc1 = story_object(v)
		if not npc1 or not npc1:alive() then
			return false
		end
	end
	return true
end

-- проверка (по story_id) того, что хотя бы один из проверяемых сталкеров жив
function is_alive_one(actor, npc, p)
	local npc1
	for i, v in ipairs(p) do
		npc1 = story_object(v)
		if npc1 and npc1:alive() then
			return true
		end
	end
	return false
end

-- проверка (по story_id) того, что проверяемый npc жив
function is_alive(actor, npc, p)
	local npc1 = story_object(p[1])
	return npc1 and npc1:alive() or false
end

-- проверка (по story_id) все ли проверяемые сталкеры мертвы
function is_dead_all(actor, npc, p)
	local npc1
	for i, v in ipairs(p) do
		npc1 = story_object(v)
		if npc1 and npc1:alive() then
			return false
		end
	end
	return true
end

-- проверка (по story_id) того, что хотя бы один из проверяемых сталкеров мертв
function is_dead_one(actor, npc, p)
	local npc1
	for i, v in ipairs(p) do
		npc1 = story_object(v)
		if not npc1 or not npc1:alive() then
			return true
		end
	end
	return false
end

-- проверка (по story_id) того, что сталкер мертв
function is_dead(actor, npc, p)
	local npc1 = story_object(p[1])
	return not npc1 or not npc1:alive() or false
end

-- проверка (по story_id) того, что нашим врагом есть хотя бы кото-то один из списка
function check_fighting(actor, npc, p)
	local enemy = db.storage[npc:id()].enemy
	local sid
	if enemy and enemy:alive() then
	    sid = enemy:story_id()
	    for i, v in ipairs(p) do
		    if type(v) == 'number' and sid == v then
			    return true
		    end
	    end
	end
	return false
end

function val_nap1_check_fighting(actor, npc, p)
	local enemy, npc1
	for i, v in ipairs(p) do
	    npc1 = level_object_by_sid(v)
	    if npc1 then
	        enemy = npc1:best_enemy()
		    if enemy and (enemy:id() == npc:id() or enemy:id() == db_actor_id) then
			    return true
		    end
		end
	end
	return false
end

-- true, если гулага с таким именем (или story id) не существует или в нём нет никого
function gulag_empty(actor, npc, p)
	return xr_gulag.getGulagPopulationComed( p[1] ) == 0
end

-- true, если  в указанном гулаге народу меньше чем надо.
function gulag_population_le(actor, npc, p)
	return xr_gulag.getGulagPopulation( p[1] ) <= p[2]
end

-- true, если  в указанном гулаге народу больше чем надо.
function gulag_population_ge(actor, npc, p)
	return xr_gulag.getGulagPopulation( p[1] ) >= p[2]
end

-- true, если  в указанном гулаге пришло народу меньше чем надо.
function gulag_population_comed_le(actor, npc, p)
	return xr_gulag.getGulagPopulationComed( p[1] ) <= p[2]
end

-- true, если  в указанном гулаге пришло народу больше чем надо.
function gulag_population_comed_ge(actor, npc, p)
	return xr_gulag.getGulagPopulationComed( p[1] ) >= p[2]
end

-- возвращает количество опасных персонажей в гулаге(живых и не раненных).
function gulag_population_active(actor, npc, p)
	 local gulag = xr_gulag.get_gulag_by_name( p[1] )

    if gulag == nil then
		return 0
	end

	local val = 0

	for k,v in pairs(gulag.Object) do
		if (v == true or ( v:alive() and
		   not(xr_wounded.is_heavy_wounded_by_id(k) or
		       xr_wounded.is_psy_wounded_by_id(k)))) and
			gulag.Object_begin_job[k] == true
		then
			val = val + 1
		end
	end
	return val
end

function gulag_inactive(actor, npc, p)
	 local gulag = xr_gulag.get_gulag_by_name( p[1] )

    if gulag == nil then
		return false
	end

	local val = 0

	for k,v in pairs(gulag.Object) do
		if (v == true or ( v:alive() and
		   not(xr_wounded.is_heavy_wounded_by_id(k) or
		       xr_wounded.is_psy_wounded_by_id(k)))) and
			gulag.Object_begin_job[k] == true
		then
			val = val + 1
		end
	end
	return val == 0
end

function gulag_population_active_le(actor, npc, p)
	 local gulag = xr_gulag.get_gulag_by_name( p[1] )

    if gulag == nil then
		return false
	end

	local val = 0

	for k,v in pairs(gulag.Object) do
		if (v == true or ( v:alive() and
		   not(xr_wounded.is_heavy_wounded_by_id(k) or
		       xr_wounded.is_psy_wounded_by_id(k)))) and
			gulag.Object_begin_job[k] == true
		then
			val = val + 1
		end
	end
	return val <= p[2]
end

-- true, если в указанном гулаге потери больше или равны заданным
function gulag_casualities_ge(actor, npc, p)
	return ( p[1] ~= nil and p[2] ~= nil ) and ( xr_gulag.getCasualities( p[1] ) >= p[2] )
end

-- true, если у актёра в инвентаре есть указанный предмет
-- false, если нету, либо не задана секция предмета
function actor_has_item(actor, npc, p)
	return p[1] ~= nil and db_actor:object( p[1] ) ~= nil
end

-- возвращает true, если в текущей схеме персонажа взведён указанный сигнал.
function signal(actor, npc, p)
	if p[1] then
		local st   = db.storage[npc:id()]
		local sigs = st[st.active_scheme].signals
		return sigs ~= nil and sigs[p[1]] == true
	else
		return false
	end
end

-- возвращает true, если значение указанного счётчика актёра больше указанного числа
function counter_greater(actor, npc, p)
	if p[1] and p[2] then
		local c = get_value(p[1], 0)
		return c > p[2]
	else
		return false
	end
end

-- определяет нечётность интервала игрового времени. интервал нужно передать в p[1]
function odd_time_interval(actor, npc, p)
	return odd( game.milliseconds() / p[1] )
end

-- текущий враг на расстоянии больше или равном заданному расстоянию
-- для combat_ignore
function fighting_dist_ge(actor, npc, p)
	return db.storage[npc:id()].enemy:position():distance_to( npc:position() ) >= p[1]
end

-------------------------------------------------------------------------------------------------------
-- Функции поддержки kamp
function _kamp_talk(actor, npc)
	return xr_kamp.kamp_stalkers[npc:id()] or false
end

function _used(actor, npc)
	return npc:is_talking()
end

-------------------------------------------------------------------------------------------------------

function has_enemy(actor, npc)
	local enemy = npc:best_enemy()
	return enemy ~= nil and enemy:is_alive()
end

function see_enemy(actor, npc)
	local enemy = npc:best_enemy()

	if enemy ~= nil and enemy:is_alive() then
		return npc:see(enemy)
	end
	return false
end

-- DELME: для тестов: {=test_condition_actor_near}
function test_condition_actor_near(actor, npc)
	if distance_between(db_actor, npc) <= 3 then
		return true
	end
	return false
end

function talking(actor, npc)
	return db_actor:is_talking()
end

function talking_or_tutor(actor, npc)
	return db_actor:is_talking() or has_info("esc_trader_experienced") or has_info("esc_trader_newbie")
end

function see_actor(actor, npc)
	return npc:alive() and npc:see(db_actor)
end

-- видит ли вертолёт актера
function heli_see_actor(actor, obj)
	return obj:get_helicopter():isVisible(db_actor)
end

function actor_enemy(actor, npc)
	if npc:relation(db_actor) == game_object.enemy then
		return true
	end

	local t = db.storage[npc:id()].death
	return t and t.killer == db_actor_id
end

function gar_dm_nearest_bandit_n(npc, which)
	local sids = { 101, 102, 103 }
	local alive = #sids
	local dists = { }
	local obj, id

	for i = 1, #sids do
		obj = story_object(sids[i])
		id = obj and obj.id
		obj = id and level_object(id)
		if obj and obj:alive() then
			dists[#dists + 1] = {
				who	= id,
				dist	= distance_between(db_actor, obj)
			}
		else
			alive = alive - 1
			if alive <= which then return false end
		end
	end

	table.sort(dists, function(a1, a2)
		return a1.dist < a2.dist
	end)

	return dists[which].who == npc:id()
end

function gar_dm_nearest_bandit(actor, npc)
	return gar_dm_nearest_bandit_n(npc, 1)
end

function gar_dm_2nd_nearest_bandit(actor, npc)
	return gar_dm_nearest_bandit_n(npc, 2)
end

function trade_exchanged(actor, npc)
	return db.storage[npc:id()].trade.exchanged
end

function trading(actor, npc)
	return db.storage[npc:id()].trade.trading
end

function hit_by_actor(actor, npc)
	local t = db.storage[npc:id()].hit
	return t ~= nil and t.who == db_actor_id
end

function killed_by_actor(actor, npc)
	local t = db.storage[npc:id()].death
	return t ~= nil and t.killer == db_actor_id
end

function actor_has_weapon(actor, npc)
	local obj = db_actor:active_item()
	return obj and obj:is_weapon() or false
end

function heavy_wounded(actor, npc)
	return xr_wounded.is_heavy_wounded_by_id( npc:id() )
end

--[[
Проверка на заданный период времени
Время задается в минутах
Параметры: (time_shift:period_min)
           time_shift - периодичность срабатывания
           period - период срабатывания на котором мы получаем true

Примеры:
time_period(60:10) - возвращает true каждый час на протяжении первых 10 минут
--]]
function time_period(actor, npc, p)
    local tshift, period = p[1], p[2]
    if tshift ~= nil and period ~= nil then
        return tshift > period and level.get_time_minutes() % tshift <= period
    end
    return false
end

function is_day()
	local hr = level.get_time_hours()
	return hr >= 6 and hr < 21
end

-----------------------время музыки-------------
function is_fri_day()
	local hr = level.get_time_hours()
	return hr >= 11 and hr < 18
end
function is_fri_eve()
	local hr = level.get_time_hours()
	return hr >= 18 and hr < 24
end
function is_fri_nig()
	local hr = level.get_time_hours()
	return hr >= 0 and hr < 11
end
function is_dolg_mor()
	local hr = level.get_time_hours()
	return hr >= 5 and hr < 8
end
function is_dolg_day()
	local hr = level.get_time_hours()
	return hr >= 8 and hr < 16
end
function is_dolg_eve()
	local hr = level.get_time_hours()
	return hr >= 16 and hr < 22
end
function is_dolg_nig()
	local hr = level.get_time_hours()
	return (hr >= 0 and hr < 5) or hr == 22 or hr == 23
end
function is_agr_day()
	local hr = level.get_time_hours()
	return hr >= 7 and hr < 18
end
function is_agr_eve()
	local hr = level.get_time_hours()
	return hr >= 18 and hr < 22
end
function is_agr_nig()
	local hr = level.get_time_hours()
	return (hr >= 0 and hr < 7) or hr == 22 or hr == 23
end
------------------------------------------------------------

function is_arsenal_guard_rest_time ()
	return level.get_time_hours() == 4
end

function bar_no_sniper_time (actor, npc)
    return level.get_time_hours() >= 5
end

function mob_has_enemy(actor, npc)
    if npc == nil then return false end
    return npc:get_enemy() ~= nil
end

function mob_actor_nearest(actor, npc)
    return false
end

function mob_was_hit(actor, npc)
	local h = npc:get_monster_hit_info()
	if h.who and h.time ~= 0 then
		return true
	end
	return false
end

-- текущий враг актёр?
function fighting_actor(actor, npc)
    local enemy = db.storage[npc:id()].enemy
    return enemy and enemy:id() == db_actor_id
end

function dont_fighting_actor(actor, npc)
    local enemy = db.storage[npc:id()].enemy
    return enemy and enemy:id() ~= db_actor_id
end

-- текущий враг на расстоянии больше или равном 20м
function fighting_dist_ge_20(actor, npc)
	return db.storage[npc:id()].enemy:position():distance_to_sqr( npc:position() ) >= 400 -- 20^2
end

-- расстояние до текущего реального врага больше или равно заданного значения
function dist_to_enemy_ge(actor, npc, p)
    local d, enemy = p[1], npc:best_enemy()
	return d and enemy and enemy:position():distance_to_sqr(npc:position()) >= d * d
end

-- расстояние до текущего реального врага меньше или равно заданного значения
function dist_to_enemy_le(actor, npc, p)
    local d, enemy = p[1], npc:best_enemy()
	return d and enemy and enemy:position():distance_to_sqr(npc:position()) <= d * d
end

------------------------------------------------------------------------------------
-- Special functions for Garbage
------------------------------------------------------------------------------------
function gar_boars_nest2_dead(actor, npc)
	return gulag_population_le(db_actor, npc, {"gar_boars_nest2",0})
end

function gar_damaged_bandits(actor, npc)
	if (gulag_population_active(db_actor, npc, {"gar_bandit_agr"}) <= 5) then
		return true
	end
	return false
end

function gar_angar_sleep(actor,npc)
	return (gulag_empty(db_actor,npc,{"gar_seryi_bandits"}) and not has_info("agr_krot_band_start")) or
	       (gulag_population_le(db_actor,npc,{"gar_smart_bandit_large_lager",9}) and has_info("agr_krot_band_start"))
end

function gar_not_damaged_bandits(actor, npc)
	return not gar_damaged_bandits(db_actor, npc)
end

function gar_bandits_seryi_die()
	if db_actor then
		if gulag_population_active(db_actor, npc, {"gar_seryi_bandits"}) == 0 then
			return true
		else
			return false
		end
	else
		return false
	end
end

function gar_bandits_seryi_not_die()
	return not gar_bandits_seryi_die()
end

------------------------------------------------------------------------------------
-- Special functions for Dark Valley
------------------------------------------------------------------------------------
-- General combat ignore for bandits
function val_bandits_ci(actor, npc)
    local ig = {val_escort_captive_enemy = 400,
                val_sacrifice_finish = 401,
                val_prisoner_free = 402}

	local enemy = db.storage[npc:id()].enemy
	local sid
	if enemy and enemy:alive() then
	    sid = enemy:story_id()
	    for v, i in pairs(ig) do
		    if sid == i then
		        if has_alife_info(v) then
			        return false
			    end
			    return true
		    end
	    end
	end
	return false
end

-- Combat ignore for bandits with checking combat with actor checking
function val_bandits_ci_actor(actor, npc, p)
    local ig = {val_escort_captive_enemy = 400,
                val_sacrifice_finish = 401,
                val_prisoner_free = 402}

	local enemy = db.storage[npc:id()].enemy
	local sid
	if enemy and enemy:alive() then
	    if enemy:id() == db_actor_id then
            return npc:position():distance_to_sqr(db_actor:position()) >= p[1] * p[1]
	    end

	    sid = enemy:story_id()
	    for v, i in pairs(ig) do
		    if sid == i then
		        if has_alife_info(v) then
			        return false
			    end
			    return true
		    end
	    end
	end
	return false
end

-- параметры: [dist]
function val_escort_captive_dist_to_guards_ge(actor, npc, p)
    local d2 = p[1] * p[1]

    local g1 = level_object_by_sid(407)
    if g1 and g1:alive() then
        if npc:position():distance_to_sqr(g1:position()) < d2 then
            return false
        end
	end

    local g2 = level_object_by_sid(408)
    if g2 and g2:alive() then
        if npc:position():distance_to_sqr(g2:position()) < d2 then
            return false
        end
	end

	return true
end

function val_escort_captive_dist_to_guards_le(actor, npc, p)
    local d2 = p[1] * p[1]

    local g1 = level_object_by_sid(407)
    if g1 and g1:alive() then
        if npc:position():distance_to_sqr(g1:position()) > d2 then
            return false
        end
	end

    local g2 = level_object_by_sid(408)
    if g2 and g2:alive() then
        if npc:position():distance_to_sqr(g2:position()) > d2 then
            return false
        end
	end

	return true
end

function val_fighting_captive(actor, npc)
	return db.storage[npc:id()].enemy:story_id() == 400
end

function val_escort_combat_end(actor, npc)
	return false
end

function val_hit_by_nap1(actor, npc)
	local nap1 = level_object_by_sid(406)
	if nap1 == nil then return false end
	local t = db.storage[npc:id()].hit
	local hit_by_nap1 = (t ~= nil and t.who == nap1:id())
	return hit_by_nap1
end

function val_hit_by_guard(actor, npc)
	local g1 = level_object_by_sid(407)
	local g2 = level_object_by_sid(408)
	if g1 == nil and g2 == nil then return false end
	local t = db.storage[npc:id()].hit
	local hit_by_guard = (t ~= nil and
						  ((g1 ~= nil and t.who == g1:id()) or
						   (g2 ~= nil and t.who == g2:id())
						  ))
	return hit_by_guard
end

function val_fighting_sacrifice_victim(actor, npc)
	return db.storage[npc:id()].enemy:story_id() == 401
end

function val_fighting_prisoner(actor, npc)
	return db.storage[npc:id()].enemy:story_id() == 402
end

------------------------------------------------------------------------------------
-- Special functions for Pripyat
------------------------------------------------------------------------------------
function pri_followers_can_hear(actor, npc)
	local gulag = xr_gulag.get_gulag(823)

    return not has_alife_info("pri_followers_start") or
           gulag ~= nil and gulag:get_population() > 0 and
           not gulag:npc_is_enemy_to_anybody(db_actor)
end

function pri_monolith_combat_ignore(actor, npc)
	return false
end

function pri_actor_has_rpg_ammo(actor, npc)
	return db_actor:object("ammo_og-7b") ~= nil
end

function pri_follower_see_ambush (actor, npc)
	local gulag = xr_gulag.get_gulag_by_name("pri_wave7")

    if gulag == nil then
		return true
	end

	for k,v in pairs(gulag.Object) do
		if v ~= nil and npc:best_enemy() and npc:best_enemy():id() == v:id()
			then
				return true
		end
	end
	return false
end

------------------------------------------------------------------------------------
-- Special functions for Escape
------------------------------------------------------------------------------------
function esc_vagon_all_dead(actor, npc)
	local sids = { 12, 13 }
	local sobj

	for i = 1, #sids do
		sobj = story_object(sids[i])
		if sobj and sobj:alive() then
			return false
		end
	end

	return true
end

function esc_blokpost_night(actor,npc)
	return xr_gulag.getGulagState("esc_blokpost") == 1
end

function esc_bandits_die(actor,npc)
	if has_alife_info("esc_kill_bandits_quest_kill") or has_alife_info("esc_kill_bandits_noquest_kill") then
		return true
	end
	return false
end

------------------------------------------------------------------------------------
-- Special functions for BAR - ROSTOK
------------------------------------------------------------------------------------
function bar_arena_actor_inside(actor,npc)
	local t = db.zone_by_name["bar_arena_waiter"]
	if t and db_actor then
		if t:inside(db_actor:position()) then
			return true
		end
	end
	return false
end
function bar_arena_actor_fight(actor,npc)
	local t = db.zone_by_name["bar_arena_sr"]
	local tt = db.zone_by_name["bar_arena_waiter"]
	if t and tt and db_actor then
		if t:inside(db_actor:position()) and
		   not tt:inside(db_actor:position())
		then
			return true
		end
	end
	return false
end
function bar_arena_actor_outside(actor,npc)
	local t = db.zone_by_name["bar_arena_waiter_out"]
	if t and db_actor then
		if t:inside(db_actor:position()) then
			return true
		end
	end
	return false
end
function bar_dolg_alarm(actor,npc)
	if xr_gulag.getGulagState("bar_dolg_general") == 2 then
		return true
	end
	if xr_gulag.getGulagState("bar_dolg_veterans") == 2 then
		return true
	end
	return false
end

function bar_hostile_npc(actor,npc)
	-- на бармена забьём, всё равно его не убить.
	local c = npc:character_community()
	if c == "stalker" or c == "dolg" or c == "ecolog" then
		return false
	end
	return true
end

function is_courier_time (actor, npc)
    return level.get_time_hours() >= 22 and level.get_time_hours() < 23
end

function is_controller_dead (actor, npc)
    local c = level_object_by_sid (729)
    if c == nil then return false end
    return not c:alive ()
end

function bar_arena_fight_3_end ()
	return has_alife_info("bar_arena_fight_3_stalker_1_die") and has_alife_info("bar_arena_fight_3_stalker_2_die")
end

function bar_arena_fight_4_end ()
	return has_alife_info("bar_arena_fight_4_stalker_1_die") and has_alife_info("bar_arena_fight_4_stalker_2_die") and has_alife_info("bar_arena_fight_4_stalker_3_die")
end

function bar_arena_fight_5_end ()
	return has_alife_info("bar_arena_fight_5_stalker_1_die") and has_alife_info("bar_arena_fight_5_stalker_2_die")
end

function bar_arena_fight_6_end ()
	return has_alife_info("bar_arena_fight_6_stalker_1_die") and has_alife_info("bar_arena_fight_6_stalker_2_die") and has_alife_info("bar_arena_fight_6_stalker_3_die") and has_alife_info("bar_arena_fight_6_stalker_4_die") and has_alife_info("bar_arena_fight_6_stalker_5_die") and has_alife_info("bar_arena_fight_6_stalker_6_die")
end

function bar_arena_fight_8_end ()
	return has_alife_info("bar_arena_fight_8_stalker_1_die") and has_alife_info("bar_arena_fight_8_stalker_2_die") and has_alife_info("bar_arena_fight_8_stalker_3_die") and has_alife_info("bar_arena_fight_8_stalker_4_die")
end
------------------------------------------------------------------------------------
-- Special functions for Military
------------------------------------------------------------------------------------
function mil_actor_enemy (actor, npc)
    local npc = level_object_by_sid (707)
    if npc == nil or npc:alive () == false then
       npc = level_object_by_sid (702)
       if npc == nil or npc:alive () == false then
          npc = level_object_by_sid (728)
          if npc == nil then
             return
          end
        end
    end
    return npc:relation (db_actor) == game_object.enemy
end

function mil_actor_enemy_freedom (actor, npc)
    if relation_registry.community_goodwill ("freedom", db_actor_id) < -500 then
       return true
    end
    return false
end

-------------------------------------------------------------------------------------
-- Special for Agroprom
-------------------------------------------------------------------------------------

function agr_boars_nest_dead(actor, npc)		-- название функции
		local g = xr_gulag.fraction["agr_boar_nest"]  -- имя гулага
		return (not g) or (g:get_population() == 0)
end

function is_wfx_playing (actor, npc)
    return level.is_wfx_playing ()
end

function agr_nii_pop_check(actor, npc)
	return gulag_population_active(db_actor, npc, {"agr_nii"}) < 6
end

-------------------------------------------------------------------------------------
-- Special for rostok
-------------------------------------------------------------------------------------
function rostok_gulag_inactive(actor, npc)
    local gulag = xr_gulag.get_gulag_by_name("bar_freedom_attack")

    if gulag == nil then
		return true
	end

	local val = 0

	for k,v in pairs(gulag.Object) do
		local job_prior = gulag.Job[gulag.ObjectJob[k]].prior

		if (v == true or
		   (v:alive() and
		    not xr_wounded.is_heavy_wounded_by_id(k) and
		    not xr_wounded.is_psy_wounded_by_id(k) and
			job_prior == 5)) and gulag.Object_begin_job[k] == true
		then
			val = val + 1
		end
	end
	if val == 0 then
		return true
	end
	return false
end

function agr_factory_hold_inactive (actor, npc)
	 local gulag = xr_gulag.get_gulag_by_name("agr_factory_hold")

    if gulag == nil then
		return true
	end

	local val = 0

	for k,v in pairs(gulag.Object) do
		if (v == true or ( v:alive() and
		   not(xr_wounded.is_heavy_wounded_by_id(k) or
		       xr_wounded.is_psy_wounded_by_id(k)))) and
			gulag.Object_begin_job[k] == true
		then
			val = val + 1
		end
	end
	if val == 0 then
		return true
	end
	return false
end

function rostok_gulag_2_inactive(actor, npc)
	 local gulag = xr_gulag.get_gulag_by_name("bar_freedom_chasers_attack")

    if gulag == nil then
		return true
	end

	local val = 0

	for k,v in pairs(gulag.Object) do
		if (v == true or ( v:alive() and
		   not(xr_wounded.is_heavy_wounded_by_id(k) or
		       xr_wounded.is_psy_wounded_by_id(k)))) and
			gulag.Object_begin_job[k] == true
		then
			val = val + 1
		end
	end
	if val == 0 then
		return true
	end
	return false
end

function rostok_dist_to_actor_le(actor, npc, p)
    if db_actor then
	    return npc:position():distance_to_sqr(db_actor:position()) < p[1]*p[1]
	end
	return false
end
function see_actor_and_kruglov(actor, npc)
	local kruglov = level_object_by_sid (503)
    return npc:see(db_actor) or npc:see(kruglov)
end
function has_ghost_pda ()
		return db_actor:object ("yantar_ghost_pda") ~= nil
end

-------------------------------------------------------------------------------------
-- Special for Radar
-------------------------------------------------------------------------------------

function check_time_interval(fh, fm, th, tm)
	local from = game.CTime():set_table({ hour = fh, ["min"] = fm })
	local to = game.CTime():set_table({ hour = th, ["min"] = tm })
	local cur = game.CTime():set_table({
		hour	= level.get_time_hours(),
		["min"]	= level.get_time_minutes()
	})

	return cur >= from and cur < to
end

local rad_antenna_state = true

function rad_pass_time(actor, npc)
	-- Ray Twitty aka Shadows: время спадов излучения с 08:30 до 09:45 утром и с 20:12 до 21:00 вечером
	-- при включении излучения играем дополнительные эффекты
	local pass_time = check_time_interval(8, 30, 9, 45) or check_time_interval(20, 12, 21, 0)
	if not (pass_time or rad_antenna_state) then
		play_safe_sound_object([[ambient\blowout]])
		level.add_pp_effector("radar_pass.ppe", effector_ids.radar_pass, false)
		level.add_cam_effector("camera_effects\\shell_shock.anm", effector_ids.shell_shock, false, "")
	end
	rad_antenna_state = not pass_time
	return pass_time
end

-------------------------------------------------------------------------------------
-- Special for Sarcofag
-------------------------------------------------------------------------------------
function actor_has_decoder(actor, npc)
	return db_actor:object("decoder") ~= nil
end

function actor_in_dolg(actor, npc)
	if db_actor then
		return db_actor:character_community() == "actor_dolg"
	end
	return false
end
function actor_in_freedom(actor, npc)
	if db_actor then
		return db_actor:character_community() == "actor_freedom"
	end
	return false
end

function actor_on_level(actor, npc, p)
	return p[1] == level.name()
end

function treasure_exist(actor, npc, p)
	return true
end

function can_send_tutorial(actor, npc, p)
	if db_actor:is_talking() then
		return false
	end
	if game.has_active_tutorial() then
		return false
	end
	if db_actor:has_info("ui_inventory") then
		return false
	end
	if db_actor:has_info("ui_pda") then
		return false
	end
	return true
end

---------------------------------------------------------------ARENA_EXTENSION_MOD------------------------------------------------------------------
-- Эти две функции не должны дублироваться в данном файле
-- оригинальные следует удалить

function bar_actor_rank_stalker (actor,npc)
	if db_actor:character_rank() > 300 or
		db_actor:has_info("bar_arena_fight_8_done") then
		return true
	end
end

function bar_actor_rank_veteran (actor,npc)
	if db_actor:character_rank() > 600 or
		db_actor:has_info("bar_arena_fight_8_done") then
		return true
	end
end

---------------------------------------------------------------ARENA_EXTENSION_MOD------------------------------------------------------------------
function aem_group(actor, npc, p)
	return aem:is_group_name(p[1])
end

function aem_intro(actor, npc, p)
	return aem:is_intro_name(p[1])
end

function aem_extro(actor, npc, p)
	return aem:is_extro_name(p[1])
end

function aem_check_blow()
	local blowout=amk.load_variable("blowout",0)
	if blowout >0 then
		return true
	end
	return false
end

function aem_evil()
	return aem:is_stalkers_evil()
end

function aem_kind()
	return not aem:is_stalkers_evil()
end

function aem_on_place(actor, npc)
	-- позиция нпс - bar_arena_man_look
	local pos = npc:position()
	if (pos.x>148.8 and pos.x<157.7) and (pos.z>68.3 and pos.z<69.9) then
		return true
	end
	return false
end

---------------------------------------------------------------ARENA_EXTENSION_MOD------------------------------------------------------------------
