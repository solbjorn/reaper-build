--[[-----------------------------------------------------------------------------------------------
 File         : sa_monsters.script
 Description  : Новые возможности монстров
 Copyright    : Shadows Addon
 Author       : Ray Twitty aka Shadows
 Date         : 14.01.2013
 Last edit    : 15.11.2018
---------------------------------------------------------------------------------------------------
 * CONSTANTS
--]]-----------------------------------------------------------------------------------------------
local BLOODSUCKER_VAMPIRE_DIST = 1.5
local PDOG_PSY_EFFECT_DIST = 12
local PDOG_PSY_EFFECT_TURN_ANGLE = 1
local BURER_TELE_ATTACK_DIST = 25
--[[-----------------------------------------------------------------------------------------------
 * Bloodsucker vampire sucking
--]]-----------------------------------------------------------------------------------------------
local bloodsucker_vampire_states = {
	prepare = 0,
	continue = 1,
	fire = 2,
	run_away = 3,
	completed = 4
}
---------------------------------------------------------------------------------------------------
local bloodsucker_vampire_unique = {
	["bun_bloodsucker_prim"] = true
}
---------------------------------------------------------------------------------------------------
function bloodsucker_vampire(self)
	if not actor_flags.alive or actor_flags.sleep_state then
		return
	end
	local obj = self.object
	local enemy = obj:get_enemy()
	if not (enemy and obj:see(enemy) and enemy:id() == 0) then
		return
	end
	if actor_flags.bloodsucker_vampire_state then
		return
	end
	actor_flags.bloodsucker_vampire_state = true
	if bloodsucker_vampire_check_conditions(self) then
		local state = bloodsucker_vampire_states.prepare
		local fire_time = 0
		local last_camera_type = get_actor_data("camera_type")
		-- run vampire
		Actor:set_fastcall(
			function()
				if state == bloodsucker_vampire_states.prepare then
					-- actor effects
					xr_effects.disable_ui()
					level.add_complex_effector("effector_bloodsucker_vampire_grasp", effector_ids.vampire_grasp)
					set_actor_data("camera_type", EActorCameras.eacFirstEye)
					camera_rotate_on_position(obj:position(), 15)
					-- bloodsucker effects
					xr_logic.mob_capture(obj, true)
					action(obj, look(look.point, Actor:position()), cond(cond.time_end, 300))
					-- switch state
					state = bloodsucker_vampire_states.continue
				elseif state == bloodsucker_vampire_states.continue then
					if not obj:action() then
						-- actor effects
						level.add_complex_effector("effector_bloodsucker_vampire_sucking", effector_ids.vampire_sucking)
						level.add_complex_effector("effector_bloodsucker_vampire_fade", effector_ids.vampire_fade)
						-- bloodsucker effects
						action(obj, anim("vampire_0"), sound("monsters\\bloodsucker\\vampire_grasp", "bip01_head"), cond(cond.time_end, 800))
						action(obj, anim("vampire_1"), sound("monsters\\bloodsucker\\vampire_sucking", "bip01_head", xyz(), xyz(), true), cond(cond.time_end, 5200))
						action(obj, anim("vampire_2", true), sound("monsters\\bloodsucker\\vampire_hit", "bip01_head"), cond(cond.time_end, 1500))
						fire_time = time_real_ms + 7300
						-- switch state
						state = bloodsucker_vampire_states.fire
					end
				elseif state == bloodsucker_vampire_states.fire then
					if time_real_ms >= fire_time then
						-- actor effects
						xr_effects.enable_ui()
						level.add_complex_effector("effector_head_shot", effector_ids.head_shot)
						set_actor_data("camera_type", last_camera_type)
						make_hit(Actor, config:r_float_cache(obj:section(), "Vampire_Wound"), 5000, hit.wound, obj:direction(), obj)
						-- bloodsucker effects
						obj.health = config:r_float_cache(obj:section(), "Vampire_Gain_Health")
						-- switch state
						state = bloodsucker_vampire_states.run_away
					end
				elseif state == bloodsucker_vampire_states.run_away then
					if not obj:action() then
						-- bloodsucker effects
						action(obj, move(move.run_fwd, random_position(obj:position(), 30)), sound("monsters\\bloodsucker\\invisible", "bip01_head"), cond(cond.time_end, 8000))
						play_object_bones_particle(obj, config:r_string_cache(obj:section(), "Particle_Invisible"))
						obj:set_bone_visible("bip01_pelvis", 0)
						-- switch state
						state = bloodsucker_vampire_states.completed
					end
				elseif state == bloodsucker_vampire_states.completed then
					if not obj:action() and distance_between(obj, Actor) > 5 then
						-- bloodsucker effects
						xr_logic.mob_release(obj)
						self.timer = time_real_ms + config:r_u32_cache(obj:section(), "Vampire_Delay")
						actor_flags.bloodsucker_vampire_state = false
						return true
					end
				end
				return false
			end
		)
	else
		actor_flags.bloodsucker_vampire_state = false
	end
end
---------------------------------------------------------------------------------------------------
function bloodsucker_vampire_check_conditions(self)
	-- check last attack timer
	if self.timer >= time_real_ms then
		return false
	end
	-- check distance
	local obj = self.object
	if distance_between(obj, Actor) > BLOODSUCKER_VAMPIRE_DIST then
		return false
	end
	-- check height difference
	if math.abs(Actor:position().y - obj:position().y) > 0.5 then
		return false
	end
	-- check bloodsucker health
	if obj.health > self.max_health then
		return false
	end
	-- check bloodsucker movement
	if get_monster_data(obj, "speed") ~= 0 then
		return false
	end
	-- check actor state
	if not (Actor:is_actor_normal() or Actor:is_actor_walking() or Actor:is_actor_running()) then
		return false
	end
	-- check actor in car
	if Actor:get_current_holder() then
		return false
	end
	return true
end
---------------------------------------------------------------------------------------------------
function bloodsucker_vampire_init(self)
	if bloodsucker_vampire_unique[self.object:name()] then
		return
	end
	self.max_health = config:r_float_cache(self.object:section(), "Vampire_Max_Health")
end
--[[-----------------------------------------------------------------------------------------------
 * Pseudodog psy effect
--]]-----------------------------------------------------------------------------------------------
function pseudodog_psy_effect(self)
	if not actor_flags.alive or actor_flags.sleep_state or actor_flags.bloodsucker_vampire_state then
		return
	end
	local obj = self.object
	local enemy = obj:get_enemy()
	if enemy and obj:see(enemy) and enemy:id() == 0 and distance_between(obj, Actor) <= PDOG_PSY_EFFECT_DIST then
		local target_obj = level.get_target_obj()
		if target_obj and target_obj:id() == obj:id() and self.timer < time_real_ms then
			-- sound effect
			say("monsters\\pseudodog\\psy_affect_0")
			-- camera move
			if get_actor_data("camera_type") == EActorCameras.eacFirstEye then
				local h = -screen.cam_dir:getH()
				local p = -screen.cam_dir:getP()
				h = math.random() > 0.5 and h + PDOG_PSY_EFFECT_TURN_ANGLE or h - PDOG_PSY_EFFECT_TURN_ANGLE
				p = math.random() > 0.5 and p + PDOG_PSY_EFFECT_TURN_ANGLE or p - PDOG_PSY_EFFECT_TURN_ANGLE
				Actor:set_camera_direction(xyz(h, math.clamp(p, -1.5, 1.5), 0))
			end
			-- camera effector
			level.add_cam_effector3(1.0, -30.0, 4.0, 2.0)
			level.add_pp_effector("attack_effects\\monsters\\special\\pseudodog_psy.ppe", effector_ids.psy_effect, false)
			-- make hit
			Actor.psy_health = -0.08
			-- set next attack
			self.timer = time_real_ms + math.random(8, 12) * 1000
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Burer telepation attack
--]]-----------------------------------------------------------------------------------------------
function burer_tele_attack(self)
	if not actor_flags.alive or actor_flags.sleep_state or actor_flags.bloodsucker_vampire_state then
		return
	end
	local obj = self.object
	local enemy = obj:get_enemy()
	if enemy and obj:see(enemy) and enemy:id() == 0 and distance_between(obj, Actor) <= BURER_TELE_ATTACK_DIST then
		local target_obj = level.get_target_obj()
		if target_obj and target_obj:id() == obj:id() and self.timer < time_real_ms then
			if math.random() < 0.4 then
				reap.drop_weapon()
			end
			say("monsters\\poltergeist\\tele_get_0")
			Actor.power = -1
			self.timer = time_real_ms + math.random(10, 18) * 1000
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Poltergeist idle particles
--]]-----------------------------------------------------------------------------------------------
function poltergeist_particles(self)
	local obj = self.object
	for k, v in pairs(self.particles_obj_by_bone) do
		if v then
			if obj:alive() and get_monster_data(obj, "invisible") then
				if v:playing() then
					v:move_to(obj:bone_position(k), xyz())
				else
					v:play_at_pos(obj:bone_position(k))
				end
			else
				if v:playing() then
					v:stop()
				end
			end
		end
	end
end
---------------------------------------------------------------------------------------------------
function poltergeist_particles_init(self)
	local obj = self.object
	local ini = obj:get_visual_ini()
	if ini and ini:section_exist("particle_bones") and config:r_string(obj:section(), "type") == "telekinetic" then
		local hidden_particles = config:r_string_ex(obj:section(), "Hidden_Particles")
		if not hidden_particles then return end
		self.particles_obj_by_bone = {}
		local bones = ini:key_value("particle_bones")
		for k, v in pairs(bones) do
			self.particles_obj_by_bone[k] = particles_object(hidden_particles)
			self.particles_obj_by_bone[k]:play_at_pos(obj:bone_position(k))
		end
	end
end
