-----------------------------------------------------------------------------------
-- Monster binding

-- TAG фенечка 1.1
-----------------------------------------------------------------------------------
local particles={}

function bind(obj)
	printf("_bp: monster.bind: name='%s', id='%d'", obj:name(), obj:id())
	local new_binder = generic_object_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "generic_object_binder" (object_binder)

function generic_object_binder:__init(obj) super(obj)
	self.loaded = false
	self.chtime = 0
	self.last_update = 0
	self.particles = {}
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:reinit()
	object_binder.reinit(self)

	-- У торговца нет поддержки перемещения
	if self.object:clsid() ~= clsid.script_trader then
		self.object:set_patrol_extrapolate_callback(generic_object_binder.extrapolate_callback, self)
	end

	db.storage[self.object:id()] = { }
	self.st = db.storage[self.object:id()]
	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self)
	self.object:set_callback(callback.hit,					self.hit_callback,		self)
	self.object:set_callback(callback.death,				self.death_callback,	self)
end

prevent_gulag_registration_for_id=0

function generic_object_binder:update(delta)
	object_binder.update(self, delta)

		if particles[self.object:id()] and table.getn(particles[self.object:id()])>0 then
			for kk,vv in pairs(particles[self.object:id()]) do
				table.insert(self.particles,amk_particle.amk_particle(vv))
				table.remove(particles[self.object:id()],kk)
			end
		end
		
		if table.getn(self.particles)>0 then
			for kk,vv in pairs(self.particles) do
				if vv:is_finished() then
					self.particles[kk]=nil
				else
					vv:update(delta)
					if vv.give_dmg and vv.target then
						if vv:get_pos():distance_to(vv.target:bone_position("bip01_spine"))<1 then
							local h = hit()
							h.impulse = 0
							h.draftsman = vv.target
							h.direction = vv.dir
							h:bone("bip01_spine") 
							h.power = math.random(10,50)/100
							h.type = hit.strike 
							vv.target:hit(h)
							h.power = math.random(10,50)/100
							h.type = hit.chemical_burn
							vv.target:hit(h)
							vv:stop()
						end
					end
				end
			end
		end

	-- Апдейт торговли
	if self.object:clsid() == clsid.script_trader then
		trade_manager.update(self.object)
	end

	if self.object:alive() then
		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			self.object:set_tip_text("")
		end
	else
		self.object:set_tip_text_default()
	end

    self:anomaly_evade()
	
	local act_scheme = db.storage[self.object:id()].active_section or ""
	local is_fake = string.find(act_scheme, "mob_fake_death") or false
	--[[
	if self.object:section()=="zombie_beee" and time_global()>(self.charge_time or 0)+5000 and 3>(self.charges_done or 0) and not is_fake and self.object.health>0.1 then
		local target = self.object:get_enemy() or db.actor
		local dist = target:position():distance_to(self.object:position())
		if dist < 10 and self.object:see(target) then
			local dir=self.object:direction()
			local delta=vector():set(self.object:position()):sub(target:position())
			local scalarmul=(delta.x*dir.x+delta.z*dir.z)/math.sqrt(delta.x*delta.x+delta.z*delta.z) 
			if scalarmul < -0.8 then
				bind_monster.play_particle(self.object,
				{
					obj=self.object,
					particle="amk\\zomb_beee",
					pos=self.object:bone_position("bip01_head"),
					dir=amk.sub(target:bone_position("bip01_head"),self.object:bone_position("bip01_head")),
					gravity=vector():set(0,-0.01,0),
					len=10,
					life_time=2000,
					give_dmg=true,
					target=target,
					sound="monsters\\zombie\\zombie_take_damage_3"
				})
				self.charge_time=time_global()
				self.charges_done=(self.charges_done or 0) + 1
			end
		end
	end
	]]
	
	if self.chtime<time_global() then
	
		self.chtime=time_global()+2000
		if self.object:clsid()==clsid.controller_s and self.object:alive() then
			amk.mylog("zombifying")
			local npc=self.object:get_enemy()
			if npc then
				if npc:id()~=db.actor:id() and npc:clsid()==clsid.script_stalker and self.object:see(npc) and 
				   npc:character_community()~="zombied" and self.object:position():distance_to(npc:position())<30 then
        
					local sobj=alife():object( npc:id() )
					if sobj and sobj.online then
						local zomb=amk.load_table("zombies")
						zomb[sobj.id]={master=self.object:id(),comm=npc:character_community(),gw=npc:goodwill(db.actor)}
						amk.save_table("zombies",zomb)															
						npc:set_character_community("zombied",0,0)
						local orgtbl=amk.read_stalker_params(sobj)
						if (not string.find(orgtbl.profile,"_zombi")) then
							orgtbl.profile=orgtbl.profile.."_zombi"
						end
						amk.mylog("zombied "..npc:name().." profile "..orgtbl.profile)
						amk.write_stalker_params(orgtbl,sobj)
					end
				end
			end
		end

-- TAG Кровосос при атаке при приближении менее чем на 7м с 20% вероятностью выбивает оружие (кроме ножа) из рук ГГ.
            if (self.object:clsid()==clsid.dog_s or self.object:clsid()==clsid.bloodsucker_s) and self.object:alive() and self.object.health>0.05 then
		    local npc=self.object:get_enemy()
		    if npc then
			if npc:id()==db.actor:id() and db.actor:see(self.object) and self.object:see(db.actor) and math.random()<0.2 then
			    local tag_w_down = true
		  	    local tag_dist = 1
                if self.object:clsid()==clsid.dog_s then -- DOG attack
			       level.add_pp_effector("radiation.ppe", 2012, false)					
			       local h = hit()
			       h.type = hit.telepatic
 			       h.power = 0.02
			       h.impulse = 0.0
			       h:bone("bip01_spine") -- чтобы учитывалась броня
			       h.draftsman = self.object
			       h.direction = self.object:direction()
			       db.actor:hit(h)
			       tag_w_down = math.random()<0.02 
			    else -- Bloodsucker attack
			       tag_dist = db.actor:position():distance_to(self.object:bone_position("bip01_head"))   
			    end   

			    if tag_w_down and tag_dist<7 then
			       local active_item = db.actor:active_item()
			         if active_item and active_item:section()~= "bolt" and active_item:section()~= "wpn_knife" then
			         db.actor:drop_item(active_item)
			       end
			    end
		        end
		  end
	     end	
	end
-- TAG : end	
	
    if IsMonster(self.object) and time_global() - self.last_update > 1000 and not is_fake then
		if self.object:alive() and self.object.health>0.03 then
			if self.object:see(db.actor) and db.actor:position():distance_to(self.object:position())<40 then
				amk.enemy_see_actor(self.object,"monster") 
			end
			if db.actor:see(self.object) and db.actor:position():distance_to(self.object:position())<80 then 
				amk.actor_see_enemy(self.object,"monster") 
			end
		end
		self.last_update = time_global()
	end
  
	local blowout=amk.load_variable("blowout",0)
	if blowout==3 and (not self.control_override) and not string.find(self.object:out_restrictions(), "bar_arena_restrictor") then
		if not self.object:action() then
			-- Захватываем зверушку
			xr_logic.mob_capture(self.object,true)
			self.control_override=true
		end
	elseif self.control_override and blowout==3 then
		if not self.object:action() then
			local snds={sound.take_damage,sound.panic,sound.idle}
			local snd=snds[math.random(1,table.getn(snds))]
			action(self.object, anim(anim.lie_idle, 0), sound(snd), cond(cond.sound_end))
		end
	elseif self.control_override and blowout~=3 then
		-- отпускаем зверушку
		self.control_override=nil
		xr_logic.mob_release(self.object)
	elseif self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
	
	
	--AMK UTILS--
	amk_utils.monster_update(delta)
	--AMK UTILS--
	
	sa_callbacks.monster_update(self.object)
end

function generic_object_binder:anomaly_evade()
	local npc=self.object
	if npc:story_id()==29 then return end 
	if not self.prev_pos then
		self.prev_pos=vector():set(0,-100,0)
	end
	if self.prev_pos:distance_to(npc:position())>20 then
		self.prev_pos=npc:position()
		local list=amk_anoms.get_anomaly_list(npc,30)
		for i,o in ipairs(list) do
			amk_anoms.add_restriction(npc,o.id,o.name)
		end
	end
	if amk_anoms.have_pending_sync(npc) then
		amk_anoms.syncronize(npc)
	end
end

function generic_object_binder:extrapolate_callback()
	if (self.object == nil) then
		return false
	end

	local cur_pt = self.object:get_current_point_index()

    if self.object:get_script ()	== false then 
       return false
    end    
    
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		return true
	end
	return false
end

function generic_object_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index)
	end
end

function generic_object_binder:death_callback(victim, who)
	if (self.object == nil) then
		return
	end
	if who:id() == db.actor:id() then
		xr_statistic.addKillCount(self.object)
		xr_statistic_freeplay.get_freeplay_statistic():check_monster_killed_count(self.object)
		if arc_main then
			arc_main.on_monster_kill(victim,who)
		end
	end
	if self.st.mob_death then
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", victim, who)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	smart_terrain.on_death( self.object:id() )
	
	local h = hit()
	h.draftsman = self.object
	h.type = hit.fire_wound
	h.direction = db.actor:position():sub(self.object:position())
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	self.object:hit(h)

	local mob=self.object
	if mob:clsid()==clsid.controller_s then
		local zomb=amk.load_table("zombies")
		for k,v in pairs(zomb) do
			if v.master==mob:id() then
				if amk_mod.dezombify(k,v) then
				zomb[k]=nil
				end
			end
		end
    amk.save_table("zombies",zomb)
	end  
	
	if table.getn(self.particles)>0 then
		for kk,vv in pairs(self.particles) do
				vv:on_death()
		end
	end
	
	
	--AMK UTILS--
	amk.on_death(victim, who)
	amk_utils.monster_death(victim, who)
	--AMK UTILS--
	smart_monster_parts.death_spawn(victim)
end

function generic_object_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if bone_index==14 and string.find(obj:section(),"bloodsucker") then
    local h=hit()
		h.type = hit.fire_wound
		h.power = 100*local_direction.x*local_direction.x*local_direction.x*local_direction.x
		h.impulse = h.power
		h.draftsman = who
		h.direction = vector():set(0,-1,0)
		obj:hit(h)    
	end
	amk.on_monster_hit(obj, amount, local_direction, who, bone_index)

-- TAG коррекция э-химеры
	if obj:section()=="electro_chimera" and time_global()>(self.charge_time or 0) then

	amk_particle.amk_particle({particle="anomaly2\\electra2_blast",pos=obj:bone_position("bip01_spine"),sound="anomaly\\electra_blast1"})

	local dist = db.actor:position():distance_to(obj:bone_position("bip01_spine"))
        local tag_weather = amk.load_variable("dynweather","?")                        
 
 	-- эл.химера поражает ГГ ударом и э.шоком ближе 20м
	if dist > 0.2 and dist < 20 then
            local tag_ch_pos = obj:bone_position("bip01_spine")  -- spine1 or head ??
            local tag_ac_pos = db.actor:position()
	    local tag_m       --TAG,Mon correct shock power (AMK=15)

            local h = hit()		
			
 	    h.impulse = 0
            h.direction = vector():set(0,0,0)
	    h.draftsman = db.actor
 	    h:bone("bip01_spine") -- чтобы учитывалась броня
	    h.power = 1/dist
	    h.type = hit.strike 
	    db.actor:hit(h)
                        
--            amk.send_tip (tag_weather,nil,nil,5) 
            if (string.find(tag_weather,"rain") or string.find(tag_weather,"groza")) then
  	       h.direction = vector():set(0,-1,0)
               h.impulse = 500*h.power
				tag_m = math.random(15, 25)
            else
				tag_m = math.random(7, 20)
              if tag_ac_pos.y > ( tag_ch_pos.y + 2 ) then 
 	         dist = dist * dist             -- если ГГ выше химеры - квадратичная зависимость
              else 
  	         if dist > 3 then               -- иначе - обратнопропорц.
  		    tag_m = tag_m - 4
		 elseif dist > 1.4 then
  		    tag_m = tag_m - 2
		 end
              end -- по воздуху\земле
            end -- нет дождя    
	    h.power = tag_m/dist                        
   	    h.type = hit.shock
	    db.actor:hit(h)
	end -- dist<20m

-- TAG Химера "поражает" НПС на виду у ГГ
 if dist<140 then
    local n = 0
    local t1,t2
    local hit_sound, hit_txt, h_t1, h_t2, h_t3 
    for i, k in pairs(db.storage) do -- ищем НПС в онлайновых обьектах (tnx Kolmogor)
        local hitobj=level.object_by_id(i)
        if hitobj and _g.IsStalker(hitobj) and hitobj:id() ~= db.actor:id() then
           dist = hitobj:position():distance_to(self.object:bone_position("bip01_spine"))
           if dist<20 then
--              hit_sound = string.format("characters_voice\\human_01\\military\\fight\\hit\\hit_%d",math.random(1,5))                                         
--              amk_particle.amk_particle({particle="damage_fx\\body_sparks00",pos=hitobj:bone_position("bip01_spine"),sound=hit_sound})
                local rnd=math.random(1,6) -- hit-вопли  hit_1,2,3,6,7,8
                if  rnd>3 then rnd=rnd+2 end
                local snd_obj =xr_sound.get_safe_sound_object("characters_voice\\human_01\\stalker\\fight\\hit\\hit_"..tostring(rnd)) 
--              snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set( 5, 5, 5 ), 1.0)
                snd_obj:play_at_pos(db.actor,hitobj:bone_position("bip01_spine"), 0, sound_object.s3d ) 
           else --dist
                if math.random()<0.3 then
                   if math.random()>0.5 then                     
                      hit_sound="Внимание! Электрохимера! Близко не приближаться! На помощь! Поддержи огнем! zz" --75 знаков
                   else
                      hit_sound="Внимание!Напоролись на электрохимеру,несем потери,требуется помощь!Координаты "
                   end  
                   t1 = math.random(1,20)
                   h_t1 = string.sub(hit_sound,t1, t1+math.random(4,25-t1)).."."
                   t1 = math.random(1,70)
                   t2 = math.random(26,42)
                   h_t2 = "."..string.sub(hit_sound,t1,t1+3)..".."..string.sub(hit_sound,t2, t2+math.random(7,50-t2)).."."
                   t1 = math.random(1,70)
                   t2 = math.random(51,66)
                   h_t3 = "."..string.sub(hit_sound,t2, t2+math.random(7,75-t2))..".."..string.sub(hit_sound,t1,t1+4).."."
                   if math.random()<0.5 then
                      hit_txt = h_t1..h_t3..h_t2
                   else
                      hit_txt = h_t1..h_t2..h_t3
                   end 
                   amk.send_tip (hit_txt.."...(обрыв связи)",news_main.get_npc_name(hitobj),nil,7)
                end --random для сообщений send_tip
           end --dist                
           n = n+1
           if n>4 then break end  --break ищем НПС                 
        end --HitObj
    end --for
 end --поражаем НПС
----
	if string.find(tag_weather,"groza") then
	       self.charge_time=time_global() + 2000
        else  
 	       self.charge_time=time_global() + (100 * math.random(30,40))
        end -- next blast  
    end -- "electro_chimera"
--TAG : end
	
	--AMK UTILS--
	amk_utils.monster_hit(obj, amount, local_direction, who, bone_index)
	--AMK UTILS--
	smart_monster_parts.main_check(obj, amount, local_direction, who, bone_index)
end

function generic_object_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	db.add_obj(self.object)
	xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_mobile, self.loaded )
	amk.on_net_spawn(self.object)

	local particle_param = utils.cfg_get_string(system_ini(), self.object:section(), "bones_particles", null, false, false, nil)
	if particle_param and system_ini():section_exist(particle_param) then
		local tmp=amk.parse_ini_section_to_array(system_ini(),particle_param)
		for k,v in pairs(tmp) do
			local t = amk.parse_ini_section_to_array(system_ini(), v)
			t.obj = self.object
			if not t.stop_on_death or self.object:alive() then
				play_particle(self.object, t)
			end
		end
	end
	return true
end

function generic_object_binder:net_destroy()
	if table.getn(self.particles)>0 then
		for kk,vv in pairs(self.particles) do
			if not vv:is_finished() then
				vv:stop()
				self.particles[kk]=nil
			end
		end
	end
	amk.on_monster_go_offline(self.object)
	self.object:set_callback(callback.death,				nil)
	self.object:set_callback(callback.patrol_path_in_point, nil)
	self.object:set_callback(callback.hit,					nil)
	
	local st = db.storage[self.object:id()]
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end
	
	db.del_obj(self.object)
	db.storage[self.object:id()] = nil

	-- АМК. Очистка рестрикторов
	local id=self.object:id()
	object_binder.net_destroy(self)
	local sobj=alife():object(id)
	if sobj and IsMonster(sobj) then
		local tbl=amk.read_monster_params(sobj)
		tbl.crvu32u16u2={}
		amk.write_monster_params(tbl,sobj)
	else
		-- Выход из игры.
	end	
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:net_save_relevant()
	return true
end

function generic_object_binder:save(packet)
	printf("generic_object_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.save(self.object, packet)
	end
end

function generic_object_binder:load(reader)
	self.loaded = true
	printf("generic_object_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT "..self.object:name())
	end
	xr_logic.load_obj(self.object, reader)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.load(self.object, reader)
	end
end

function play_particle(obj,params)
	if not particles[obj:id()] then
		particles[obj:id()]={}
	end
	table.insert(particles[obj:id()],params)
end
