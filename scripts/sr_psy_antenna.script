--[[------------------------------------------------------------------------------------------------
Зоны пси-излучения. Отыгрывают постпроцесс и фантомов по настройкам из custom_data
--------------------------------------------------------------------------------------------------]]

--[[
Ray Twitty aka Shadows, 25.05.2023

Комплекс исправлений схемы:
1. Добавлена возможность установить зону как укрытие от пси-излучения. В этой зоне не будет наноситься урон, а все другие эффекты практически сведены к нулю.
Для настройки укрытия необходимо прописать новый параметр "shelter" в секцию логики sr_psy_antenna и задать ему значение true. По умолчанию этот параметр установлен как false.
Другие параметры схемы для укрытия прописывать не нужно.
2. Разблокировано сохранение и загрузка информации в зоне о том, что ГГ находится внутри.
Это исправляет косяк с накоплением счетчика эффектов воздействия, если сохраниться в зоне несколько раз.
3. Вследствие предыдущего пункта возникла проблема с возвращением ГГ на уровень с зоной, если она не была отключена по сюжету (эффекты просто не включались).
Поэтому была добавлена проверка загруженной информации о наличии активных эффектов в ГГ. Если эффектов нет, они создаются заново.
4. Исправлено неотображение постпроцесса при появлении ГГ непосредственно в зоне (например, если переход на локацию находится внутри этой зоны).
5. Исправлено неотображение постпроцесса при повторном входе в зону (в некоторых случаях, из-за особенностей сравнения вещественных чисел в Lua, постпроцесс не восстанавливался).
6. Тип урона заменен на удар по пси-здоровью.
]]

class "PsyAntenna"
function PsyAntenna:__init				()
-- ----------------------------------------------------------------------------------------
-- settings
-- ----------------------------------------------------------------------------------------
-- phantom gen
-- ----------------------------------------------------------------------------------------
	self.phantom_max 					= 8 --10	-- max phantoms
	self.phantom_spawn_probability		= 0	-- spawn probability (0..1)
	self.phantom_spawn_radius			= 30.0	-- average radius 30.0m +-15m
	self.phantom_spawn_height			= 2.5 --3	-- average height from actor pos +-1.5m
	self.phantom_fov					= 45   -- ширина сектора перед глазами актёра, в котором могут рождаться фантомы
	-- antenna
	self.hit_amplitude					= 1.0	-- размер хита = self.hit_amplitude*self.hit_intensity
-- ----------------------------------------------------------------------------------------
-- class variables initialize
-- ----------------------------------------------------------------------------------------
	self.hit_time						= 0
	self.phantom_time                   = 0
	self.intensity_inertion				= 0.05	-- скорость изменения интенсивности ед/секунду
	self.hit_intensity					= 0
	self.sound_intensity				= 0
	self.sound_intensity_base			= 0	-- базовая интенсивность. к ней стремится текущая со скоростью self.intensity_inertion
	self.postprocess_count				= 0  --'счетчик зарегистрированных постпроцессов
	self.postprocess					= {} --'контейнер постпроцессов
	-- Ray Twitty aka Shadows: дополнительные параметры
	self.data_loaded					= false -- маркер произведенной загрузки данных ГГ
	self.disabled						= false -- блокировка воздействия на ГГ (прежде всего для укрытий)

-- ----------------------------------------------------------------------------------------
-- sound
-- ----------------------------------------------------------------------------------------
	self.sound_initialized				= false

	self.sound_obj_right, self.sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")

	self.sound_obj_left.volume			= self.sound_intensity
	self.sound_obj_right.volume			= self.sound_intensity
	self.snd_volume						= level.get_snd_volume()
	self.mute_sound_threshold			= 0 --' Предел до которого можно занижать звук уровня. 0 - можно заглушить полностью
	self.max_mumble_volume				= 10
end
function PsyAntenna:destroy				()
	level.set_snd_volume				(self.snd_volume)
end
function PsyAntenna:construct			()
end
function PsyAntenna:update_psy_hit(dt)
	local custom_static = hud:GetCustomStatic("cs_psy_danger")
	if self.hit_intensity > 0.01 and not self.disabled then -- Ray Twitty aka Shadows: убираем статик, если заблокировано
		if custom_static == nil then
			custom_static = hud:AddCustomStatic("cs_psy_danger", true)
			custom_static:wnd():SetTextST("st_psy_danger")
		end
	else
		if custom_static ~= nil then
			hud:RemoveCustomStatic("cs_psy_danger")
		end
	end
	if time_global() - self.hit_time > 5000 then
		self.hit_time					= time_global()

		local power						= self.hit_amplitude*self.hit_intensity
		if power > 0.01 and not self.disabled then -- Ray Twitty aka Shadows: игнорируем урон, если заблокировано
			local psy_hit 				= hit()
			psy_hit.power 				= power
			psy_hit.direction 			= vector():set( 0, 0, 0 )
			psy_hit.impulse 			= 0
			psy_hit.draftsman 			= Actor
			psy_hit.type 				= hit.telepatic
			Actor:hit				(psy_hit)

			if Actor.health < 0.01 and Actor:alive() then
				Actor:kill( Actor )
			end
		end
	end
end
function PsyAntenna:generate_phantoms()
	if self.phantom_idle == nil then
		self.phantom_idle = math.random(2000,5000)
	end
	if time_global() - self.phantom_time > self.phantom_idle then
		self.phantom_time				= time_global()
		self.phantom_idle = math.random(5000,10000)
		if math.random() < self.phantom_spawn_probability and not self.disabled then -- Ray Twitty aka Shadows: запрещаем спавн новых фантомов, если заблокировано
			if phantom_manager:phantom_count() < self.phantom_max then
				local radius = self.phantom_spawn_radius * ( math.random()/2.0+0.5 )
				local ang    = self.phantom_fov * math.random() - self.phantom_fov * 0.5
				local dir    = vector_rotate_y( Actor:direction(), ang )

				phantom_manager.spawn_phantom( Actor:position():add( dir:mul(radius) ) )
			end
		end
	end
end
function PsyAntenna:update_sound()
	if not self.sound_initialized then
		self.sound_obj_left:play_at_pos		(Actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_obj_right:play_at_pos	(Actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)

		self.sound_initialized = true
	end

	local vol = 1 - ( self.sound_intensity ^ 3 ) * 0.9

	if vol < self.mute_sound_threshold then
		level.set_snd_volume( self.mute_sound_threshold )
	else
		level.set_snd_volume( vol )
	end

	self.sound_obj_left.volume  = 1 / vol - 1
	self.sound_obj_right.volume = 1 / vol - 1
end
function PsyAntenna:update_postprocess(pp)
	-- Ray Twitty aka Shadows: если движок уже удалил постпроцесс, то при входе в зону его надо будет восстановить
	if not level.has_pp_effector(pp.idx) then
		self.postprocess_count = self.postprocess_count - 1
		return false
	end

	if pp.intensity == 0 then
		self.postprocess_count = self.postprocess_count - 1
		level.remove_pp_effector(pp.idx)
		return false
	end

	level.set_pp_effector_factor(pp.idx, pp.intensity, 0.3)
	return true
end
function PsyAntenna:update(dt)
	-- Ray Twitty aka Shadows: в первый апдейт ГГ дельта всегда 0, что приводило к некорректной работе алгоритма и отсутствию постпроцесса
	if dt == 0 then
		dt = 1
	end

	function update_intensity(intensity_base, intensity)
		-- Ray Twitty aka Shadows: если заблокировано, то уменьшаем эффект до минимально возможного, чтобы его не подчистил движок
		if self.disabled then
			intensity_base = 0.001
		end

		local di = self.intensity_inertion * dt * 0.001
		local ii = intensity_base
		if math.abs(intensity_base - intensity) >= di then
			if intensity_base < intensity then
				ii = intensity - di
			else
				ii = intensity + di
			end
		end

		if		ii < 0.0 then ii = 0.0
		elseif	ii > 1.0 then ii = 1.0 end
		return ii
	end

	self:generate_phantoms()

	self.sound_intensity = update_intensity(self.sound_intensity_base, self.sound_intensity)
	self:update_sound()

	for k,v in pairs(self.postprocess) do
		v.intensity = update_intensity(v.intensity_base, v.intensity)
		local exist = self:update_postprocess(v)

		if exist == false then
			self.postprocess[k] = nil
		end
	end

	self:update_psy_hit(dt)
end
function PsyAntenna:save(p)
	p:w_float(self.hit_intensity)
	p:w_float(self.sound_intensity)
	p:w_float(self.sound_intensity_base)
	p:w_float(self.mute_sound_threshold)

	p:w_u8(self.postprocess_count)
	for k,v in pairs(self.postprocess) do
		p:w_stringZ(k)
		p:w_float(v.intensity)
		p:w_float(v.intensity_base)
		p:w_u16(v.idx)
	end
	-- Ray Twitty aka Shadows: сохраняем новые данные
	p:w_bool(self.disabled)
end
function PsyAntenna:load(p)
	self.hit_intensity  = p:r_float()
	self.sound_intensity  = p:r_float()
	self.sound_intensity_base = p:r_float()
	self.mute_sound_threshold = p:r_float()

	self.postprocess_count = p:r_u8()

	self.postprocess = {}
	for i=1, self.postprocess_count do
		local k = p:r_stringZ()
		local ii = p:r_float()
		local ib = p:r_float()
		local idx = p:r_u16()
		self.postprocess[k] = {intensity_base = ib, intensity = ii, idx = idx}
		level.add_pp_effector(k, idx, true)
		level.set_pp_effector_factor(idx, ii)
	end
	-- Ray Twitty aka Shadows: загружаем новые данные и ставим маркер
	self.disabled = p:r_bool()
	self.data_loaded = true
end

----------------------------------------------------------------------------------------------------
-- логическая схема для space restrictor
----------------------------------------------------------------------------------------------------

local state_outside = 0 -- актер снаружи
local state_inside  = 1 -- актер внутри
local state_void  = 2 -- неизвестный статус

psy_antenna = false

class "action_psy_antenna"
function action_psy_antenna:__init( obj, storage )
	self.object = obj
	self.st     = storage
	self.state  = state_void --' еще не ясно, в зоне он, или нет
end
function action_psy_antenna:reset_scheme( loading )
	-- Ray Twitty aka Shadows: включаем загрузку состояния зоны с проверкой загруженной информации об эффектах в ГГ
	if loading and psy_antenna.data_loaded then
		self.state = xr_logic.pstor_retrieve( self.object, "inside"  )
	else
		if self.state == state_inside then
			self:zone_leave()
		end

		self.state = state_void

		self:switch_state()
	end
end
function action_psy_antenna:deactivate()
	if self.state == state_inside then
		self:zone_leave()
	end
end
function action_psy_antenna:update()
	if xr_logic.try_switch_to_another_section(self.object, self.st) then
		return
	end
	self:switch_state()
end
function action_psy_antenna:switch_state()
	if self.state ~= state_inside then
		if self.object:inside( Actor:position() ) then
			self:zone_enter()
			return
		end
	else
		if not self.object:inside( Actor:position() ) then
			self:zone_leave()
			return
		end
	end
end
function action_psy_antenna:zone_enter()
	self.state = state_inside

	psy_antenna.sound_intensity_base = psy_antenna.sound_intensity_base + self.st.intensity
	psy_antenna.mute_sound_threshold = psy_antenna.mute_sound_threshold + self.st.mute_sound_threshold
	psy_antenna.hit_intensity  = psy_antenna.hit_intensity  + self.st.hit_intensity
	psy_antenna.phantom_spawn_probability = psy_antenna.phantom_spawn_probability + self.st.phantom_prob

	-- Ray Twitty aka Shadows: заходим в укрытие
	if self.st.shelter then
		psy_antenna.disabled = true
	end

	local postproc = self.st.postprocess
	if postproc == "nil" then
		return
	end

	if psy_antenna.postprocess[postproc] == nil then
		psy_antenna.postprocess_count = psy_antenna.postprocess_count + 1
		local l_idx = 1500 + psy_antenna.postprocess_count
		psy_antenna.postprocess[postproc] = { intensity_base = 0, intensity = 0, idx = l_idx }
		level.add_pp_effector(postproc, l_idx, true)
		level.set_pp_effector_factor(l_idx, 0.01)
	end
	psy_antenna.postprocess[postproc].intensity_base = psy_antenna.postprocess[postproc].intensity_base + self.st.intensity
end
function action_psy_antenna:zone_leave()
	self.state = state_outside

	psy_antenna.sound_intensity_base = psy_antenna.sound_intensity_base - self.st.intensity
	psy_antenna.mute_sound_threshold = psy_antenna.mute_sound_threshold - self.st.mute_sound_threshold
	psy_antenna.hit_intensity  = psy_antenna.hit_intensity  - self.st.hit_intensity

	psy_antenna.phantom_spawn_probability = psy_antenna.phantom_spawn_probability - self.st.phantom_prob

	-- Ray Twitty aka Shadows: выходим из укрытия
	if self.st.shelter then
		psy_antenna.disabled = false
	end

	local postproc = self.st.postprocess
	if postproc == "nil" then
		return
	end

	if psy_antenna.postprocess[postproc] ~= nil then
		psy_antenna.postprocess[postproc].intensity_base = psy_antenna.postprocess[postproc].intensity_base - self.st.intensity
	end
end
function action_psy_antenna:save()
	xr_logic.pstor_store( self.object, "inside", self.state ) -- Ray Twitty aka Shadows: сохраняем информацию о том, находимся в зоне или нет
end

---------------------------------------------------------------------------------------------------------------------
function save( p )
	if psy_antenna and not utils.level_changing() then
		p:w_bool( true )

		psy_antenna:save( p )
	else
		p:w_bool( false )
	end
end

function load(p)
	local b = p:r_bool()

	if b then
		if psy_antenna then
			abort("sr_psy_antenna.psy_antenna already exists!")
			return
		end

		psy_antenna = PsyAntenna()
		psy_antenna:construct()

		psy_antenna:load(p)
	end
end

function add_to_binder(npc, storage)
	if not psy_antenna then
		psy_antenna = PsyAntenna()
		psy_antenna:construct()
	end

	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	storage.actions[ action_psy_antenna( npc, storage ) ] = true
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local function get_field_number(field, default)
		return (ini:line_exist(section, field) and ini:r_float(section, field)) or default or 0
	end

	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	if not ini:section_exist(section) then return end

	st.postprocess   = (ini:line_exist(section, "postprocess") and ini:r_string(section, "postprocess")) or "psy_antenna.ppe"
	st.phantom_prob  = get_field_number("phantom_prob", 0) * 0.01
	st.mute_sound_threshold   = get_field_number("mute_sound_threshold", 0)

	-- Ray Twitty aka Shadows: читаем параметры укрытия
	st.shelter				= ini:r_bool_ex(section, "shelter", false)
	if st.shelter then
		st.intensity		= 0
		st.hit_intensity	= 0
	else
		st.intensity		= get_field_number("eff_intensity") * 0.01
		st.hit_intensity	= get_field_number("hit_intensity") * 0.01
	end
end
