--[[---------------------------------------------------------------------------
 * Former sa_hud_animations_mgr.script from Shadows Addon (Ray Twitty aka Shadows)
--]]---------------------------------------------------------------------------

--[[---------------------------------------------------------------------------
 * Constants
--]]---------------------------------------------------------------------------

local NO_SCOPE = [[act\nevidimka_face]]
local FIREMODE_SWITCH_SOUND = [[weapons\firemode_switch]]

local scope_ratio = { }
for _, name in ipairs({ "1P21-AMK_1680-W", "crossbow", "PSO1M1-AMK_1680-W", "PSO1M2-AMK_1680-W" }) do
	scope_ratio[name] = 0.625
end
for _, name in ipairs({ "awm", "comp", "lr300_m2", "mildot" }) do
	scope_ratio[name] = 0.75
end

--[[---------------------------------------------------------------------------
 * Singleton class
--]]---------------------------------------------------------------------------

class "weapon_manager"

function weapon_manager:__init()
	self.next_250 = 0

	self.scope_ratio = screen.height / screen.width
	self:init_scope_texture()
end

function weapon_manager:update()
	self.item = Actor:active_item()
	if self.item then
		self.current_state = self.item:get_hud_item_state()

		local status, grenade_mode = self.item:id()
		if status ~= self.item_id then
			self.item_id = status
			self:update_item_data()
		end

		if self.wpn then
			status = self.wpn.zoom_mode
			grenade_mode = self.wpn.grenade_launcher_status ~= 0 and self.item:get_gl_mode()
		else
			status = false
			grenade_mode = false
		end
		if status ~= self.zoom_mode or grenade_mode ~= self.grenade_mode then
			self:switch_zoom_mode(status, grenade_mode)
		end

		status = self.zoom_mode and self:attached("scope") and not self.item:get_gl_mode()
		if status ~= self.scope_zoom_mode then
			self:switch_scope_mode(status)
		end

		status = self.scope_zoom_mode and self.wpn.zoom_rotation_factor == 1 and
			 AObj.active_cam == EActorCameras.eacFirstEye
		if status ~= self.scope_tex_status then
			self:show_scope_texture(status)
		end

		if self.last_state ~= self.current_state then
			if self.cartridge_bone and self.last_state ~= -1 then
				if self.current_state == weapon_states.fire or
				   self.current_state == weapon_states.reload then
					self.item:set_hud_bone_visible(self.cartridge_bone, 1)
				else
					self.item:set_hud_bone_visible(self.cartridge_bone, 0)
				end
			end
			self.last_state = self.current_state
		end

		if time_real_ms >= self.next_250 then
			if self.rotate_params then
				self:update_rotate_time()
			end

			self.next_250 = time_real_ms + 250
		end
	elseif self.item_id ~= 0 then
		if self.scope_tex_status then
			self:show_scope_texture(false)
		end
		if self.scope_zoom_mode then
			self:switch_scope_mode(false)
		end
		if self.zoom_mode or self.grenade_mode then
			self:switch_zoom_mode(false, false)
		end

		self.item_id = 0
	end
end

function weapon_manager:update_item_data()
	self.section = self.item:section()
	self.last_state = -1

	self.wpn = self.item:get_weapon()
	if self.wpn then
		self.cartridge_bone = config:r_string_ex(config:r_string(self.section, "hud"),
							 "cartridge_bone")
		self.firemode_sound = #(self.wpn.fire_modes or { }) > 1 and
				      voice(FIREMODE_SWITCH_SOUND) or nil
	end

	self:read_scope_params()
	self:read_rotate_params()
	self:show_scope_texture(false)
end

function weapon_manager:attached(addon)
	local status = self.wpn[addon .. "_status"]

	if status == addon_status.disabled then return false end
	if status == addon_status.permanent then return true end

	return bit_and(self.item:get_addon_flags(), addon_flags[addon]) ~= 0
end

function weapon_manager:hide_indicators(status)
	if level.main_input_receiver() then return end

	if status then
		level.hide_indicators()
	else
		level.show_indicators()
	end
end

function weapon_manager:switch_zoom_mode(status, grenade_mode)
	self.zoom_mode = status
	self.grenade_mode = grenade_mode

	if not self.keep_hud then
		self:hide_indicators(status)
	end
end

function weapon_manager:switch_scope_mode(status)
	self.scope_zoom_mode = status

	if self.keep_hud then
		self:hide_indicators(status)
	end
end

--[[---------------------------------------------------------------------------
 * Scope texture
--]]---------------------------------------------------------------------------

function weapon_manager:read_scope_params()
	self.keep_hud = config:r_bool_ex(self.section, "scope_show_indicators", true) == true
	if not self.wpn or not self:attached("scope") then return end

	local var
	if not config:r_bool_ex(self.section, "ignore_scope_texture") then
		if self.wpn.scope_status == 1 then
			var = self.section
		else
			var = self.wpn.scope_name
		end
		self.scope_texture = config:r_string_ex(var, "scope_texture")
	else
		self.scope_texture = nil
	end
	if not self.scope_texture then return end

	var = scope_ratio[string.sub(self.scope_texture, 16)] or 0.5625
	if self.scope_ratio ~= var then
		self.scope_ratio = var
		self:rescale_scope_texture()
	end

	if self.st_scope_l then
		self.st_scope_l:InitTexture(self.scope_texture)
		self.st_scope_l:SetOriginalRect(0, 0, 1, 1)
	end
	if self.st_scope_r then
		self.st_scope_r:InitTexture(self.scope_texture)
		self.st_scope_r:SetOriginalRect(0, 0, 1, 1)
	end

	self.st_scope:InitTexture(self.scope_texture)
	self.st_scope:ResetOriginalRect()
end

function weapon_manager:get_scope_offset()
	local width = 1024 * screen.height / (screen.width * self.scope_ratio)

	return width, (1024 - width) / 2
end

function weapon_manager:init_scope_texture()
	local width, offset = self:get_scope_offset()
	local st

	st = CUIStatic()
	st:Init(0, 0, offset, 768)
	st:SetStretchTexture(true)
	hud:AddDialogToRender(st)
	self.st_scope_l = st

	st = CUIStatic()
	st:Init(width + offset, 0, offset + 1, 768)
	st:SetStretchTexture(true)
	hud:AddDialogToRender(st)
	self.st_scope_r = st

	st = CUIStatic()
	st:Init(offset, 0, width, 768)
	st:SetStretchTexture(true)
	hud:AddDialogToRender(st)
	self.st_scope = st
end

function weapon_manager:rescale_scope_texture()
	local width, offset = self:get_scope_offset()

	self.st_scope_l:SetWndRect(0, 0, offset, 768)
	self.st_scope_r:SetWndRect(width + offset, 0, offset + 1, 768)
	self.st_scope:SetWndRect(offset, 0, width, 768)
end

function weapon_manager:show_scope_texture(status)
	self.scope_tex_status = status
	if not self.scope_texture then return end

	if self.st_scope_l then
		self.st_scope_l:Show(status)
	end
	if self.st_scope_r then
		self.st_scope_r:Show(status)
	end
	self.st_scope:Show(status)
end

function weapon_manager:clear_scope_texture()
	self.scope_tex_status = nil

	if self.st_scope_l then
		hud:RemoveDialogToRender(self.st_scope_l)
	end
	if self.st_scope_r then
		hud:RemoveDialogToRender(self.st_scope_r)
	end
	hud:RemoveDialogToRender(self.st_scope)
end

--[[---------------------------------------------------------------------------
 * Dynamic zoom rotate time
--]]---------------------------------------------------------------------------

function weapon_manager:read_rotate_params()
	if not self.wpn or not self.wpn.zoom_enabled then
		self.rotate_params = nil
		return
	end

	local base = self.wpn.inv_weight
	local flags, var, sect

	if self.wpn.scope_status == 2 and self:attached("scope") then
		var = self.wpn.scope_name
		sect = var
		base = base + config:r_float(var, "inv_weight")
	end

	if self.wpn.silencer_status == 2 and self:attached("silencer") then
		base = base + config:r_float(self.wpn.silencer_name, "inv_weight")
	end

	if self.wpn.grenade_launcher_status == 2 and self:attached("grenade_launcher") then
		base = base + config:r_float(self.wpn.grenade_launcher_name, "inv_weight")
	end

	var = config:r_float(sect or self.section, "scope_zoom_factor")
	sect = config:r_list(self.section, "ammo_class")[self.item:get_ammo_type() + 1]

	self.rotate_params = {
		base	= (base + (var >= 2 and 1 or (var - 1))) / 10,
		bullet	= config:r_float(sect, "inv_weight") / config:r_u32(sect, "box_size")
	}
end

function weapon_manager:update_rotate_time()
	local val = self.item:get_ammo_in_magazine() * self.rotate_params.bullet / 10 +
		    self.rotate_params.base
	if val < 0.15 then
		val = 0.15
	elseif val > 1 then
		val = 1
	end

	self.wpn.zoom_rotate_time = val
end

--[[---------------------------------------------------------------------------
 * Hotkeys
--]]---------------------------------------------------------------------------

function weapon_manager:on_key_press(bind)
	if not self.item or not self.wpn then return end

	if bind == key_bindings.kWPN_FIREMODE_PREV or bind == key_bindings.kWPN_FIREMODE_NEXT then
		if self.firemode_sound then
			say(self.firemode_sound)
		end
	end
end

--[[---------------------------------------------------------------------------
 * Exports
--]]---------------------------------------------------------------------------

local wm

function get_weapon_manager()
	if not wm then
		wm = weapon_manager()
	end

	return wm
end
