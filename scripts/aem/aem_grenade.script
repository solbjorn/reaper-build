--------
--
--------
function unload1()
	local lvid = Actor:level_vertex_id()
	local gvid = Actor:game_vertex_id()
	local pos = Actor:position()
	pos.x = pos.x + 10
	pos.y = pos.y + 10
	pos.z = pos.z + 10
	local slot2_id = 0
	local cnt = 0
	local ids = {}

	local obj = Actor:item_in_slot(2)
	if obj then
		slot2_id = obj:id()
	end

	local i, cid, section, launcher
	local n = Actor:object_count()
	for i=0, n-1 do
		obj = Actor:object(i)
		cid = obj:clsid()
		if cid == clsid.wpn_ak74_s or cid == clsid.wpn_groza_s then
			--printf(" name='%s'", obj:name())
			section = obj:section()
			launcher = config:r_u32(section, "grenade_launcher_status")
			if launcher ~= 0 then
				--printf(" launcher - ~0")
				local id = obj:id()
				local se_obj = AI:object(id)
				local state = get_state(se_obj)
				local update = get_update(se_obj)
				if (launcher == 1) or (launcher == 2 and bit_and(state.addon_flags, 2) == 2) then
					--printf(" launcher - ok")
					if update.grenade_mode == 1 then
						--printf(" grenade_mode")
						if state.ammo_elapsed > 0 then
							--printf(" unload_magazine")
							obj:unload_magazine()
						end
					else
						AI:release(se_obj, true)
						se_obj = AI:create(section, pos, lvid, gvid)
						set_state(se_obj, state)
						cnt = cnt + 1
						if id == slot2_id and cnt > 1 then
							--printf(" slot2 weapon (%d)", se_obj.id)
							ids[cnt] = ids[1]
							ids[1] = se_obj.id
						else
							--printf(" inventory weapon (%d)", se_obj.id)
							ids[cnt] = se_obj.id
						end
					end
				end
			end
		end
	end

	if cnt == 0 then
		return nil
	end

	return ids
end

--------
--
--------
function unload2(ids)
	--printf("unload2")
	local i, id, obj
	for i, id in pairs(ids) do
		--printf(" %d) id=%d", i, id)
		obj = level.object_by_id(id)
		if not obj then
			--printf(" nil obj")
			return false
		end
	end
	for i, id in pairs(ids) do
		obj = level.object_by_id(id)
		obj:transfer_item(obj, Actor)
	end
	return true
end

function get_state(se_obj)
	local packet = net_packet()
	se_obj:STATE_Write(packet)
	local st = {}
	st.game_vertex_id	= packet:r_u16()
	st.distance		= packet:r_float()
	st.direct_control	= packet:r_s32()
	st.level_vertex_id	= packet:r_s32()
	st.object_flags		= packet:r_s32()
	st.custom_data		= packet:r_stringZ()
	st.story_id		= packet:r_s32()
	st.spawn_story_id	= packet:r_s32()
	st.visual_name		= packet:r_stringZ()
	st.visual_flags		= packet:r_u8()
	st.condition		= packet:r_float()
	st.ammo_current		= packet:r_u16()
	st.ammo_elapsed		= packet:r_u16()
	st.weapon_state		= packet:r_u8()
	st.addon_flags		= packet:r_u8()
	st.ammo_type		= packet:r_u8()
	return st
end

function set_state(se_obj, st)
	local packet = net_packet()
	packet:w_u16(st.game_vertex_id)
	packet:w_float(st.distance)
	packet:w_s32(st.direct_control)
	packet:w_s32(st.level_vertex_id)
	packet:w_s32(st.object_flags)
	packet:w_stringZ(st.custom_data)
	packet:w_s32(st.story_id)
	packet:w_s32(st.spawn_story_id)
	packet:w_stringZ(st.visual_name)
	packet:w_u8(st.visual_flags)
	packet:w_float(st.condition)
	packet:w_u16(st.ammo_current)
	packet:w_u16(st.ammo_elapsed)
	packet:w_u8(st.weapon_state)
	packet:w_u8(st.addon_flags)
	packet:w_u8(st.ammo_type)
	se_obj:STATE_Read(packet, packet:w_tell())
end

function get_update(se_obj)
	local packet = net_packet()
	se_obj:UPDATE_Write(packet)
	local st = {}
	st.grenade_mode		= packet:r_u8()
	st.num_items		= packet:r_u8()		-- !!! warning !!!
	st.condition		= packet:r_u8()
	st.weapon_flags		= packet:r_u8()
	st.ammo_elapsed		= packet:r_u16()
	st.addon_flags		= packet:r_u8()
	st.ammo_type		= packet:r_u8()
	st.weapon_state		= packet:r_u8()
	st.weapon_zoom		= packet:r_u8()
	st.current_fire_mode	= packet:r_u8()
	return st
end

function set_update(se_obj, st)
	local packet = net_packet()
	packet:w_u8(st.grenade_mode)
	packet:w_u8(st.num_items)
	packet:w_u8(st.condition)
	packet:w_u8(st.weapon_flags)
	packet:w_u16(st.ammo_elapsed)
	packet:w_u8(st.addon_flags)
	packet:w_u8(st.ammo_type)
	packet:w_u8(st.weapon_state)
	packet:w_u8(st.weapon_zoom)
	packet:w_u8(st.current_fire_mode)
	se_obj:UPDATE_Read(packet)
end

function set_all(se_obj, state, update)
	local packet = net_packet()

	packet:w_u16(state.game_vertex_id)
	packet:w_float(state.distance)
	packet:w_s32(state.direct_control)
	packet:w_s32(state.level_vertex_id)
	packet:w_s32(state.object_flags)
	packet:w_stringZ(state.custom_data)
	packet:w_s32(state.story_id)
	packet:w_s32(state.spawn_story_id)
	packet:w_stringZ(state.visual_name)
	packet:w_u8(state.visual_flags)
	packet:w_float(state.condition)
	packet:w_u16(state.ammo_current)
	packet:w_u16(state.ammo_elapsed)
	packet:w_u8(state.weapon_state)
	packet:w_u8(state.addon_flags)
	packet:w_u8(state.ammo_type)

	packet:w_u8(update.grenade_mode)
	packet:w_u8(update.num_items)
	packet:w_u8(update.condition)
	packet:w_u8(update.weapon_flags)
	packet:w_u16(update.ammo_elapsed)
	packet:w_u8(update.addon_flags)
	packet:w_u8(update.ammo_type)
	packet:w_u8(update.weapon_state)
	packet:w_u8(update.weapon_zoom)
	packet:w_u8(update.current_fire_mode)

	se_obj:STATE_Read(packet, packet:w_tell())
end
