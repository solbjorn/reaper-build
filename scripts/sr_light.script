local light_zones = {}

local indoor_levels = {
	l03u_agr_underground = true,
	l04u_labx18 = true,
	l08u_brainlab = true,
	l10u_bunker = true,
	l12u_sarcofag = true,
	l12u_control_monolith = true
}
---------------------------------------------------------------------------------------------------------------------
class "action_light"
function action_light:__init (obj, storage)
	self.object = obj
	self.st = storage
	self.active = false
	self.id = obj:id()
end
function action_light:reset_scheme()
    light_zones[self.id] = self
end
function action_light:update(delta)
	if xr_logic.try_switch_to_another_section(self.object, self.st, db_actor) then
	   self.active = false
	   light_zones[self.id] = nil
	   return
	end	
	self.active = true
end
function action_light:check_stalker(stalker)
    if self.active == false then 
       return false, false
    end
    
	if stalker and self.object:inside(stalker:position()) then
		return self.st.light, true
	end

	return false, false
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder_q(npc, storage)
	local new_action = action_light (npc, storage)
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	st.light = utils.cfg_get_bool (ini, section, "light_on", npc, false, false)
end

local engage_after = 20
local engaged = {}

---------------------------------------------------------------------------------------------------------------------
function check_light(stalker)
	if not stalker then
		return
	end
	
	if not engaged[stalker:id()] then
		engaged[stalker:id()] = 0
	else	
		if engaged[stalker:id()] < engage_after then
			engaged[stalker:id()] = engaged[stalker:id()] + 1
			return
		end
	end

	local torch = stalker:object("device_torch")
	if not torch then
		return
	end

	local light = false
	local forced = false

	if stalker:alive() == false then
		if torch then
			torch:enable_attachable_item(false)
		end
		return
	end

	--' Проверка по лайтзонам
	for k,v in pairs(light_zones) do
		light, forced = v:check_stalker(stalker)
		if forced == true then
			break
		end
	end

	if not forced then
		--' Проверка по времени суток (ночью всегда включено)
		local htime = level.get_time_hours()
		if htime then
			if htime <= 4 or htime >= 22 then
				light = true
			else
				light = false
			end
		end

		--' Проверка на индор-аутдор (внутри всегда включено)
		if light == false then
			if indoor_levels[level.name()] == true then
				light = true
			end
		end

		--' Проверка по активному действию
		if light == true then
			--' Фонарики должны быть выключены у костра
			local scheme = db.storage[stalker:id()].active_scheme
			local state = state_mgr.get_state(stalker)
			if scheme == "kamp" or
				scheme == "camper" or
				-- И во время сна
				state == "sleep" or
				state == "sleep_sit" or
				scheme == "sleeper"
			then
				light = false
			end
		end
	end

	--' Фонарики должны быть выключены в бою. Но если в бою идет поиск врага - то включены.
	if stalker and stalker:alive() and stalker:best_enemy() then
		light = false
	end
	
	if light ~= nil and torch then
		if light == false then torch:enable_attachable_item(true) end
		torch:enable_attachable_item(light)
	end
end

function clean_up ()
   light_zones = {} 
end
