--[[-----------------------------------------------------------------------------------------------
 File         : sa_main.script
 Description  : Новые фичи и возможности
 Copyright    : Shadows Addon
 Author       : Ray Twitty aka Shadows
 Date         : 21.07.2011
 Last edit    : 11.11.2018
--]]-----------------------------------------------------------------------------------------------
--[[-----------------------------------------------------------------------------------------------
 * Hit effectors
--]]-----------------------------------------------------------------------------------------------
function hit_effectors(obj)
	local attack_effector = config:r_string_cache(obj:section(), "attack_effector")
	if attack_effector then
		local ce_time = config:r_float_cache(attack_effector, "ce_time")
		local ce_amplitude = config:r_float_cache(attack_effector, "ce_amplitude")
		local ce_period_number = config:r_float_cache(attack_effector, "ce_period_number")
		local ce_power = config:r_float_cache(attack_effector, "ce_power")
		level.add_cam_effector3(ce_time, ce_amplitude, ce_period_number, ce_power)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Fix custom statics overlap
--]]-----------------------------------------------------------------------------------------------
local hud_interface_mgr = sa_hud_interface_mgr.get_hud_interface_mgr()
---------------------------------------------------------------------------------------------------
function reattach_statics()
	local statics = { "hud_timer", "hud_timer_text", "hud_time", "hud_date", "cs_psy_danger", "cs_radiation_danger", "gun_jammed", "cant_walk", "cant_walk_weight", "car_speedometer_background", "car_speedometer_transmission", "car_speedometer_pointer", "car_fuel_static", "gun_reload" }
	for i = 1, #statics do
		hud:RemoveCustomStatic(statics[i])
	end
	hud_interface_mgr.nextupd_200 = 0
	hud_interface_mgr.nextupd_1000 = 0
	hud_interface_mgr.night_vision_active = false
	ui_rad.remove_static()
end
---------------------------------------------------------------------------------------------------
function rect_change()
	hud_interface_mgr.night_vision_active = false
end
--[[-----------------------------------------------------------------------------------------------
 * Disable UI info portions
--]]-----------------------------------------------------------------------------------------------
function disable_ui_info()
	give_info("ui_pda_hide")
	give_info("ui_pda_dialog_hide")
	give_info("ui_pda_task_description_hide")
	give_info("ui_inventory_hide")
	give_info("ui_talk_hide")
	give_info("ui_trade_hide")
	give_info("ui_car_body_hide")
	give_info("ui_dead_body_hide")
end
--[[-----------------------------------------------------------------------------------------------
 * PDA info portion fix
--]]-----------------------------------------------------------------------------------------------
function pda_info_fix(dik)
	if has_info("ui_pda_hide") then
		if dik == bind_to_dik(key_bindings.kMAP) then
			give_info("ui_pda_map")
		elseif dik == bind_to_dik(key_bindings.kACTIVE_JOBS) then
			give_info("ui_pda_quests")
		elseif dik == bind_to_dik(key_bindings.kCONTACTS) then
			give_info("ui_pda_contacts")
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * PDA tab callback
--]]-----------------------------------------------------------------------------------------------
local active_tab, last_info_id
local pda_info_portions = {
	ui_pda_quests		= "quests",
	ui_pda_map		= "map",
	ui_pda_events		= "events",
	ui_pda_contacts		= "contacts",
	ui_pda_ranking		= "ranking",
	ui_pda_actor_info	= "statictic",
	ui_pda_encyclopedia	= "encyclopedia"
}
---------------------------------------------------------------------------------------------------
function pda_tab_callback(info_id)
	if pda_info_portions[info_id] then
		if has_info("ui_pda") then
			active_tab = pda_info_portions[info_id]
			sa_callbacks.pda_tab(active_tab)
		elseif has_info("ui_pda_hide") then
			last_info_id = info_id
		end
	elseif info_id == "ui_pda" then
		sa_callbacks.pda_tab("pda_show")
		if last_info_id then
			active_tab = pda_info_portions[last_info_id]
			sa_callbacks.pda_tab(active_tab)
			last_info_id = nil
		end
	elseif info_id == "ui_pda_hide" then
		sa_callbacks.pda_tab("pda_hide")
		active_tab = nil
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Scope zoom mode callback
--]]-----------------------------------------------------------------------------------------------
function scope_zoom_mode_callback()
	local active_item = Actor:active_item()
	if active_item and active_item:is_weapon() then
		if get_weapon_data(active_item, "zoom_mode") and get_weapon_data(active_item, "scope_enabled") and get_weapon_data(active_item, "scope_texture") and not get_weapon_data(active_item, "grenade_mode") then
			if not actor_flags.scope_zoom_mode then
				sa_callbacks.scope_zoom_mode(true)
				actor_flags.scope_zoom_mode = true
			end
		else
			if actor_flags.scope_zoom_mode then
				sa_callbacks.scope_zoom_mode(false)
				actor_flags.scope_zoom_mode = false
			end
		end
	elseif actor_flags.scope_zoom_mode then
		sa_callbacks.scope_zoom_mode(false)
		actor_flags.scope_zoom_mode = false
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Light death callback
--]]-----------------------------------------------------------------------------------------------
function light_death_callback(obj, who)
	if obj:is_hanging_lamp() and not xr_logic.pstor_retrieve(obj, "death_light") then
		level.parked_call(
			function()
				if not is_light_alive(obj) then
					obj:binded_object():death_callback(obj, who)
					xr_logic.pstor_store(obj, "death_light", true)
				end
			end,
		2)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Dead body sounds
--]]-----------------------------------------------------------------------------------------------
function dead_body_sounds(info_id)
	if has_info("ui_dead_body") then
		if info_id == "ui_car_body" then
			play_safe_sound_object("interface\\inv_open")
		elseif info_id == "ui_car_body_hide" then
			play_safe_sound_object("interface\\inv_close")
			give_info("ui_dead_body_hide")
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * PDA sounds
--]]-----------------------------------------------------------------------------------------------
local last_tab_id
local pda_tabs = { }
for info, tab in pairs(pda_info_portions) do
	pda_tabs[tab] = true
end
---------------------------------------------------------------------------------------------------
function pda_sounds(tab_id)
	if tab_id == "pda_show" then
		say("device\\pda\\pda_on")
	elseif tab_id == "pda_hide" then
		say("device\\pda\\pda_off")
	elseif pda_tabs[tab_id] and last_tab_id ~= "pda_show" then
		say("device\\pda\\pda_tab")
	end
	last_tab_id = tab_id
end
--[[-----------------------------------------------------------------------------------------------
 * Yantar psy blowout
--]]-----------------------------------------------------------------------------------------------
function yantar_psy_blowout()
	if not has_info("yan_labx16_switcher_3_end") then
		if level.name() == "l08_yantar" and not (actor_flags.sleep_state or yantar_tasks.yan_scientist_raid_now()) then
			local need_hit, khit = amk_mod.blowout_khit()
			if Actor:object("good_psy_helmet") then
				khit = 0.05
			elseif Actor:object("bad_psy_helmet") then
				khit = 0.2 * khit
			else
				khit = 0.35 * khit
			end
			if khit < 0.05 then khit = 0.05 end
			Actor.psy_health = -khit
			play_safe_sound_object([[ambient\blowout]])
			play_safe_sound_object([[characters_voice\scenario\yantar\psy_voices_1]])
			level.add_pp_effector("yantar_blowout.ppe", effector_ids.yantar_blowout, false)
			level.add_pp_effector("yantar_underground_psi.ppe", effector_ids.yantar_underground_psi, false)
			level.add_cam_effector("camera_effects\\shell_shock.anm", effector_ids.shell_shock, false, "")
			level.add_cam_effector("camera_effects\\earthquake.anm", effector_ids.earthquake, false, "")
		end
		timer("sa_main.yantar_psy_blowout", math.random(5 * 60 * 1000, 7 * 60 * 1000), true)
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Radar bunker cooling sound
--]]-----------------------------------------------------------------------------------------------
local cooling_snd = nil
---------------------------------------------------------------------------------------------------
function bunker_cooling_sound()
	if level.name() == "l10u_bunker" then
		if not has_info("bar_deactivate_radar_done") then
			if not (cooling_snd and cooling_snd:playing()) then
				cooling_snd = sound_object("ambient\\cooling_run")
				cooling_snd:play_at_pos(Actor, vector(), 0, sound_object.s2d + sound_object.looped)
			end
		elseif cooling_snd then
			play_safe_sound_object("ambient\\cooling_stop")
			cooling_snd:stop()
			cooling_snd = nil
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * PDA news
--]]-----------------------------------------------------------------------------------------------
function dynamic_news()
	local community = math.random(4)
	if community == 1 then
		send_tip(translate("stalker_phrase_"..math.random(25)), generate_name("stalker"), 0, 10, "stalker", "pda_news")
	elseif community == 2 then
		send_tip(translate("dolg_phrase_"..math.random(15)), generate_name("stalker"), 0, 10, "dolg", "pda_news")
	elseif community == 3 then
		send_tip(translate("freedom_phrase_"..math.random(16)), generate_name("stalker"), 0, 10, "freedom", "pda_news")
	elseif community == 4 then
		send_tip(translate("bandit_phrase_"..math.random(23)), generate_name("bandit"), 0, 10, "bandit", "pda_news")
	end
end
--[[-----------------------------------------------------------------------------------------------
 * Restore torch on corpses
--]]-----------------------------------------------------------------------------------------------
function restore_torch(victim)
	if sr_light.check_light(victim) then
		local torch = victim:item_in_slot(9)
		if torch and torch:is_torch_enabled() then
			victim:transfer_item(torch, victim)
			local id = torch:id()
			level.parked_call(
				function()
					torch = level.object_by_id(id)
					victim:move_to_slot(torch)
					torch:enable_attachable_item(true)
					torch:switch_torch(true)
				end,
			2)
		end
	end
end
