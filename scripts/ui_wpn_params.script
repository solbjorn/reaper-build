function normalize(val)
	if val > 100 then
		val = 100
	elseif val < 1 then
		val  = 1
	end

	return val
end

function GetRPM(section)
	local mag_size = config:r_float(section,"ammo_mag_size")
	if mag_size < 5 then
		return 30
	end

	local rpm = config:r_float(section,"rpm")
	if rpm > 100 then
		rpm = (mag_size*(60/((mag_size/(rpm/60)) + 5.5)))/2.4
	else
		rpm = rpm/14
	end

	return normalize(rpm)
end

function GetDamage(section)
	local hit_power = config:r_float(section,"hit_power")
	local hit_rate = config:r_float(section, "hit_rate")
	local ammo_class = config:r_list(section, "ammo_class")
	local k_hit = config:r_float(ammo_class[#ammo_class], "k_hit")

	local hit = hit_rate + math.log10(2*hit_power*k_hit)

	return normalize(28*hit)
end

function GetHandling(section)
	local misfire_probability = config:r_float(section,"misfire_probability")
	local misfire_condition_k = config:r_float(section, "misfire_condition_k")
	local condition_shot_dec = config:r_float(section,"condition_shot_dec")
	local ammo_class = config:r_list(section, "ammo_class")
	local impair = config:r_float(ammo_class[#ammo_class], "impair")

	local n = 3000
	local cond = 1 - impair*condition_shot_dec*n
		if cond < 0 then cond = 0
	end
	local prob
		if cond > 0.95 then prob = 0
		else
		prob = (0.95 - cond)*(misfire_condition_k - misfire_probability) + misfire_probability
	end

	local val = 100*(1 - prob*7)
		if val < 20 then val = 20
	end

	return normalize(val)
end

function GetAccuracy(section)
	local fire_dispersion_base = config:r_float(section,"fire_dispersion_base")
	local disp_rate = config:r_float(section, "disp_rate")
	local ammo_class = config:r_list(section, "ammo_class")
	local k_disp = config:r_float(ammo_class[#ammo_class], "k_disp")

	local fir = disp_rate + math.log10(0.9/(fire_dispersion_base*k_disp))

	return normalize(28*fir)
end
