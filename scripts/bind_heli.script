--[[------------------------------------------------------------------------------------------------
Helicoter binding
Чугай Александр

Сделать:
	- настройки в ltx
--------------------------------------------------------------------------------------------------]]

---------------------------------------------------------------------------------------------
-- Функция для бинда
---------------------------------------------------------------------------------------------

function bind( obj )
   	local ini = obj:spawn_ini()
   	if ini and ini:section_exist("logic") then
		obj:bind_object( heli_binder( obj, ini ) )
	end
end

---------------------------------------------------------------------------------------------
-- Биндер вертолётов
---------------------------------------------------------------------------------------------
class "heli_binder" ( object_binder )

function heli_binder:__init( obj, ini ) super( obj )
	self.ini         = ini
	self.initialized = false
	self.loaded      = false
end

function heli_binder:reload( section )
	object_binder.reload( self, section )
end

function heli_binder:reinit()
	object_binder.reinit( self )

	self.st = {}
	db.storage[self.object:id()] = self.st

	self.heliObject = self.object:get_helicopter()

	self.object:set_callback( callback.helicopter_on_point, self.on_point, self )
	self.object:set_callback( callback.helicopter_on_hit,   self.on_hit,   self )

	self.st.combat = heli_combat.heli_combat( self.object, self.heliObject )

	self.last_hit_snd_timeout = 0

	self.flame_start_health   = config:r_float_cache("helicopter", "flame_start_health")

	self.st.flame_start_snd   = xr_sound.get_sound_object("heli_explosion", "random")

	-- на случай загрузки
	self.st.last_alt       = self.heliObject:GetRealAltitude()
	self.st.alt_check_time = time_global() + 1000
end

function heli_binder:update( delta )
	object_binder.update( self, delta )

	if not self.initialized then
		self.initialized = true
		xr_logic.initialize_obj( self.object, self.st, self.loaded, modules.stype_heli )
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "update", delta )
	end

	self:check_health()
end

function heli_binder:net_spawn( data )
	if not object_binder.net_spawn( self, data ) then
		return false
	end

	db.add_heli( self.object )

	news_main.on_heli_seen(self.object)

	return true
end

function heli_binder:net_destroy()
	db.storage[self.object:id()] = nil
	db.del_heli( self.object )

	object_binder.net_destroy( self )
end

function heli_binder:net_save_relevant()
	return true
end

function heli_binder:save( packet )
	object_binder.save( self, packet )

	xr_logic.save_obj( self.object, packet )

	self.st.combat:save( packet )
end

function heli_binder:load( packet )
	self.loaded = true

	object_binder.load( self, packet )

	xr_logic.load_obj( self.object, packet )

	self.st.combat:load( packet )
end

function heli_binder:check_health()
	local heli = self.heliObject

	if not heli.m_dead then
		local health = get_heli_health( self.heliObject, self.st )

		if health < self.flame_start_health and not heli.m_flame_started then
			heli_start_flame( self.object )

			heli_snd.play_snd( self.st, heli_snd.snd_damaged, 3 )
		end

		if not self.st.immortal then
			if health <= 0.005 then
				heli_die( self.object )
				heli_snd.play_snd( self.st, heli_snd.snd_down, 4 )
			elseif heli.m_flame_started and self.object:position():distance_to(db_actor:position()) > 150 then
				heli_die( self.object )
			end
		end
	end
end

------------------------------ callbacks ---------------------------------
function heli_binder:on_hit( power, impulse, hit_type, enemy_id )
	local enemy        = level.object_by_id( enemy_id )
	if enemy then
		-- если обидчик актёр или сталкер, то сделать его своим врагом
		if enemy:is_stalker() then
			if self.st.hit then
				xr_logic.issue_event( self.object, self.st.hit, "hit_callback", self.object, power, nil, enemy, nil )
			end
			xr_logic.pstor_store(self.object, "last_hit",  enemy:id())
		end
	end

	-- пилоты ругаются по рации
	if self.last_hit_snd_timeout < time_global() then
		heli_snd.play_snd( self.st, heli_snd.snd_hit, 2 )
		self.last_hit_snd_timeout = time_global() + math.random( 4000, 8000 )
	end
end

function heli_binder:on_point( distance, position, path_idx )
	if self.st.active_section ~= nil then
		xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "waypoint_callback", self.object, nil, path_idx )
	end
end

--------------------------------------------------------------------------
function get_heli_health( heli, st )
	local health

	if st.invulnerable then
		health = 1
		heli:SetfHealth( health )
	else
		health = heli:GetfHealth()

		if health < 0 then
			heli:SetfHealth( 0 )
			health = 0
		end
	end

	return health
end

function is_heli_alive( obj )
	return get_heli_health( obj:get_helicopter(), db.storage[obj:id()] ) > 0.005
end

function heli_start_flame( obj )
	obj:get_helicopter():StartFlame()

	db.storage[obj:id()].flame_start_snd:play_at_pos( obj, obj:position() )

	news_main.on_heli_flame(obj)
end

function heli_die( obj )
	local heli = obj:get_helicopter()
	local st   = db.storage[obj:id()]

	heli:Die()

	db.del_heli( obj )
	if xr_logic.pstor_retrieve(obj, "last_hit", -1, true) == 0 then
		xr_statistic.addKillCount(obj)
	end

	st.last_alt       = heli:GetRealAltitude()
	st.alt_check_time = time_global() + 1000

	news_main.on_heli_die(obj)
end
