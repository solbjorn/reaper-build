--[[-----------------------------------------------------------------------------------------------
 File         : sa_hud_animations_mgr.script
 Description  : Дополнительные анимации худа
 Copyright    : Shadows Addon
 Author       : Ray Twitty aka Shadows
 Date         : 17.12.2012
 Last edit    : 06.03.2023
---------------------------------------------------------------------------------------------------
 * Описание возможностей
 - анимация ходьбы (moving)
 - автоматическое изменение размера текстуры снайперского прицела под любое разрешение экрана
 - управление эффектом динамической глубины резкости
 - исправление сброса анимации при попытках: включить подствольник, стрелять, перезаряжаться
 - скрытие патронов у дробовиков после стрельбы и перезарядки (параметр cartridge_bone)
--]]-----------------------------------------------------------------------------------------------
local hud_animations_mgr
---------------------------------------------------------------------------------------------------
local force_dof_states = { }
for i, state in ipairs({ "reload", "showing", "hiding", "switch" }) do
	force_dof_states[weapon_states[state]] = true
end
---------------------------------------------------------------------------------------------------
local force_dof_mstates = { }
for i, state in ipairs({ "showing", "hiding", "playing" }) do
	force_dof_mstates[missile_states[state]] = true
end
--[[-----------------------------------------------------------------------------------------------
 * CONSTANTS
--]]-----------------------------------------------------------------------------------------------
local MAX_ANIM_COUNT = 8
--[[-----------------------------------------------------------------------------------------------
 * HUD ANIMATIONS MANAGER
--]]-----------------------------------------------------------------------------------------------
class "CHudAnimationsMgr"
function CHudAnimationsMgr:__init()
	self.last_item_id = 0
	self.last_state = -1
	self:init_scope_texture()
	self:reset_animation()
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:update()
	self.item = db_actor:active_item()
	if self.item then
		self.item_id = self.item:id()
		self.current_state = self.item:get_hud_item_state()
		if self.last_item_id ~= self.item_id then
			self:update_item_data()
			self:reset_animation()
			self.last_item_id = self.item_id
		end
		-- draw scope texture
		if self.item:is_weapon() and get_weapon_data(self.item, "scope_enabled") then
			self:show_scope_texture(actor_flags.scope_zoom_mode and get_weapon_data(self.item, "zoom_rotation_factor") == 1 and get_actor_data("camera_type") == EActorCameras.eacFirstEye)
		end
		-- animation selector
		if self:is_idle_state() then
			self:idle_animation()
		else
			self:reset_animation()
		end
		if self.last_state ~= self.current_state then
			-- shotgun shell fix
			if self.item:is_weapon_shotgun() and self.cartridge_bone then
				if self.current_state == weapon_states.fire or self.current_state == weapon_states.reload then
					self.item:set_hud_bone_visible(self.cartridge_bone, 1)
				else
					self.item:set_hud_bone_visible(self.cartridge_bone, 0)
				end
			end
			self.last_state = self.current_state
		end
	else
		self:show_scope_texture(false)
		self.last_item_id = 0
	end
	-- DoF control
	self:dof_control()
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:idle_animation()
	if self.animation ~= "kick" then
		if db_actor:is_actor_running() or db_actor:is_actor_walking() or db_actor:is_actor_crouching() then
			if self.animation ~= "moving" then
				if not self:play_hud_animation(self:get_type_animation("moving")) then
					self:play_hud_animation(self:get_type_animation("idle"))
				end
				self.animation = "moving"
			end
		elseif db_actor:is_actor_sprinting() then
			if self.animation ~= "sprint" then
				if not self:play_hud_animation(self:get_type_animation("sprint")) and
				   not self:play_hud_animation(self:get_type_animation("moving")) then
					self:play_hud_animation(self:get_type_animation("idle"))
				end
				self.animation = "sprint"
			end
		else
			if self.animation ~= "idle" then
				self:play_hud_animation(self:get_type_animation("idle"))
				self.animation = "idle"
			end
		end
	end
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:get_type_animation(state)
	if self.item:is_weapon_gl() then
		if get_weapon_data(self.item, "grenade_mode") then
			if state == "idle" then
				return "anim_idle_g"
			elseif state == "moving" then
				return "anim_idle_g_moving"
			elseif state == "kick" then
				return "anim_kick_g"
			end
		elseif get_weapon_data(self.item, "is_attached_grenade_launcher") or read_line(self.section, "grenade_launcher_status") == 1 then
			if state == "idle" then
				return "anim_idle_gl"
			elseif state == "moving" then
				return "anim_idle_gl_moving"
			elseif state == "kick" then
				return "anim_kick_gl"
			end
		end
	elseif self.item:is_weapon_pistol() and self:is_mag_empty() then
		if state == "idle" then
			return "anim_empty"
		elseif state == "moving" then
			return "anim_idle_moving_empty"
		elseif state == "kick" then
			return "anim_kick_empty"
		end
	elseif self.item:clsid() == clsid.wpn_bm16_s then
		local mag_size = self.item:get_ammo_in_magazine()
		if mag_size == 1 then
			if state == "idle" then
				return "anim_idle_1"
			elseif state == "moving" then
				return "anim_idle_moving_1"
			end
		elseif mag_size == 2 then
			if state == "idle" then
				return "anim_idle_2"
			elseif state == "moving" then
				return "anim_idle_moving_2"
			end
		end
	end
	if state == "idle" then
		return "anim_idle"
	elseif state == "moving" then
		return "anim_idle_moving"
	elseif state == "sprint" then
		return "anim_idle_sprint"
	elseif state == "kick" then
		return "anim_kick"
	end
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:play_hud_animation(anim_type)
	if anim_type and config:line_exist(self.hud_section, anim_type) then
		local anim_name = config:r_string(self.hud_section, anim_type)
		local animations_list = self:fill_animations_list(anim_name)
		if #animations_list > 0 then
			anim_name = table.random(animations_list)
			if self.anim_name ~= anim_name then
				self.item:play_hud_animation(anim_name, true)
				self.anim_name = anim_name
			end
			return true
		end
	end
	return false
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:update_item_data()
	self.section = self.item:section()
	self.hud_section = get_hud_data(self.item, "hud_section")
	self.cartridge_bone = read_line(self.hud_section, "cartridge_bone", "string")
	if self.item:is_weapon() and get_weapon_data(self.item, "scope_enabled") then
		if read_line(self.section, "scope_status") == 1 then
			self.scope_texture = read_line(self.section, "scope_texture", "string")
		else
			self.scope_texture = read_line(get_weapon_data(self.item, "scope_name"), "scope_texture", "string")
		end
		if self.st_scope_l then
			self.st_scope_l:InitTexture(self.scope_texture)
			self.st_scope_l:SetOriginalRect(0, 0, 1, 1)
		end
		if self.st_scope_r then
			self.st_scope_r:InitTexture(self.scope_texture)
			self.st_scope_r:SetOriginalRect(0, 0, 1, 1)
		end
		self.st_scope:InitTexture(self.scope_texture)
	end
	self:show_scope_texture(false)
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:init_scope_texture()
	local width = 1024 * (screen.height / screen.width) * 1.6
	local offset = (1024 - width) / 2
	if offset > 0 then
		-- scope left static
		self.st_scope_l = CUIStatic()
		self.st_scope_l:Init(0, 0, offset, 768)
		self.st_scope_l:SetStretchTexture(true)
		hud:AddDialogToRender(self.st_scope_l)
		-- scope right static
		self.st_scope_r = CUIStatic()
		self.st_scope_r:Init(width + offset, 0, offset + 1, 768)
		self.st_scope_r:SetStretchTexture(true)
		hud:AddDialogToRender(self.st_scope_r)
	end
	-- scope center static
	self.st_scope = CUIStatic()
	self.st_scope:Init(offset, 0, width, 768)
	self.st_scope:SetStretchTexture(true)
	hud:AddDialogToRender(self.st_scope)
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:show_scope_texture(status)
	if self.st_scope_l then
		self.st_scope_l:Show(status)
	end
	if self.st_scope_r then
		self.st_scope_r:Show(status)
	end
	self.st_scope:Show(status)
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:clear_scope_texture()
	if self.st_scope_l then
		hud:RemoveDialogToRender(self.st_scope_l)
	end
	if self.st_scope_r then
		hud:RemoveDialogToRender(self.st_scope_r)
	end
	hud:RemoveDialogToRender(self.st_scope)
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:dof_control()
	local value = "0"
	if self.item and get_actor_data("camera_type") ~= EActorCameras.eacFreeLook then
		if get_actor_data("zoom_mode") then
			value = "0.25"
		else
			if self.item:is_weapon() then
				force = force_dof_states[self.current_state]
			else
				force = force_dof_mstates[self.current_state]
			end
			if force then
				value = "0.15"
			end
		end
	end
	if self.dof_value ~= value then
		console:execute("r2_aa_weight 0.25,0.25,"..value)
		self.dof_value = value
	end
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:fill_animations_list(anim_name)
	local animations_list = {}
	if anim_name then
		table.insert(animations_list, anim_name)
		for i = 2, MAX_ANIM_COUNT do
			if self.item:has_hud_animation(anim_name..i) then
				table.insert(animations_list, anim_name..i)
			end
		end
	end
	return animations_list
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:is_idle_state()
	if not get_actor_data("zoom_mode") then
		if self.item:is_weapon() then
			return self.current_state == weapon_states.idle
		else
			return self.current_state == missile_states.idle
		end
	end
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:is_mag_empty()
	return self.item:get_ammo_in_magazine() == 0
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:reset_animation()
	self.animation = ""
end
---------------------------------------------------------------------------------------------------
function CHudAnimationsMgr:on_keyboard(dik, keyboard_action)
	if self.item and self.item:is_weapon() then
		if keyboard_action == key_events.pressed then
			if dik == bind_to_dik(key_bindings.kWPN_RELOAD) then
				if self.item:get_ammo_in_magazine() ~= get_weapon_data(self.item, "mag_size") then
					self:reset_animation()
				end
			elseif dik == bind_to_dik(key_bindings.kUSE) then
				local target_obj = level.get_target_obj()
				if target_obj and target_obj:is_holder() then
					self:reset_animation()
				end
			end
		elseif keyboard_action == key_events.released then
			if dik == bind_to_dik(key_bindings.kWPN_FIRE) then
				if self:is_mag_empty() then
					self:reset_animation()
				end
			elseif dik == bind_to_dik(key_bindings.kWPN_FUNC) then
				if read_line(self.section, "grenade_launcher_status") == 2 and not get_weapon_data(self.item, "is_attached_grenade_launcher") then
					self:reset_animation()
				end
			end
		end
	end
end
--[[-----------------------------------------------------------------------------------------------
 * INIT
--]]-----------------------------------------------------------------------------------------------
function get_hud_animations_mgr()
	if not hud_animations_mgr then
		hud_animations_mgr = CHudAnimationsMgr()
	end
	return hud_animations_mgr
end
