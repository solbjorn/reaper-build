-- Сбор информации о том, какие сталкеры и в каком количестве обитают в симуляции

function getNpcType(npc)
	if not npc then return end
	local cls = npc:clsid()

	if cls == clsid.script_stalker then
		local community = npc:community()
		
		local rank = ranks.get_obj_rank_name(npc)
		return community, rank
	else
		local community = xr_statistic.monster_classes[cls]

		local rank = ranks.get_obj_rank_name(npc)
		return community, rank
	end
end

--' Статистика респавнеров
local reg_objects_respawn = {}
function register_respawn(obj)
	--' Не отбражать респавнеры с событийным спауном
	if obj.item_spawn ~= false then
		return
	end
	local section = tostring(obj:name()).."\\n"..obj.str_conditions .."\\n\\n"
	local spawn_list = ""
	for k,v in pairs(obj.respawn_section) do
		local spawn_prob = v.section .. "=" .. v.prob .. " "
		spawn_list = spawn_list .. spawn_prob
	end
	section = section .. spawn_list .. "\\n"
	reg_objects_respawn[obj.id] = {section = section, enabled = false, max_count = obj.max_count, count = 0}
end
function unregister_respawn(obj)
	reg_objects_respawn[obj.id] = nil
end
function respawn_enabled(obj, enabled)
	if obj.item_spawn ~= false then
		return
	end
	local gg = #obj.spawned_obj
	if reg_objects_respawn[obj.id].enabled == enabled and
	   reg_objects_respawn[obj.id].count == gg
	then
		return
	end
	reg_objects_respawn[obj.id].enabled = enabled
	reg_objects_respawn[obj.id].count = gg
end
