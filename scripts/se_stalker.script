--[[
Изменения script_version:
  3 - сохранение поля job_online
  5 - сохранение поля was_in_smart_terrain
  6 - сохранение поля death_droped
]]

local no_ranks_comm = table.tohash({ "arena_enemy", "military", "monolith", "zombied" })

class "se_stalker"  (cse_alife_human_stalker)
--------------------
function se_stalker:__init (section) super (section)
  self.ini = nil
  self.ini_initialized = false

  self.smart_terrain_conditions = nil
  self.smart_terrain_conditions_initialized = false

  -- этот флаг берётся из работы смарта
  -- true     = всегда в онлайне
  -- false    = всегда в офлайне
  -- condlist = условие, которое отпределяет true или false
  -- nil      = смарту всё равно
  self.job_online          = nil
  self.job_online_condlist = nil

  -- посещал ли сталкер хоть один smart_terrain
  self.was_in_smart_terrain = false

  self.death_droped = false --'Генерил ли персонаж выпадаемые предметы или нет.

  --' Test for dima
  self.dont_spawn_online = false

	--' Вызывался ли генератор ссылок на тайники.
	self.treasure_processed = false

	-- включенность фонаря в момент смерти
	self.death_light = false

	-- Trade
	self.resupply_time = 0
end
--------------------
function se_stalker:get_ini()
  if not self.ini_initialized then
    self.ini             = self:spawn_ini ()
    self.ini_initialized = true

    if self.ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(self.ini:r_string("spawner", "cond"))
			self.spawner = reap_misc.cached_condlist(self.spawner, 1000)
    end
  end
end
--------------------
function se_stalker:get_job_online()
  if self.job_online_condlist == nil then
    return self.job_online
  else
		return self.job_online:pick_section_from_condlist(self) ~= nil
  end
end
--------------------
function se_stalker:can_switch_offline ()
  if amk.convert_npc[self.id]==true then
    return true
  end

	local job = self:get_job_online()
	if job == false then
		return true
	else
    return cse_alife_human_stalker.can_switch_offline (self)
  end
end
--------------------
function se_stalker:can_switch_online ()
  if amk.convert_npc[self.id]==true then
    return false
  end
  if self.dont_spawn_online == true then
    return false
  end

	local job = self:get_job_online()
	if job == false then
		return false
	end

  if self.ini == nil or self.spawner == nil then
    return cse_alife_human_stalker.can_switch_online(self)
  end

    if Actor ~= nil and Actor:alive () == false then
    return self.online
    end

  if self.online == false then
		return self.spawner:pick_section_from_condlist(self) ~= nil and
		       cse_alife_human_stalker.can_switch_online(self)
  else
		return self.spawner:pick_section_from_condlist(self) ~= nil
  end
end
--------------------
function se_stalker:STATE_Write (packet)
  cse_alife_human_stalker.STATE_Write (self, packet)

  if self.job_online == true then
    packet:w_u8(0)
  elseif self.job_online == false then
    packet:w_u8(1)
  elseif self.job_online == nil then
    packet:w_u8(2)
  else
    packet:w_u8(3)
    packet:w_stringZ(self.job_online_condlist)
  end

  packet:w_bool(self.was_in_smart_terrain)

  -- Запишем состояние раненности.
	local flags = 0
	if self.death_droped then flags = bit_or(flags, 1) end
	if self.wounded then flags = bit_or(flags, 2) end
	if self.treasure_processed then flags = bit_or(flags, 4) end
	if self.death_light then flags = bit_or(flags, 8) end
	if self.resupply_time ~= 0 then flags = bit_or(flags, 16) end
	packet:w_u8(flags)

	if self.resupply_time ~= 0 then
		packet:w_s16(self.resupply_time - game.hours())
	end
end
--------------------
function se_stalker:STATE_Read (packet, size)
  cse_alife_human_stalker.STATE_Read (self, packet, size)

	local t = packet:r_u8()
	t=bit_and(t,3) -- Задел на будущее
	if t == 0 then
		self.job_online = true
	elseif t == 1 then
		self.job_online = false
	elseif t == 2 then
		self.job_online = nil
	else
		self.job_online_condlist = packet:r_stringZ()

		self.job_online = xr_logic.parse_condlist(self.job_online_condlist)
		self.job_online = reap_misc.cached_condlist(self.job_online, 1000)
	end

	self.was_in_smart_terrain = packet:r_bool()

  -- Прочитаем состояние раненности.
	local flags = packet:r_u8()
	self.death_droped = bit_and(flags, 1) ~= 0
	self.wounded = bit_and(flags, 2) ~= 0
	self.treasure_processed = bit_and(flags, 4) ~= 0
	self.death_light = bit_and(flags, 8) ~= 0

	if bit_and(flags, 16) ~= 0 then
		self.resupply_time = game.hours() + packet:r_s16()
	end
end
--------------------
function se_stalker:on_before_register()
  self:fill_exclusives()
end
--------------------
function se_stalker:on_register()
	-- Чистим рестрикторы
	local tbl=amk.read_stalker_params(self)
	tbl.crvu32u16u2={}
	amk.write_stalker_params(tbl,self)

  cse_alife_human_stalker.on_register( self )

	if not no_ranks_comm[self:community()] then
		actor_stats.add_to_ranking(self.id)
	end

	--' Регистрация в таскменеджере
	random_task:register_stalker(self)

	if self:alive() and self:smart_terrain_id() == 65535 then
		self:brain():update()
	end
	-- dsh: Принудительно установим мобам flInteractive
	-- Есть подозрение, что те, у кого этот флаг сброшен, а таких полно в all.spawn, не обходят аномалии.
	AI:set_interactive( self, true )
end
--------------------
function se_stalker:on_unregister()
  cse_alife_human_stalker.on_unregister(self)

  smart_terrain.unregister_npc(self)

	--' Отрегистрация в таскменеджере
	random_task:unregister_stalker(self)

	if not no_ranks_comm[self:community()] then
		actor_stats.remove_from_ranking(self.id)
	end
end
--------------------
function se_stalker:on_spawn()
  cse_alife_human_stalker.on_spawn(self)
end
--------------------
function se_stalker:on_death(killer)
  cse_alife_human_stalker.on_death(self, killer)
end
--------------------
function se_stalker:fill_exclusives()
  self:get_ini()
  self.smart_terrain_conditions             = smart_terrain.read_smart_terrain_conditions( self )

  if self.smart_terrain_conditions then
    for name, condlist in pairs(self.smart_terrain_conditions) do
      smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
    end
  end
end

--'Торговец
class "se_trader" (cse_alife_trader)
function se_trader:__init (section) super (section)
	self.resupply_time = 0
end
function se_trader:keep_saved_data_anyway()
  return true
end

function se_trader:STATE_Write(packet)
	cse_alife_trader.STATE_Write(self, packet)

	if self.resupply_time ~= 0 then
		packet:w_s16(self.resupply_time - game.hours())
	end
end

function se_trader:STATE_Read(packet, size)
	cse_alife_trader.STATE_Read(self, packet, size)

	if not packet:r_eof() then
		self.resupply_time = game.hours() + packet:r_s16()
	end
end
