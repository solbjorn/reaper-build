local nagrad

function random_reward(level, count)
	if not nagrad then nagrad = linspiro.init_random("new_story") end
	level = "level_" .. level

	for i = 1, (count or 1) do
		got(table.fastrand(nagrad[level]))
	end
end

function prines_kopyto()
	return has("mutant_boar_leg", 30)
end
function otdal_kopyto()
	lost("mutant_boar_leg", 30)
	random_reward(2)
end

function prines_hvost()
	return has("mutant_dog_tail", 15)
end
function otdal_hvost()
	lost("mutant_dog_tail", 15)
	random_reward(1, math.random(3, 4))
end

function add_man()
	local obj=amk.spawn_item("mil_monolit_rush_respawn_1",vector():set(32.9309,-0.00135,197.588),1242,20400)
        local tbl = amk.read_stalker_params(obj)
        tbl.sid = 9498
        tbl.health = 0.2
	tbl.updhealth = 0.2
        amk.write_stalker_params(tbl, obj)
end

function metka_man()
level_tasks.add_location(507,"green_location","Раненый")
end

function voronin_flesh_have()
	return has("crazy_flash")
end

function voronin_flesh_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "crazy_flash", "out", 1)
	random_reward(4)
end

function fox_kriss_have(task, objective)
if Actor ~= nil then
return Actor:object("outfit_exo_m1_bast") ~= nil
end
return false
end

function fox_kriss_done(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "outfit_exo_m1_bast", "out")
dialogs.relocate_item_section(second_speaker, "arbalet_bad", "in")
end

function prapor_jaw_have(task, objective)
if Actor ~= nil then
return Actor:object("mutant_krovosos_jaw") ~= nil
end
return false
end

function prapor_jaw_done(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "mutant_krovosos_jaw", "out")
dialogs.relocate_item_section(second_speaker, "outfit_exo_m1", "in")
end

function informator_pda_have(task, objective)
if Actor ~= nil then
return Actor:object("bar_tiran_pda") ~= nil
end
return false
end

function informator_pda_done(first_speaker, second_speaker)
dialogs.relocate_item_section(second_speaker, "bar_tiran_pda", "out")
dialogs.relocate_item_section(second_speaker, "af_medusa", "in")
end

function pda_take(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "bar_tiran_pda", "in")
second_speaker:set_relation(game_object.friend, second_speaker)
end

function gavr_pda_have()
	return has("bar_lucky_pda")
end

function gavr_pda_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "bar_lucky_pda", "out", 1)
	random_reward(4)
end

function saharov_pda_have()
	return has("pda_priz")
end

function saharov_pda_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "pda_priz", "out", 1)
	random_reward(4)
end

function freeman_eagle_have()
	return has("wpn_desert_eagle_sk2_m1")
end

function freeman_eagle_done(first_speaker, second_speaker)
	transfer_good(first_speaker:id() == 0 and second_speaker or first_speaker, "wpn_desert_eagle_sk2_m1", "out")
	random_reward(2)
end

function ghange_set()
	local james_kodla = { 9608, 22067, 22068, 22069, 22070 }
	local npc
	for i = 1, #james_kodla do
		npc = level_story_object(james_kodla[i])
		if npc and npc:alive() then
			npc:set_character_community("killer", 0, 0)
		end
	end
end

function freeman_case_have()
	return has("case_freeman")
end

function freeman_case_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "case_freeman", "out", 1)
	random_reward(4)
end

function gavr_doc_have()
	return has("lab_x10_documents")
end

function gavr_doc_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "lab_x10_documents", "out", 1)
	random_reward(2)
end

function bland_flash_have()
	return has("bland_flash")
end

function bland_flash_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "bland_flash", "out", 1)
	random_reward(4)
end

function krov_kamen()
	return has("mutant_flesh_eye",5)
end

function otdal_kamen()
	lost("mutant_flesh_eye",5)
end

function nagrada_kamen()
	got("ammo_9x19_pbp",3)
end

function prines_gravi()
	return has("mutant_face_tushkano",15)
end

function otdal_gravi()
	lost("mutant_face_tushkano",15)
end

function nagrada_gravi()
	got("ammo_11.43x23_hydro",3)
end

function prines_ruki()
	return has("mutant_hand_kontroler",2)
end

function otdal_ruki()
	lost("mutant_hand_kontroler",2)
end

function nagrada_ruki()
	got("ammo_5.45x39_ap",5)
	got("vodka",2)
end

function dan_grab_have()
	return has("bad_psy_helmet")
end

function dan_grab_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "bad_psy_helmet", "out", 1)
	random_reward(4)
end

function yakut_help_have()
	return has("new_book")
end

function yakut_help_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "new_book", "out", 1)
	random_reward(2, math.random(3, 5))
end

function yakut_treasure_have()
	return has("notebook_new")
end

function yakut_treasure_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "notebook_new", "out")
	second_speaker:set_relation(game_object.friend, second_speaker)
end

function dan_flash_have()
	return has("nauch_flash")
end

function dan_flash_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "nauch_flash", "out")
	dialogs.relocate_item_section(first_speaker, "good_psy_helmet", "in")
end

function treasure_ecolog_have()
	return has("new_book_prizrak")
end

function treasure_ecolog_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "new_book_prizrak", "out", 1)
	random_reward(4, math.random(2, 3))
end

function barmen_simbion_have(task, objective)
if Actor ~= nil then
return Actor:object("af_simbion") ~= nil
end
return false
end

function barmen_simbion_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "af_simbion", "out")
end

function system_ecolog_have()
	return has("computer_new")
end

function system_ecolog_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "computer_new", "out", 1)
	random_reward(4, math.random(2, 3))
end

function prizrak_zver_have(task, objective)
if Actor ~= nil then
return Actor:object("sniper_flash") ~= nil
end
return false
end

function prizrak_zver_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "sniper_flash", "out")
	got("wpn_gauss_sk2_m1")
end

function prizrak_finalzver_have()
	return has("new_document_sniper")
end

function prizrak_finalzver_done(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "new_document_sniper", "out", 1)
	random_reward(4, math.random(2, 3))
end

function yakut_ograblen_have(task, objective)
if Actor ~= nil then
return Actor:object("inventory_new_box") ~= nil
end
return false
end

function yakut_ograblen_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "inventory_new_box", "out")
	got("ammo_5.56x45_ss190",5)
	got("antirad",3)
	got("medkit_army",4)
end

function helmet_est()
	return has("good_psy_helmet")
end

function helmet_otdal(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "good_psy_helmet", "out", 1)
	random_reward(2)
end

function left_arhara(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "device_torch", "in")
end

function atak_larger_done()
	random_reward(2)
end

function tri_kristal()
	return has("af_cristall",2)
end

function otdal_kristal()
	lost("af_cristall", 2)
	random_reward(6)
end

function prines_lomot()
	return has("af_mincer_meat",2)
end

function otdal_lomot()
	lost("af_mincer_meat", 2)
	random_reward(3)
end

function prines_odingrav()
	return has("af_gravi")
end

function otdal_odingrav()
	lost("af_gravi",1)
end

function nagrada_odingrav()
	got("medkit_scientic",3)
end

function zahar_naemnik_done()
	random_reward(1, math.random(3, 5))
end

function prapor_apt_have()
	return has("medkit_scientic",10)
end

function prapor_apt_done()
	lost("medkit_scientic",10)
end

function barrem_talk_have()
	return has("af_cry_2")
end

function vzal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "voen_pda", "in")
end

function otdal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "voen_pda", "out")
end

function prizrak_tainiy_have()
	return has("plan_document")
end

function prizrak_tainiy_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "plan_document", "out")
end

function gold_art_have()
	return has("gold_art",10)
end

function gold_art_done()
	lost("gold_art",10)
end

function tri_tainik_first()
	return has("new_prizrak_document1")
end

function tri_tainik_second()
	return has("new_prizrak_document2")
end

function tri_tainik_third()
	return has("new_prizrak_document3")
end

function tri_tainik_have()
	return has("new_prizrak_document1") and
	       has("new_prizrak_document2") and
	       has("new_prizrak_document3")
end

function tri_tainik_done()
	lost("new_prizrak_document1")
	lost("new_prizrak_document2")
	lost("new_prizrak_document3")
end

function create_sarkbunker_exit()
	-- создается переход c САРКОФАГА В ЛАБ Х-10
	give_info("level_newtri")
	-- создается переход из ЛАБ Х-10 в САРКОФАГ
	give_info("level_newtwo")
end

function create_sarchaes2_exit()
	-- создается переход c САРКОФАГА на ЧАЕС2
	give_info("level_newfive")
	-- создается переход c ЧАЕС2 в САРКОФАГ
	give_info("level_newfour")
end

function trade_dan_not_enough()
	return not trade_manager.trader_enough(story_ids.esc_dan)
end
function trade_dan_enough()
	return trade_manager.trader_enough(story_ids.esc_dan)
end
function trade_dan_count()
	trade_manager.trader_count(story_ids.esc_dan)
end
