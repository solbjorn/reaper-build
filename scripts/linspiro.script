--*************************************************************
--                               ТОРГОВЛЯ ТАЙНИКАМИ
--*************************************************************
function npc_relacion(npc,actor)
	local actor_, npc_
	if Actor and 0 ==npc:id() then
		actor_ = npc
		npc_ = actor
	else
		actor_ = actor
		npc_ = npc
	end
	local npc_community = npc_:character_community()
	local rel = actor:relation(npc)
	if rel == game_object.friend and npc_community == "stalker" then
		return true
	else
		return false
	end
end

function insert_custom_data(npc,actor)
	local actor_, npc_
	if Actor and 0 ==npc:id() then
		actor_ = npc
		npc_ = actor
	else
		actor_ = actor
		npc_ = npc
	end

	local id = npc_:id()
	local obj = AI:object(id)
	if (obj) then
		local t = amk.read_stalker_params(obj)
		local cd = amk.parse_custom_data(t.custom)
		if not cd.npc then
			cd.npc={}
		end
		if not cd.npc.vv then
			cd.npc.vv = 0
		end
		t.custom = amk.gen_custom_data(cd)
		amk.write_stalker_params(t, obj, true)
	end
end

function precond(npc, actor)
	local actor_, npc_
	if Actor and 0 ==npc:id() then
		actor_ = npc
		npc_ = actor
	else
		actor_ = actor
		npc_ = npc
	end

	local zz = true
	local id = npc_:id()
	local obj = AI:object(id)
	if (obj) then
		local t = amk.read_stalker_params(obj)
		local cd = amk.parse_custom_data(t.custom)
		if (cd.npc and cd.npc.vv and tonumber(cd.npc.vv) == 0) then
			zz = false
		end
	end
	return zz
end

function amk_options_2()
	if amk.load_variable("option_treasure", 0) == 2 then
	  return true
	else
      return false
	end
end

function amk_options_1()
	if amk.load_variable("option_treasure", 0) ~= 2 then
		return true
	else
		return false
	end
end

function actor_has_money_1()
	has_money(reap.with_discount(10000))
end

function actor_has_money_2()
	return has_money(reap.with_discount(30000))
end

function give_money_1()
	lost_money(reap.with_discount(10000))
end

function give_money_2()
	lost_money(reap.with_discount(30000))
end

--*************************************************************
--              ПЕТРЕНКО УСТРАИВАЕТ ВАМ ИСПЫТАНИЯ
--*************************************************************
function rank_get(npc, actor)
	local actor_, npc_
	if Actor and 0 ==npc:id() then
		actor_ = npc
		npc_ = actor
	else
		actor_ = actor
		npc_ = npc
	end

	if Actor:character_rank() > 300 then
		return false
	else
		return true
	end
end

function have_a_item(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_krovosos_jaw", 3) and
	       has("mutant_burer_hand", 3) and
	       has("mutant_psevdodog_tail", 3)
end

function out_item(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	lost("mutant_krovosos_jaw", 3)
	lost("mutant_burer_hand", 3)
	lost("mutant_psevdodog_tail", 3)
end
--Воронин
function enter_to_dolg(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "dolg_black_exoskeleton", "in")
	dialogs.relocate_item_section(trader, "wpn_groza", "in")
	got("ammo_9x39_ap", 10)
end
function spawn_bar()
	--Снайпер долговец на вышке
	local obj = AI:create("bar_dolg_respawn_3",vector():set(184.15, 8.37, 96.34),45473,1186)
	local params=amk.read_stalker_params(obj)
	params.custom="[logic]\nactive=camper\n[camper]\nsniper = true\npath_walk = bar_linspiro_sniper_camper1_path\npath_look = bar_linspiro_sniper_camper1_look1"
	params.sid=48519
	amk.write_stalker_params(params,obj)
	--Ученный у петренка в халупе
	local obj = AI:create("ecolog_linspiro",vector():set(208.84, 0.43, 64.94),50694,1203)
	local params=amk.read_stalker_params(obj)
	params.custom="[logic]\nactive=walker\ntrade=trade\\trade_professor.ltx\n[walker]\npath_walk = bar_linspiro_nayk_walk1\npath_look = bar_linspiro_nayk_look1\ncombat_ignore_cond=always"
	params.sid = story_ids.bar_linspiro_ecolog
	amk.write_stalker_params(params,obj)
end
--*************************************************************
--                             ОТНОШЕНИЕ К СВОБОДЕ
--*************************************************************
local mods = {
	af_spirit_2	= true,
	af_cry_2	= true,
	af_babka_2	= true,
	af_pudd_2	= true,
	af_dik_2	= true,
	af_kol_2	= true,
	af_armor_2	= true
}

function have_mod(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	for k, v in pairs(mods) do
		if actor:object(k) then return true end
	end

	return false
end
function out_mod(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	for k, v in pairs(mods) do
		if actor:object(k) then
			dialogs.relocate_item_section(trader, k, "out")
			break
		end
	end

	relation_registry.set_community_goodwill ("freedom", actor, 1250)
end
--*************************************************************
--              ЧЛЕН ГРУППИРОВКИ ДОЛГ ПРИ ИСПОЛНЕНИИ
--*************************************************************
-- Петренко
local nagrad = {
  level_1 = {
  "af_spirit_4",
  "af_pudd_4",
  "af_dik_4",
  "af_kol_4",
  "af_armor_4"
 },
  level_2 = {
  "af_spirit_1",
  "af_babka_1",
  "af_pudd_1",
  "af_dik_1",
  "af_kol_1",
  "af_armor_1"
 },
  level_3 = {
  "af_fuzz_kolobok",
  "af_dummy_spring",
  "af_dummy_dummy",
  "af_dummy_battery",
  "af_dummy_pellicle",
  "af_dummy_glassbeads"
 },
  level_4 = {
  "ammo_9x39_ap",
  "ammo_9x39_sp5",
  "ammo_7.62x54_7h14"
 }
}
--КРОВОСОС
function krovosos(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_krovosos_jaw", 3)
end
function out_krovosos(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	lost("mutant_krovosos_jaw", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end
--БЮРЕР
function burer(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_burer_hand", 3)
end
function out_burer(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	lost("mutant_burer_hand", 3)
    dialogs.relocate_item_section(actor, item , "in")
end
--ПСЕВДОСОБАКИ
function psevdodog(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_psevdodog_tail", 3)
end
function out_psevdodog(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	lost("mutant_psevdodog_tail", 3)
    dialogs.relocate_item_section(actor, item , "in")
end
--ЗОМБИ
function zombie(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_zombie_hand", 3)
end
function out_zombie(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	lost("mutant_zombie_hand", 3)
    dialogs.relocate_item_section(actor, item , "in")
end
--СНОРКИ
function snork(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_snork_leg", 3)
end
function out_snork(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	lost("mutant_snork_leg", 3)
    dialogs.relocate_item_section(actor, item , "in")
end
--СОБАКИ
function dog(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_dog_tail", 3)
end
function out_dog(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,10)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	lost("mutant_dog_tail", 3)
	got(item, count)
end
--ПЛОТИ
function flesh(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_flesh_eye", 3)
end
function out_flesh(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,10)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	lost("mutant_flesh_eye", 3)
	got(item, count)
end
--КАБАНЫ
function boar(first_speaker, second_speaker)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end

	return has("mutant_boar_leg", 3)
end
function out_boar(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,10)
	local actor, trader
	if Actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	lost("mutant_boar_leg", 3)
	got(item, count)
end
