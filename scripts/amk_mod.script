--[[

File:  amk_mod .script
copyright © AMK TEAM 2007-2008

добавлена fenechka by TAG

--]]

local amk_g_start_timer = amk.g_start_timer
local amk_load_variable = amk.load_variable
local amk_save_variable = amk.save_variable
local amk_start_timer = amk.start_timer
local level_object_by_id = level.object_by_id
local math_floor = math.floor
local math_random = math.random
local string_find = string.find
local string_sub = string.sub

local gv,lv,w
in_hide=false
local sound_obj_right,sound_obj_left,snd_volume,snd_obj_eq
local sync_done=false
local dynlasthour

local weather_types = {
	l01_escape		= 0,
	l02_garbage		= 0,
	l03_agroprom		= 0,
	l03u_agr_underground	= 1,
	l04_darkvalley		= 0,
	l04u_labx18		= 1,
	l05_bar			= 0,
	l06_rostok		= 0,
	l07_military		= 0,
	l08_yantar		= 2,
	l08u_brainlab		= 1,
	l10_radar		= 0,
	l10u_bunker		= 1,
	l11_pripyat		= 0,
	l12_stancia		= 0,
	l12_stancia_2		= 0,
	l12u_control_monolith	= 1,
	l12u_sarcofag		= 1
}

local dynweather_types = {
	l01_escape		= "september",
	l02_garbage		= "october",
	l03_agroprom		= "september",
	l03u_agr_underground	= "september",
	l04_darkvalley		= "depressive",
	l04u_labx18		= "depressive",
	l05_bar			= "october",
	l06_rostok		= "october",
	l07_military		= "september",
	l08_yantar		= "mist",
	l08u_brainlab		= "mist",
	l10_radar		= "mist",
	l10u_bunker		= "mist",
	l11_pripyat		= "depressive",
	l12_stancia		= "depressive",
	l12_stancia_2		= "mist",
	l12u_control_monolith	= "mist",
	l12u_sarcofag		= "depressive"
}

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      QUEST_AF_STAR        **   **   **   **    **   **   **   **
--'*******************************************************************************
local points={
    {
        position={x=-24.2727108001709,y=-12.1660995483398,z=-100.200202941895},
        gv=0,
        lv=73868
        },
    {
        position={x=159.56,y=4.72,z=88.60},
        gv=155,
        lv=463808
        },
    {
        position={x=-4.11,y=2.90,z=108.09},
        gv=85,
        lv=272619
        }
}

function spawn_star(actor,npc,p1,p2)
    local a = points[math_random(#points)]
	AI:create("amk_af_night_star", vector():set(a.position.x,a.position.y,a.position.z), a.lv, a.gv)

	local m_where
	if news_main then
		m_where = news_main.get_point_description("l01_escape", vector():set(a.position.x,a.position.y,a.position.z))
	else
		m_where = "Здесь, на Кордоне"
	end
	Actor:give_talk_message(m_where.." скорее всего поискать стоит. Где-то там он, точно говорю.", "ui\\ui_iconstotal", Frect():set(0,0,10,10), "simple_answer_item")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **        FIRST_RUN          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
-- Эта функция вызывается первой. Онлайновые объекты недоступны! Actor недоступен!
function on_game_start()
	math.randomseed (device ():time_global ())
end

function first_run()
	if not has_info("storyline_actor_start") then
		amk_g_start_timer("gg_need_sleep",0,0,6)
		amk_g_start_timer("show_news",0,0,10)

		amk.spawn_item("amk_zapiska",vector():set(-126.96,-28.41,-379.12),27,125181)
		amk.spawn_item("amk_zapiska",vector():set(21.6,-3.94,-18.28),1140,5991)
		amk.spawn_item("amk_zapiska",vector():set(-126.92,23.27,-36.98),1543,7083)
		sak.add_new_lcitem()

		-- pri_space_restrictor_0011
		local obj = AI:story_object(830)
		if obj then
			AI:release(obj)
			AI:create(5877)
		end

		amk_anoms.pre_blow_off()
		amk_anoms.after_blow_on()

		spawn_military_btr()
		spawn_fuel()
	end
end
--'*******************************************************************************
--'   **   **   **   **   **    **   **   **        CHECK_SPAWN          **   **   **   **   **    **   **   **
--'*******************************************************************************

function get_weather(lname)
	return amk.cfg_get_string(ini_file("game_maps_single.ltx"), lname, "weathers", "default")
end

function get_weather_sect(lname)
	if weather_types[lname] == 1 then
		return get_weather(lname)
	elseif weather_types[lname] == 2 then
		return dynweather_types[lname] .. "_" .. get_weather(lname) .. get_moon_phase()
	end

	local dynw = amk_load_variable("dynweather", nil)
	if not dynw then
		return get_weather(lname)
	end

	return dynweather_types[lname].."_"..dynw
end

function check_spawn()
	amk_anoms.init()
	spawn_unspawned_respawners()
	if (news_main) then
		news_main.init()
	end
	if (amk_offline_alife) then
		amk_offline_alife.init()
	end
	if (amk_corpses) then
		amk_corpses.init()
	end
	if (amk_objects) then
		amk_objects.init()
	end

	--спавним аномалии
	--initial_spawn()
	local obj = AI:story_object(6000)
	if not obj then
		AI:create(6374)
		obj = AI:story_object(6000)
	end

	if amk_load_variable("freeplay",0)==1 then
		amk_save_variable("freeplay",2)
	elseif amk_load_variable("freeplay",0)==2 and (not has_alife_info("cit_fail_first_task")) then
		Actor:give_info_portion("cit_fail_first_task")
	end

	--level_changers section
	local lname = level.name()
	local sname = amk_load_variable("level_on_save","")

    if (amk_offline_alife) then
		amk_offline_alife.update_npc_tables()
	end
	if (amk_corpses) then
		amk_corpses.update_all_corpses()
	end
	if lname ~= sname and amk_objects then
		amk_objects.update()
	end

	-- Выдадим сообщения при переходе на уровень.
	if lname ~= sname and sname ~= "" then
		news_main.check_connection(lname, sname)
		amk_offline_alife.update_trade()
	end

	if sname=="l01_escape" and lname=="l04_darkvalley" then
		Actor:set_actor_position(vector():set(-44.38, 0.43, -541.47))
	end

	if lname ~= sname and sname ~= "" then
		reap_misc.rename_autosave(sname, lname)
	end

	w = get_weather_sect(lname)
	if amk_load_variable("blowout",0)>0 then amk_save_variable("weather",level.get_weather()) end
	level.set_weather("amk_for_blow",true)
	game.start_tutorial("restore_sun")

	if amk_load_variable("blowout",0)>0 and amk_load_variable("blowout",0)<4 then
		local bt=blowout_type()
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		if bt<1 then
			level.set_weather("amk_for_blow",true)
			level.add_pp_effector("vibros.ppe", 2001, true)
			blowout_psy_sound("start")
		end
	end

	if Actor and not has_alife_info("game_over") then
		local flame = Actor:object("wpn_flame")
		if flame then
			Actor:iterate_inventory(
				function(dummy,item)
					if item:section()=="wpn_flame" then
						AI:release(AI:object(item:id()))
					end
				end
				,Actor)

		end
	end
end

function restore_sun()
  --update_anoms()
	--amk_anoms.init()
  if amk_load_variable("blowout",0)==0 then level.set_weather(w,true) end

	local lname = level.name()
	local sname = amk_load_variable("level_on_save","")
  amk_save_variable("level_on_save",lname)
  if sname=="l12_stancia_2" and lname=="l11_pripyat" then
		dream_:sleep(1)
  end

	if not has_info("storyline_actor_start") then
		start_blow_timer()
	end
	sync_done=true
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **         FREEPLAY           **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function freeplay()
	amk_save_variable("freeplay",1)

	local obj = AI:story_object(6001)
	if not obj then
		AI:create(5963)
	end

	for a=1,5 do
		amk_anoms.after_blow_on()
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      NEWS_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function show_news()
	news_main.on_news()

	if level.indoor() == false then -- Радиомолчание
		if math_random()>0.2 then
			if math_random()>0.875 then
				if amk_dolg and math_random()>0.5 then
					sound_object("device\\pda\\pda_news"):play(Actor, 0, sound_object.s2d)
					local dolg_news=amk_dolg.get_strings()
					Actor:give_game_news(dolg_news, "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
				elseif amk_freedom then
					sound_object("device\\pda\\pda_news"):play(Actor, 0, sound_object.s2d)
					local freedom_news=amk_freedom.get_strings()
					Actor:give_game_news(freedom_news, "ui\\ui_iconsTotal", Frect():set(498,94,83,47), 0, 15000)
				end
			end
		else
			if amk_uniq_news_lists and math_random()>0.5 then
				local uniq=amk_uniq_news_lists.get_strings()
				local name,sname = amk_names_lists.get_strings()
				amk.send_tip(uniq,name.." "..sname,nil,15,"uniq", "news")
			elseif amk_modders then
				sound_object("device\\pda\\pda_news"):play(Actor, 0, sound_object.s2d)
				local mod_news=amk_modders.get_strings()
				Actor:give_game_news(mod_news, "ui\\ui_iconsTotal", Frect():set(498,47,83,47), 0, 15000)
			end
		end
	end
	amk_g_start_timer("show_news",0,0,math_random(40,80))
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      SLEEP_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function reduce_need_sleep(time)
	local tmp=amk_load_variable("gg_need_sleep",0)
	tmp=tmp-time*120
	if tmp<0 then tmp=0 end
	amk_save_variable("gg_need_sleep_nrg",0)
	amk_save_variable("block_sleep_menu",0)
	amk_save_variable("gg_need_sleep",tmp)
	test_sleep_pp()
end

function test_for_need_sleep()
	if not actor_flags.sleep_state then
		amk_save_variable("gg_need_sleep",amk_load_variable("gg_need_sleep",0)+1)
		test_sleep_pp()
	end
	amk_g_start_timer("gg_need_sleep",0,0,6)
end

function test_sleep_pp()
	local tmp=amk_load_variable("gg_need_sleep",0)
	if tmp>360 then
		dream_:sleep(5+amk_load_variable("gg_need_sleep_nrg",0))
	end
	if tmp>300 then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, 5.0)
	else
		level.remove_pp_effector(999)
	end
end

function test_for_need_sleep_nrg()
	local n=amk_load_variable("gg_need_sleep_nrg",0)
	if n<3 then
		amk_save_variable("gg_need_sleep_nrg",n+1)
		amk_save_variable("gg_need_sleep",amk_load_variable("gg_need_sleep",0)-30+n*10)
		test_sleep_pp()
	end
	amk_g_start_timer("block_sleep_menu",0,1,0)
	amk_save_variable("block_sleep_menu",1)
end

function sleep_action()
	local enemy=false
	local actorPos = Actor:position()
	for npcId, obj in pairs(db.creatures) do
		if (( obj:is_stalker() and amk.get_npc_relation(obj,Actor)=="enemy" ) or obj:is_monster())
			and obj:position():distance_to(actorPos) < 40 and obj:see(Actor) then
			enemy=true
			break
		end
	end
	if enemy==true then
		amk.send_tip(game.translate_string("not_need_sleep_enemy"),nil,nil,5)
	else
		if amk_load_variable("blowout",-1)>-1 and amk_load_variable("blowout",-1)<5 then
			amk.send_tip(game.translate_string("blowout_not_sleep"),nil,nil,5)
		else
			if amk_load_variable("block_sleep_menu",0)==0 then
				if amk_load_variable("gg_need_sleep",0)>10 then
					local spwn=ui_cheat.cheat(get_hud())
					level.start_stop_menu(spwn,true)
				else
					amk.send_tip(game.translate_string("not_need_sleep"),nil,nil,5)
				end
			else
				amk.send_tip(game.translate_string("not_need_sleep_nrg"),nil,nil,5)
			end
		end
	end
end

function test_for_need_sleep_matras()
	sleep_action()
	amk.spawn_item_in_inv("matras")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      AF_TRANSFORM         **   **   **   **   **    **   **   **
--'*******************************************************************************
local cur_level=nil
local havegoodart=false

local afs={
	["af_ameba_mica"]		= true,
	["af_ameba_slime"]		= true,
	["af_ameba_slug"]		= true,
	["af_armor_1"]			= true,
	["af_armor_2"]			= true,
	["af_armor_3"]			= true,
	["af_babka_1"]			= true,
	["af_babka_2"]			= true,
	["af_blood"]			= true,
	["af_cristall"]			= true,
	["af_cristall_flower"]		= true,
	["af_cry_1"]			= true,
	["af_cry_2"]			= true,
	["af_dik_1"]			= true,
	["af_dik_2"]			= true,
	["af_dik_3"]			= true,
	["af_drops"]			= true,
	["af_dummy_battery"]		= true,
	["af_dummy_battery_red"]	= true,
	["af_dummy_dummy"]		= true,
	["af_dummy_glassbeads"]		= true,
	["af_dummy_pellicle"]		= true,
	["af_dummy_pellicle_red"]	= true,
	["af_dummy_spring"]		= true,
	["af_dummy_spring_red"]		= true,
	["af_electra_flash"]		= true,
	["af_electra_moonlight"]	= true,
	["af_electra_sparkler"]		= true,
	["af_fireball"]			= true,
	["af_fuzz_kolobok"]		= true,
	["af_gold_fish"]		= true,
	["af_gravi"]			= true,
	["af_kol_1"]			= true,
	["af_kol_2"]			= true,
	["af_kol_3"]			= true,
	["af_medusa"]			= true,
	["af_mincer_meat"]		= true,
	["af_night_star"]		= true,
	["af_pudd_1"]			= true,
	["af_pudd_2"]			= true,
	["af_pudd_3"]			= true,
	["af_rusty_kristall"]		= true,
	["af_rusty_sea-urchin"]		= true,
	["af_rusty_thorn"]		= true,
	["af_soul"]			= true,
	["af_spirit_1"]			= true,
	["af_spirit_2"]			= true,
	["af_spirit_3"]			= true,
	["af_vyvert"]			= true,
	["bandage"]			= true,
	["bread"]			= true,
	["conserva"]			= true,
	["energy_drink"]		= true,
	["kolbasa"]			= true,
	["mutant_boar_leg"]		= true,
	["mutant_dog_tail"]		= true,
	["mutant_face_tushkano"]	= true,
	["mutant_flesh_eye"]		= true,
	["mutant_krovosos_jaw"]		= true,
	["mutant_psevdodog_tail"]	= true,
	["mutant_snork_leg"]		= true,
	["vodka"]			= true
}

function check_for_af_drop(obj)
	if afs[obj:section()] == true then
		local id,pos,radius,dist=amk_anoms.get_nearest_anomaly(obj)
		if id and radius-dist>-2 then
			local anom_sect=level_object_by_id(id):section()
			check_af_transform(obj,id,anom_sect)
		end
	end
end

function check_af_transform(af,anom_id,anom_sect)
	local af_sect=af:section()
	local pos=af:position()
	gv=level_object_by_id(anom_id):game_vertex_id()
	lv=level_object_by_id(anom_id):level_vertex_id()
	if gv==65535 then gv=af:game_vertex_id() end
	if gv==65535 then gv=Actor:game_vertex_id() end
	if gv==65535 then return end
	local actor = Actor
	sak.artmodscheck(anom_id,af,anom_sect)
	--lv=Actor:level_vertex_id()
	if string_find(anom_sect,"_zharka")~=nil then
		if af_sect=="af_soul" and actor:has_info("info_amk_recipt_souls") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(70,25,af_sect,"af_spirit_1"), pos ,0,4,0,"Капля души")
		end
		if af_sect=="af_spirit_1" and actor:has_info("info_amk_recipt_souls") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(60,20,af_sect,"af_spirit_2"), pos ,0,6,0,"Огненная душа")
		end
		if af_sect=="af_spirit_2" and actor:has_info("info_amk_recipt_souls") and check_af_transform_rank(5) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(50,35,af_sect,"af_spirit_3"), pos ,0,10,0,"Кристальная душа")
		end
		if af_sect=="af_cry_1" and actor:has_info("info_amk_recipt_tears_fire") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(65,20,af_sect,"af_cry_2"), pos ,0,5,0,"Слёзы огня")
		end
		if af_sect=="af_rusty_sea-urchin" and actor:has_info("info_amk_recipt_dikoobraz") and check_af_transform_rank(2) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(65,20,af_sect,"af_dik_1"), pos ,0,3,0,"Дикобраз")
		end
		if af_sect=="af_kol_3" and actor:has_info("info_amk_recipt_giant_small_brother") and check_af_transform_rank(5) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(49,30,af_sect,"af_kol_4"), pos ,0,3,0,"Младший брат Гиганта")
		end
		if af_sect=="af_armor_3" and actor:has_info("info_amk_recipt_controller_skalp") and check_af_transform_rank(5) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(40,25,af_sect,"af_armor_4"), pos ,0,6,0,"Скальп контролёра")
		end
	end
	if string_find(anom_sect,"_galant")~=nil then
		if af_sect=="af_spirit_3" and actor:has_info("info_amk_recipt_souls") and check_af_transform_rank(5) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(50,30,af_sect,"af_spirit_4"), pos ,0,1,0,"Кристальная душа Бенгала")
		end
		if af_sect=="af_drops" and actor:has_info("info_amk_recipt_tears_electra") and check_af_transform_rank(2) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(75,10,af_sect,"af_cry_1"), pos ,0,5,0,"Слёзы Электры")
		end
		if af_sect=="af_dummy_glassbeads" and actor:has_info("info_amk_recipt_grandmother_glassbeards") and check_af_transform_rank(2) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(85,10,af_sect,"af_babka_1"), pos ,0,5,0,"Бабкины бусы")
		end
		if af_sect=="af_dummy_dummy" and actor:has_info("info_amk_recipt_dummy") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(70,25,af_sect,"af_pudd_1"), pos ,0,3,0,"Огненная пустышка")
		end
		if af_sect=="af_pudd_1" and actor:has_info("info_amk_recipt_dummy") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(59,20,af_sect,"af_pudd_2"), pos ,0,6,0,"Яркая пустышка")
		end
		if af_sect=="af_pudd_2" and actor:has_info("info_amk_recipt_dummy") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(50,35,af_sect,"af_pudd_3"), pos ,0,8,0,"Лунная пустышка")
		end
		if af_sect=="af_dik_1" and actor:has_info("info_amk_recipt_electra_dikoobraz") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(72,25,af_sect,"af_dik_2"), pos ,0,5,0,"Электрический дикобраз")
		end
	end
	if string_find(anom_sect,"_buzz")~=nil then
		if af_sect=="af_cry_2" and actor:has_info("info_amk_recipt_tears_chimaera") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(55,25,af_sect,"af_cry_3"), pos ,0,2,0,"Слёзы химеры")
		end
		if af_sect=="af_babka_1" and actor:has_info("info_amk_recipt_pra_grandmother_glassbeards") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(72,12,af_sect,"af_babka_2"), pos ,0,3,0,"Бусы прабабки")
		end
		if af_sect=="af_pudd_3" and actor:has_info("info_amk_recipt_dummy") and check_af_transform_rank(5) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(80,10,af_sect,"af_pudd_4"), pos ,0,12,0,"Пудинг")
		end
		if af_sect=="af_dik_2" and actor:has_info("info_amk_recipt_sopl_dikoobraz") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(74,10,af_sect,"af_dik_3"), pos ,0,2,0,"Сопливый дикобраз")
		end
		if af_sect=="af_kol_2" and actor:has_info("info_amk_recipt_almaz_kolobok") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(78,17,af_sect,"af_kol_3"), pos ,0,8,0,"Алмазный колобок")
		end
		if af_sect=="af_armor_2" and actor:has_info("info_amk_recipt_pancir") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(65,25,af_sect,"af_armor_3"), pos ,0,2,0,"Панцирь")
		end
		if af_sect=="af_medusa" or af_sect=="af_drops" or af_sect=="af_blood" or af_sect=="af_rusty_thorn" and actor:has_info("info_amk_recipt_simbion") then
			local s = get_value("af_simbion_activation", { aid = -1 })
			if s.aid~=anom_id then
				s.aid=anom_id
				s.koluchka=-1
				s.medusa=-1
				s.drop=-1
				s.blood=-1
			end
      if af_sect=="af_medusa" and s.medusa==-1 then
        s.medusa=af:id()
      end
      if af_sect=="af_drops" and s.drop==-1 then
        s.drop=af:id()
      end
      if af_sect=="af_rusty_thorn" and s.koluchka==-1 then
        s.koluchka=af:id()
      end
      if af_sect=="af_blood" and s.blood==-1 then
        s.blood=af:id()
      end
			if s.medusa~=-1 and s.drop~=-1 and s.koluchka~=-1 and s.blood~=-1 and check_af_transform_rank(2) then
				level.add_pp_effector("teleport.ppe", 1524, false)
				AI:release(AI:object(s.medusa), true)
				AI:release(AI:object(s.drop), true)
				AI:release(AI:object(s.koluchka), true)
				AI:release(AI:object(s.blood), true)
				amk.del_variable("af_simbion_activation")
				af_start_transform_timer(af_start_transform(75,25,"af_buliz","af_simbion") , pos ,0,5,0,"Симбион")
				return
			end
			set_value("af_simbion_activation", s)
		end
	end
	if string_find(anom_sect,"_mincer")~=nil then
		if af_sect=="af_babka_2" and actor:has_info("info_amk_recipt_burer_grandmother_glassbeards") and check_af_transform_rank(4) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(85,10,af_sect,"af_babka_3"), pos ,0,0,10,"Бусы бабки бюрера")
		end
		if af_sect=="af_kol_1" and actor:has_info("info_amk_recipt_titan_kolobok") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(55,35,af_sect,"af_kol_2"), pos ,0,5,0,"Титановый колобок")
		end
		if af_sect=="af_armor_1" and actor:has_info("info_amk_recipt_cheshya") and check_af_transform_rank(3) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(80,10,af_sect,"af_armor_2"), pos ,0,5,0,"Чешуя")
		end
	end
	if string_find(anom_sect,"_mosquito_bald")~=nil then
		if af_sect=="af_dik_3" and actor:has_info("info_amk_recipt_stone_dikoobraz") and check_af_transform_rank(5) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(50,28,af_sect,"af_dik_4"), pos ,0,9,0,"Каменный дикобраз")
		end
		if af_sect=="af_fuzz_kolobok" and actor:has_info("info_amk_recipt_steel_kolobok") and check_af_transform_rank(2) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(70,25,af_sect,"af_kol_1"), pos ,0,2,0,"Стальной колобок")
		end
		if af_sect=="af_dummy_pellicle" and actor:has_info("info_amk_recipt_shkura") and check_af_transform_rank(2) then
			af_flash(af)
			af_start_transform_timer(af_start_transform(70,25,af_sect,"af_armor_1"), pos ,0,5,0,"Шкура")
		end
	end
end

function af_flash(af)
	level.add_pp_effector("teleport.ppe", 1524, false)
	amk.remove_item(af)
end

function check_af_transform_rank(reqrank)
  if reqrank == 0 then
    return true
  end
  local res = has_alife_info("ecolog_freeplay_reward_task_"..reqrank.."_start")
  if not res then
    amk.send_tip(game.translate_string("ecolog_freeplay_transformation_"..reqrank))
  end
  return res
end

function af_start_transform(v1,v2,af_from,af_target)
-- adjust transformation probability according to the ecolog rank
	local artrank = freeplay_stats:get_found_artefacts_ranks()
	local vv1=(1.0-(1.0-v1/100)*(1.0-artrank/100))*100
	local vv2=v2 * (100 - artrank) * (100 - artrank) * (100 - artrank) / 1000000

	local rnd=math_random(0,100)
	if rnd>vv1 then
		if rnd>vv2+vv1 then
			return af_from
		else
			return "af_buliz"
		end
	else
		return af_target
	end
end

function af_start_transform_timer(af,pos,delay_d,delay_h,delay_m,af_sect)
	amk_g_start_timer("af_transform", delay_d, delay_h, delay_m, {
		pos = {
			x	= pos.x,
			y	= pos.y,
			z	= pos.z
		},
		section		= af,
		gv		= gv,
		lv		= lv,
		from_sect	= af_sect
	})
end

function af_transform_end(params)
	local from_sect="\""..params.from_sect.."\""
	local obj
	obj=amk.spawn_item(params.section,vector():set(params.pos.x,params.pos.y,params.pos.z),params.gv,params.lv)
	amk.add_spot_on_map(obj.id,"red_location",game.translate_string("trans_finished_title").."%c[255,255,0,0]"..from_sect)
	amk.send_tip(game.translate_string("trans_finished_title").."%c[255,255,0,0]"..from_sect)
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **    AMK_METKA     **   **   **   **   **    **   **   **   **
--'*******************************************************************************
local beakons={}
function check_beacon_drop(obj)
	if obj:section()=="amk_metka" then
		beakons[obj:id()]=true
	end
end

function check_metka()
	for id,v in pairs(beakons) do
		local obj=level_object_by_id(id)
		if obj then
			beakons[id]=nil
			if obj:parent()==nil then
				local spwn=ui_dots.dots(get_hud(),id)
				level.start_stop_menu(spwn,true)
			end
		end
	end
end

-- Динамическая музыка
local next_update=0
local inert = 1000
local clicks_prev = 200
local music_section=""
local music_previous_section=""
local music_next_section_start_time=0
local music_stop_previous=0
local music=false
local music_init = 0
local music_themes = {}
local music_phases={}
local musicflag=1
local music_objs={[1] = nil,[2] = nil}
local music_stor={ enemy_see_actor=0, actor_see_enemy=0, enemy_hit_actor=0, actor_hit_enemy=0 }
local music_lo_lvl=7
local music_hi_lvl=17
local music_graph = {}

function build_music_graph()
	local lvls = {
		lo	= music_lo_lvl,
		hi	= music_hi_lvl
	}
	local lname = level.name()
	local skip = false

	local sect = "music_themes"
	local sini = ini_file("scripts\\amk\\music.ltx")
	if sini:section_exist(sect) then
		local value1, tmp, t, tt
		sini:iterate_lines(sect, function(result, id, value)
			value1 = string.explode(value, "|", true)
			value = {}

			for k,v in pairs(value1) do
				tmp = string.explode(v, "=", true)
				value[tmp[1]] = tmp[2]
			end

			if value.map then
				t = string.explode(value.map, ",", true)
				for kk,vv in pairs(t)do
					skip = skip or vv == lname
				end
				skip = not skip
			else
				skip = false
			end

			if not skip then
				table.insert(music_themes, id)
				t = sini:key_value(id.."_music_files")
				t.null = ""
				for k,v in pairs(t) do
					music_phases[id.."_"..k]=v
					if not music_graph[id.."_"..k] then
						music_graph[id.."_"..k] = {}
					end
					tt = sini:key_value(id.."_graph_"..k)
					for kk,vv in pairs(tt) do
						tmp = string.explode(vv, ",", true)
						music_graph[id.."_"..k][id.."_"..kk] = {lvls[tmp[1]],tmp[2]}
					end
				end
			end
		end)

		if #music_themes > 0 then
			return true
		else
			return false
		end
	end

	return false
end

function music_start(sound)
	if get_value("option_mus", 1) == 0 then
		return
	end
	if not music then
		if music_objs[1] == nil then
			music_objs[1] = amk_music.amk_music()
		end
		if music_objs[2] == nil then
			music_objs[2] = amk_music.amk_music()
		end
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time = music_objs[musicflag]:play()-200
		music_previous_section = music_section
		musicflag = 3-musicflag
	end

	music = true
end

function music_change(sound)
	if music then
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time = music_objs[musicflag]:play_at_time(music_next_section_start_time+200)-200
		musicflag=3-musicflag music_previous_section=music_section
	end
end

function interactive_music()
	amk.oau_reason="music begin"

	if get_value("option_mus", 1) == 0 then
		if music then
			if music_objs[1] then music_objs[1]:stop() end
			if music_objs[2] then music_objs[2]:stop() end
		end
		return
	end
	if music_init == -1 then return end
	if music_init == 0 then
		if build_music_graph() then
			music_init = 1
		else
			music_init = -1
			return
		end
	end
	if not music then
		if next_update <= time_real_ms then
			music_select_section(inert)
			next_update = time_real_ms + inert
		end
	end
	if not music and music_previous_section == "" and music_section ~= "" then
		music_start(music_section)
	end
	if music and music_previous_section ~= "" and music_section == "" then
		music_previous_section = ""
	end
	if music then
		music_objs[1]:update()
		music_objs[2]:update()
		if time_real_ms > music_next_section_start_time then
			music_select_section(music_objs[musicflag]:length())
			if music_section ~= "" then
				music_change(music_section)
			else
				music = false
			end
		end
	end

	amk.oau_reason=""
end

function reset_music_cntrs(c)
	music_stor.actor_see_enemy = music_stor.actor_see_enemy-2*c
	music_stor.enemy_see_actor = music_stor.enemy_see_actor-2*c
	music_stor.actor_hit_enemy = music_stor.actor_hit_enemy-8*c
	music_stor.enemy_hit_actor = music_stor.enemy_hit_actor-4*c
	if music_stor.actor_see_enemy < 0 then
		music_stor.actor_see_enemy = 0
	elseif music_stor.actor_see_enemy > music_lo_lvl then
		music_stor.actor_see_enemy = music_lo_lvl
	end
	if music_stor.enemy_see_actor < 0 then
		music_stor.enemy_see_actor = 0
	elseif music_stor.enemy_see_actor > music_lo_lvl then
		music_stor.enemy_see_actor = music_lo_lvl
	end
	if music_stor.actor_hit_enemy < 0 then
		music_stor.actor_hit_enemy = 0
	elseif music_stor.actor_hit_enemy > music_hi_lvl then
		music_stor.actor_hit_enemy = music_hi_lvl
	end
	if music_stor.enemy_hit_actor < 0 then
		music_stor.enemy_hit_actor = 0
	elseif music_stor.enemy_hit_actor > music_hi_lvl then
		music_stor.enemy_hit_actor = music_hi_lvl
	end
end

local shoot_helper = 0

function calc_adrenaline(act,obj,typ)
	local dist = obj:position():distance_to(Actor:position())

	if act == "actor_see_enemy" then
		music_stor.actor_see_enemy = music_stor.actor_see_enemy+50/dist
	elseif act == "enemy_see_actor" then
		music_stor.enemy_see_actor = music_stor.enemy_see_actor+50/dist
	elseif act == "actor_hit_enemy" then
		if time_global() > shoot_helper then
			music_stor.actor_hit_enemy = music_stor.actor_hit_enemy+13
			shoot_helper = time_global()+500
		end
	elseif act == "enemy_hit_actor" then
		music_stor.enemy_hit_actor = music_stor.enemy_hit_actor+8
	end
end

function music_select_section(time)
	reset_music_cntrs(time/inert)

	local cs = music_section
	local eseen = music_stor.enemy_see_actor
	if eseen >= music_lo_lvl then
		eseen = music_lo_lvl
	end
	local aseen = music_stor.actor_see_enemy
	if aseen >= music_lo_lvl then
		aseen = music_lo_lvl
	end
	local ehits = music_stor.enemy_hit_actor
	if ehits >= music_hi_lvl then
		ehits = music_hi_lvl
	end
	local ahits = music_stor.actor_hit_enemy
	if ahits >= music_hi_lvl then
		ahits = music_hi_lvl
	end

	local lvl = aseen+eseen
	if lvl > music_hi_lvl*0.75 then
		lvl = music_hi_lvl*0.75
	end
	lvl = ehits+lvl+ahits

	if music_section == "" then
		music_section = table.random(music_themes).."_null"
	end

	local last_sel_max = 0
	local last_sel_min = 1000
	for k,v in pairs(music_graph[music_section]) do
		if v[2] == "<" and v[1] < last_sel_min then
			if v[1] > lvl then
				music_section=k
				last_sel_min=v[1]
			end
		end
		if v[2] == ">" and v[1] >= last_sel_max then
			if v[1] <= lvl then
				music_section = k
				last_sel_max = v[1]
			end
		end
	end

	if string_find(music_section,"null") then
		music_section = ""
	end
	if music and music_previous_section ~= "" and music_section == "" then
		music_previous_section = ""
	end

	local l = 0
	if music and music_objs[musicflag] ~= nil then
		l = music_objs[musicflag]:length()
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **      BLOWOUT        **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function blowout_phantoms()
	local blow=amk_load_variable("blowout",-1)
	if blow>1 and blow<4 and blowout_type()<2 then
	  local lname=level.name()
		if not in_hide and amk_hideouts.blowouts_phantoms[lname] then
			local phantoms=amk_hideouts.blowouts_phantoms[lname]
			if phantoms and phantoms.count>0 then
				if math_random()<phantoms.probability then
					if phantom_manager:phantom_count()<phantoms.count then
						local yaw	 			= math.pi*2.0*math_random()
						local radius 			= phantoms.radius*(math_random()/2.0+0.5)
						local height 			= phantoms.height*math_random()
						local a_pos 			= Actor:position()
						local pos 				= vector():set(math.sin(yaw)*radius+a_pos.x,a_pos.y+height,math.cos(yaw)*radius+a_pos.z)
						phantom_manager.spawn_phantom(pos)
					end
				end
			end
		end
	end
end

function blowout_scary_sounds()
	local blow=amk_load_variable("blowout",-1)
	if blow>0 and blow<4 then
		local snd_obj = xr_sound.get_safe_sound_object(amk_hideouts.blowout_sounds[math_random(#amk_hideouts.blowout_sounds)])
		local a=vector()
		a.x=math_random(0,10)
		a.y=math_random(0,10)
		a.z=math_random(0,10)
		snd_obj:play_at_pos(Actor, Actor:position():add(a))
		amk_start_timer("blowout_ss",math_random(10,30),0)
	end
end

function blowout_psy_sound(action)
	if action=="start" then
		snd_obj_eq = sound_object([[ambient\earthquake]],sound_object.looped+sound_object.s2d)
    snd_obj_eq:play(Actor, 4, sound_object.looped+sound_object.s2d)
	end
	if action == "stop" then
		if snd_obj_eq then snd_obj_eq:stop() end
	end

	local lname=level.name()
	if not amk_hideouts.blowouts_phantoms[lname] then return end
	local psy_sound=amk_hideouts.blowouts_phantoms[lname].psy_sounds or false
	if not psy_sound then return end

	if action=="start" then
		local level_vol=amk_hideouts.blowouts_phantoms[lname].level_vol or 1
		sound_obj_right, sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
		sound_obj_left:play_at_pos (Actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		sound_obj_right:play_at_pos(Actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		snd_volume	= level.get_snd_volume()
		level.set_snd_volume( level_vol )
	end
	if action == "stop" then
		if sound_obj_left then sound_obj_left:stop() end
		if sound_obj_right then sound_obj_right:stop() end
		if snd_volume then level.set_snd_volume(snd_volume) end
	end
end

function Run_Blowout_pp()
	local blow_enabled = system_ini():r_float("blowout_period","enabled")

	if blow_enabled>0 then
		local bt=blowout_type()
		if bt==2 and amk_load_variable("freeplay",0)~=2 then return end
		dream_:stopper()
		amk_save_variable("blowout",1)
		if bt<1 then
			level.add_pp_effector("monolith_off.ppe", 2003, false)
			level.add_cam_effector("camera_effects\\shell_shock.anm", 2004, false, "")
			play_safe_sound_object([[ambient\blowout]])
			local snd_obj = xr_sound.get_safe_sound_object([[ambient\organic_moan1]])
			snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		end
		amk_start_timer("blowout_ss",math_random(5,15),0)
		amk_start_timer("blowout",11,0)
	end
	start_blow_timer()
end

function start_blow_timer()
	local shift = system_ini():r_float("blowout_period","shift")
	shift = (math_random()*shift)-(shift/2)
	local t_time = system_ini():r_float("blowout_period","time")
	amk_g_start_timer( "blow_shift",0,0, t_time+shift )
	if (news_main and news_main.next_blow) then
		news_main.next_blow(t_time+shift)
	end
end

function Blowout_pp(phase)
---------------------------------------------------
--' TimeFactor = 5
--' GameMin = 12 RealSec
--' TimeBlowout = 184 RealSec

--' Начало (Timer = 36 sec)
--' Первая Фаза (Timer = 36 sec)
--' Вторая Фаза (Timer = 36 sec)
--' Третья Фаза (Timer = 36 sec)
--' Четвертая Фаза (Timer = 60 sec)
--' Конечная Фаза (Timer = 0 sec)
---------------------------------------------------

	local bt=blowout_type()

	if phase==0 then
		amk_anoms.pre_blow_off()
		if bt<1 then
			level.set_weather("pre_blow",true)
			level.set_weather_fx("amk_surge_day")
		end
		amk_g_start_timer("blowout", 0, 0, math_random(1, 4), 1)
	elseif phase==1 then
		local snd_obj = xr_sound.get_safe_sound_object([[ambient\earthquake]])
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		snd_obj = xr_sound.get_safe_sound_object([[anomaly\blowout]])
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		blowout_psy_sound("start")
		if bt<1 then
			level.add_pp_effector("vibros.ppe", 2001, true)
		end
		in_hide=false
		amk_g_start_timer("blowout", 0, 0, math_random(1, 4), 2)
		amk_save_variable("blowout",2)
	elseif phase==2 then
		amk_g_start_timer("blowout", 0, 0, math_random(1, 4), 3)
	elseif phase==3 then
		amk_anoms.after_blow_on()
		amk_anoms.off_testobj()
		amk_save_variable("blowout",3)
		local h = hit()
		local cr
		h.type = hit.strike
		h.power = 1000
		h.impulse = 1000
		for a=1,65534,1 do
			cr=level_object_by_id(a)
			if cr~=nil and cr:section()=="m_crow" and math_random(0,100)<70 then
				h.draftsman = cr
				h.direction = cr:direction()
				cr:hit(h)
			end
		end
		amk_g_start_timer("blowout", 0, 0, math_random(1, 4), 4)
	elseif phase==4 then
		amk_save_variable("blowout",4)
		level.remove_cam_effector(2002)
		if bt<1 then
			level.remove_pp_effector(2001)
			level.add_pp_effector("monolith_off.ppe", 2003, false)
		end
		blowout_psy_sound("stop")
		amk_start_timer("blowout",5,5)
	elseif phase==5 then
		level.set_weather(amk_load_variable("weather","default"))
		if bt<1 then
			local snd_obj = xr_sound.get_safe_sound_object([[anomaly\teleport_work2]])
			snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)

			local sect = "groza_groza_" .. level.get_time_hours() .. get_moon_phase()
			level.set_weather(dynweather_types[level.name()] .. "_" .. sect)
			amk_save_variable("dynw","groza")
			amk_save_variable("dynlasthour", level.get_time_hours())
			amk_save_variable("dynweather", sect)
		end
		amk.del_variable("blowout")
-- TAG --
		tag_spb.zombie_team()
	end
end

local next_actor_hit_time=0
function on_blowout_hit_actor(force)
	if force or next_actor_hit_time<time_global() then
		next_actor_hit_time=time_global()+1000
		on_blowout_hit(Actor)
	end
end

function blowout_khit(npc, hide)
	if not npc then npc = Actor end
	local need_hit=true
	local khit=1
	if hide and hide.zone then
		need_hit = not check_npc_in_hideout(npc,hide)
		if not need_hit then
			if hide.defence then
				khit=hide.defence
			else
				khit=0
			end
		end
	else
		local hides=amk_hideouts.hide[level.name()]
		local tmp
		if hides then
			for i,o in ipairs(hides) do
				if o.zone then
					for j,v in ipairs(o.zone) do
						if v.p3 then
							tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
						else
							tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
						end
						need_hit = need_hit and not tmp
						if tmp then
							if o.defence then
								khit=o.defence
							else
								khit=0
							end
						end
					end
				end
			end
		end
	end

	return need_hit, khit
end

function on_blowout_hit(npc,hide)
	local bt=blowout_type()
	if bt>0 or amk_load_variable("blowout",-1)~=3 then
    if npc:id()==0 then in_hide = true end
		return false
	end

	local need_hit, khit = blowout_khit(npc, hide)

    if npc:id()==0 then in_hide = not need_hit end
    if (need_hit or khit>0) and amk_load_variable("blowout",-1)==3 then
		local h = hit()
    	h.power = (amk_hideouts.blowout_damages[level.name()] or 0.01)*khit
    	h.impulse = 0
		h.draftsman = npc
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine") -- чтобы учитывалась броня
    	h.type = hit.strike
		npc:hit(h)
    	h.type = hit.telepatic
		npc:hit(h)
    	h.type = hit.radiation
		npc:hit(h)
    end
    return need_hit or khit>0
end

function check_npc_in_hideout(npc,hide)
	local not_in_zone=true
	if hide and hide.zone then
		for k,v in pairs(hide.zone) do
			if v.p3 then
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
			else
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
			end
		end
	end
	return not not_in_zone
end

function initial_spawn(action)
	local fr=0
	for i=0,amk_hideouts.anom_count-1,1 do
		local sobj = AI:story_object(amk_hideouts.anom_sid0+i)
		if not sobj then
			AI:create(i+amk_hideouts.anom_num0)
			fr=1
		end
	end
	if fr==1 then create_anoms() end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       ANOMS SPAWN        **   **   **   **   **    **   **   **
--'*******************************************************************************
anomalies_state={}

function remove_anoms()
	amk_save_variable("blowout_anoms",string.rep(string.char(128),math.ceil(amk_hideouts.anom_count/7)))
	update_anoms()
end

function create_anoms()
	anomalies_state={}
	for i=amk_hideouts.anom_sid0,amk_hideouts.anom_sid0+amk_hideouts.anom_count-1,1 do
		anomalies_state[i]=math_random(0,1)==1
	end
	local str=pack_anoms(anomalies_state)
	amk_save_variable("blowout_anoms",str)
	update_anoms()
end

function update_anoms()
	local anoms=amk_load_variable("blowout_anoms",string.rep(string.char(128),math.ceil(amk_hideouts.anom_count/7)))
	anomalies_state=unpack_anoms(anoms)
	for i=amk_hideouts.anom_sid0,amk_hideouts.anom_sid0+amk_hideouts.anom_count-1,1 do
		local sobj=AI:story_object(i)
		if sobj then
			local obj=level_object_by_id(sobj.id)
			if obj then
				if anomalies_state[i] then
					obj:enable_anomaly()
				else
					obj:disable_anomaly()
				end
			end
		end
    end
end

-- anom_state[sid]==true для активных аномалий
function pack_anoms(anom_state)
	local str=""
	for i=0,amk_hideouts.anom_count-1,7 do
		local cval=128
		local mul=1
		for j=0,6,1 do
			if anom_state[i+j+amk_hideouts.anom_sid0] then
				cval=cval+mul
			end
		mul=mul*2
		end
    str=str..string.char(cval)
	end
	return str
end

function unpack_anoms(str)
	local anom={}
	for i=1,string.len(str),1 do
		local cval=string.byte(string_sub(str,i,i))
		local mul=1
		for j=0,6,1 do
			anom[(i-1)*7+j+amk_hideouts.anom_sid0]=bit_and(mul,cval)~=0
			mul=mul*2
		end
	end
	return anom
end

function blowout_type()
	local lname=level.name()
	local t=amk_hideouts.blowout_types[lname]
	if t>1 and amk_load_variable("freeplay",0)==2 then t=0 end
	return t or 0
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **    **      RECEPTS       **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function check_usable_item(obj)
	local info=nil
	if obj:section()=="vehicle_btr" then
		Actor:kill(Actor)
	end
	if obj:name()=="mil_stalker0012" then
		info="info_amk_recipt_stone_dikoobraz"
	elseif level.name()=="l01_escape" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_shkura"
		amk.drop_item(Actor,obj)
		amk.remove_item(obj)
	elseif level.name()=="l04u_labx18" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_simbion"
		amk.drop_item(Actor,obj)
		amk.remove_item(obj)
	elseif level.name()=="l08u_brainlab" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_dummy"
		amk.drop_item(Actor,obj)
		amk.remove_item(obj)
	else
		local recipes = get_value("amk_body_recipe", { })
		info=recipes[obj:id()]
	end
	if Actor==nil or info==nil or Actor:has_info(info) then
		return
	end
	Actor:give_info_portion(info)
end

function generate_recipe(obj)
	if obj:is_monster() then
		return
	end
	local info=nil
	local prop=100
  if level.name()=="l07_military" and obj.character_community and
          obj:character_community()=="killer" then
		info="info_amk_recipt_titan_kolobok"
		prob=30
  elseif level.name()=="l10_radar" and obj.character_community and
          obj:character_community()=="monolith" then
		info="info_amk_recipt_controller_skalp"
		prob=10
	end
	if not info then return end
	local recipes = get_value("amk_body_recipe", { })
	-- Проверим не генерился ли уже этот рецепт
	for k,v in pairs(recipes) do
		if v==info then
			return
		end
	end
	-- Сгенерим рецепт
	if math_random(100)<=prob then
		recipes[obj:id()]=info
		set_value("amk_body_recipe", recipes)
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      OUTFIT_HUD        **   **   **   **   **    **   **   **   **
--'*******************************************************************************
local currhud
local curr_tex
local cur_weapon_fov

local hud_tbl={  	bandit_gaz_outfit_m1				= "hud_gaz",
		bandit_gaz_outfit_m1_bad 			= "hud_gaz",
		bandit_gaz_outfit_m1_plus 			= "hud_gaz",
		bandit_gaz_outfit_m1_badplus 			= "hud_gaz",
		broken_exoskeleton 				= "hud_exo",
		broken_exoskeleton_bad 			= "hud_exo",
		broken_exoskeleton_good 			= "hud_exo",
		broken_exoskeleton_default 			= "hud_exo",
		broken_exoskeleton_static 			= "hud_exo",
		broken_exoskeleton_kat_eye 			= "hud_exo",
		broken_exoskeleton_psy 			= "hud_exo",
		broken_exoskeleton_blackwhite 			= "hud_exo",
		broken_exoskeleton_bast 			= "hud_exo",
		broken_exoskeleton_plus 			= "hud_exo",
		broken_exoskeleton_badplus 			= "hud_exo",
		broken_exoskeleton_goodplus 			= "hud_exo",
		broken_exoskeleton_defaultplus 			= "hud_exo",
		broken_exoskeleton_staticplus 			= "hud_exo",
		broken_exoskeleton_kat_eyeplus 		= "hud_exo",
		broken_exoskeleton_psyplus 			= "hud_exo",
		broken_exoskeleton_blackwhiteplus 		= "hud_exo",
		broken_exoskeleton_bastplus 			= "hud_exo",
		dolg_black_exoskeleton 				= "hud_exo",
		dolg_black_exoskeleton_bad 			= "hud_exo",
		dolg_black_exoskeleton_good 			= "hud_exo",
		dolg_black_exoskeleton_default 			= "hud_exo",
		dolg_black_exoskeleton_static 			= "hud_exo",
		dolg_black_exoskeleton_kat_eye 		= "hud_exo",
		dolg_black_exoskeleton_psy 			= "hud_exo",
		dolg_black_exoskeleton_blackwhite 		= "hud_exo",
		dolg_black_exoskeleton_bast 			= "hud_exo",
		dolg_black_exoskeleton_plus 			= "hud_exo",
		dolg_black_exoskeleton_badplus 		= "hud_exo",
		dolg_black_exoskeleton_goodplus 		= "hud_exo",
		dolg_black_exoskeleton_defaultplus 		= "hud_exo",
		dolg_black_exoskeleton_staticplus 		= "hud_exo",
		dolg_black_exoskeleton_kat_eyeplus 		= "hud_exo",
		dolg_black_exoskeleton_psyplus 		= "hud_exo",
		dolg_black_exoskeleton_blackwhiteplus 		= "hud_exo",
		dolg_black_exoskeleton_bastplus 		= "hud_exo",
		dolg_gaz_outfit_m1 				= "hud_gaz",
		dolg_gaz_outfit_m1_bad 			= "hud_gaz",
		dolg_gaz_outfit_m1_good 			= "hud_gaz",
		dolg_gaz_outfit_m1_default 			= "hud_gaz",
		dolg_gaz_outfit_m1_static 			= "hud_gaz",
		dolg_gaz_outfit_m1_kat_eye 			= "hud_gaz",
		dolg_gaz_outfit_m1_psy 			= "hud_gaz",
		dolg_gaz_outfit_m1_blackwhite 			= "hud_gaz",
		dolg_gaz_outfit_m1_bast 			= "hud_gaz",
		dolg_gaz_outfit_m1_plus 			= "hud_gaz",
		dolg_gaz_outfit_m1_badplus 			= "hud_gaz",
		dolg_gaz_outfit_m1_goodplus 			= "hud_gaz",
		dolg_gaz_outfit_m1_defaultplus 			= "hud_gaz",
		dolg_gaz_outfit_m1_staticplus 			= "hud_gaz",
		dolg_gaz_outfit_m1_kat_eyeplus 		= "hud_gaz",
		dolg_gaz_outfit_m1_psyplus 			= "hud_gaz",
		dolg_gaz_outfit_m1_blackwhiteplus 		= "hud_gaz",
		dolg_gaz_outfit_m1_bastplus 			= "hud_gaz",
		dolg_scientific_outfit 				= "hud_sci",
		dolg_scientific_outfit_bad 			= "hud_sci",
		dolg_scientific_outfit_good 			= "hud_sci",
		dolg_scientific_outfit_default 			= "hud_sci",
		dolg_scientific_outfit_static 			= "hud_sci",
		dolg_scientific_outfit_kat_eye 			= "hud_sci",
		dolg_scientific_outfit_psy 			= "hud_sci",
		dolg_scientific_outfit_blackwhite 			= "hud_sci",
		dolg_scientific_outfit_bast 			= "hud_sci",
		dolg_scientific_outfit_plus 			= "hud_sci",
		dolg_scientific_outfit_badplus 			= "hud_sci",
		dolg_scientific_outfit_goodplus 			= "hud_sci",
		dolg_scientific_outfit_defaultplus 			= "hud_sci",
		dolg_scientific_outfit_staticplus 			= "hud_sci",
		dolg_scientific_outfit_kat_eyeplus 		= "hud_sci",
		dolg_scientific_outfit_psyplus 			= "hud_sci",
		dolg_scientific_outfit_blackwhiteplus 		= "hud_sci",
		dolg_scientific_outfit_bastplus 			= "hud_sci",
		ecolog_outfit 					= "hud_sci",
		ecolog_outfit_bad 				= "hud_sci",
		ecolog_outfit_good 				= "hud_sci",
		ecolog_outfit_default 				= "hud_sci",
		ecolog_outfit_static 				= "hud_sci",
		ecolog_outfit_kat_eye 				= "hud_sci",
		ecolog_outfit_psy 				= "hud_sci",
		ecolog_outfit_blackwhite 			= "hud_sci",
		ecolog_outfit_bast 				= "hud_sci",
		ecolog_outfit_plus 				= "hud_sci",
		ecolog_outfit_badplus 				= "hud_sci",
		ecolog_outfit_goodplus 				= "hud_sci",
		ecolog_outfit_defaultplus 			= "hud_sci",
		ecolog_outfit_staticplus 				= "hud_sci",
		ecolog_outfit_kat_eyeplus 			= "hud_sci",
		ecolog_outfit_psyplus 				= "hud_sci",
		ecolog_outfit_blackwhiteplus 			= "hud_sci",
		ecolog_outfit_bastplus 				= "hud_sci",
		exo_bandit_outfit 				= "hud_exo",
		exo_bandit_outfit_bad 				= "hud_exo",
		exo_bandit_outfit_good 				= "hud_exo",
		exo_bandit_outfit_default 			= "hud_exo",
		exo_bandit_outfit_static 				= "hud_exo",
		exo_bandit_outfit_kat_eye 			= "hud_exo",
		exo_bandit_outfit_psy 				= "hud_exo",
		exo_bandit_outfit_blackwhite 			= "hud_exo",
		exo_bandit_outfit_bast 				= "hud_exo",
		exo_bandit_outfit_plus 				= "hud_exo",
		exo_bandit_outfit_badplus 			= "hud_exo",
		exo_bandit_outfit_goodplus 			= "hud_exo",
		exo_bandit_outfit_defaultplus 			= "hud_exo",
		exo_bandit_outfit_staticplus 			= "hud_exo",
		exo_bandit_outfit_kat_eyeplus 			= "hud_exo",
		exo_bandit_outfit_psyplus 			= "hud_exo",
		exo_bandit_outfit_blackwhiteplus 		= "hud_exo",
		exo_bandit_outfit_bastplus 			= "hud_exo",
		exo_outfit 					= "hud_exo",
		exo_outfit_bad 					= "hud_exo",
		exo_outfit_good 					= "hud_exo",
		exo_outfit_default 				= "hud_exo",
		exo_outfit_static 				= "hud_exo",
		exo_outfit_kat_eye 				= "hud_exo",
		exo_outfit_psy 					= "hud_exo",
		exo_outfit_blackwhite 				= "hud_exo",
		exo_outfit_bast 					= "hud_exo",
		exo_outfit_plus 					= "hud_exo",
		exo_outfit_badplus 				= "hud_exo",
		exo_outfit_goodplus 				= "hud_exo",
		exo_outfit_defaultplus 				= "hud_exo",
		exo_outfit_staticplus 				= "hud_exo",
		exo_outfit_kat_eyeplus 				= "hud_exo",
		exo_outfit_psyplus 				= "hud_exo",
		exo_outfit_blackwhiteplus 			= "hud_exo",
		exo_outfit_bastplus 				= "hud_exo",
		freedom_scientific_outfit 				= "hud_sci",
		freedom_scientific_outfit_bad 			= "hud_sci",
		freedom_scientific_outfit_good 			= "hud_sci",
		freedom_scientific_outfit_default 			= "hud_sci",
		freedom_scientific_outfit_static 			= "hud_sci",
		freedom_scientific_outfit_kat_eye 		= "hud_sci",
		freedom_scientific_outfit_psy 			= "hud_sci",
		freedom_scientific_outfit_blackwhite 		= "hud_sci",
		freedom_scientific_outfit_bast 			= "hud_sci",
		freedom_scientific_outfit_plus 			= "hud_sci",
		freedom_scientific_outfit_badplus 		= "hud_sci",
		freedom_scientific_outfit_goodplus 		= "hud_sci",
		freedom_scientific_outfit_defaultplus 		= "hud_sci",
		freedom_scientific_outfit_staticplus 		= "hud_sci",
		freedom_scientific_outfit_kat_eyeplus 		= "hud_sci",
		freedom_scientific_outfit_psyplus 		= "hud_sci",
		freedom_scientific_outfit_blackwhiteplus 		= "hud_sci",
		freedom_scientific_outfit_bastplus 		= "hud_sci",
		killer_blue_exoskeleton 				= "hud_exo",
		killer_blue_exoskeleton_bad 			= "hud_exo",
		killer_blue_exoskeleton_good 			= "hud_exo",
		killer_blue_exoskeleton_default 			= "hud_exo",
		killer_blue_exoskeleton_static 			= "hud_exo",
		killer_blue_exoskeleton_kat_eye 		= "hud_exo",
		killer_blue_exoskeleton_psy 			= "hud_exo",
		killer_blue_exoskeleton_blackwhite 		= "hud_exo",
		killer_blue_exoskeleton_bast 			= "hud_exo",
		killer_blue_exoskeleton_plus 			= "hud_exo",
		killer_blue_exoskeleton_badplus 			= "hud_exo",
		killer_blue_exoskeleton_goodplus 		= "hud_exo",
		killer_blue_exoskeleton_defaultplus 		= "hud_exo",
		killer_blue_exoskeleton_staticplus 		= "hud_exo",
		killer_blue_exoskeleton_kat_eyeplus 		= "hud_exo",
		killer_blue_exoskeleton_psyplus 			= "hud_exo",
		killer_blue_exoskeleton_blackwhiteplus 		= "hud_exo",
		killer_blue_exoskeleton_bastplus 		= "hud_exo",
		killer_gaz_outfit_m1 				= "hud_merc",
		killer_gaz_outfit_m1_bad 			= "hud_merc",
		killer_gaz_outfit_m1_good 			= "hud_merc",
		killer_gaz_outfit_m1_default 			= "hud_merc",
		killer_gaz_outfit_m1_static 			= "hud_merc",
		killer_gaz_outfit_m1_kat_eye 			= "hud_merc",
		killer_gaz_outfit_m1_psy 			= "hud_merc",
		killer_gaz_outfit_m1_blackwhite 			= "hud_merc",
		killer_gaz_outfit_m1_bast 			= "hud_merc",
		killer_gaz_outfit_m1_plus 			= "hud_merc",
		killer_gaz_outfit_m1_badplus 			= "hud_merc",
		killer_gaz_outfit_m1_goodplus 			= "hud_merc",
		killer_gaz_outfit_m1_defaultplus 			= "hud_merc",
		killer_gaz_outfit_m1_staticplus 			= "hud_merc",
		killer_gaz_outfit_m1_kat_eyeplus 		= "hud_merc",
		killer_gaz_outfit_m1_psyplus 			= "hud_merc",
		killer_gaz_outfit_m1_blackwhiteplus 		= "hud_merc",
		killer_gaz_outfit_m1_bastplus 			= "hud_merc",
		merc_scientific_outfit 				= "hud_sci",
		merc_scientific_outfit_bad 			= "hud_sci",
		merc_scientific_outfit_good 			= "hud_sci",
		merc_scientific_outfit_default 			= "hud_sci",
		merc_scientific_outfit_static 			= "hud_sci",
		merc_scientific_outfit_kat_eye 			= "hud_sci",
		merc_scientific_outfit_psy 			= "hud_sci",
		merc_scientific_outfit_blackwhite 		= "hud_sci",
		merc_scientific_outfit_bast 			= "hud_sci",
		merc_scientific_outfit_plus 			= "hud_sci",
		merc_scientific_outfit_badplus 			= "hud_sci",
		merc_scientific_outfit_goodplus 			= "hud_sci",
		merc_scientific_outfit_defaultplus 		= "hud_sci",
		merc_scientific_outfit_staticplus 			= "hud_sci",
		merc_scientific_outfit_kat_eyeplus 		= "hud_sci",
		merc_scientific_outfit_psyplus 			= "hud_sci",
		merc_scientific_outfit_blackwhiteplus 		= "hud_sci",
		merc_scientific_outfit_bastplus 			= "hud_sci",
		military_exo_outfit 				= "hud_exo",
		military_exo_outfit_bad 				= "hud_exo",
		military_exo_outfit_good 			= "hud_exo",
		military_exo_outfit_default 			= "hud_exo",
		military_exo_outfit_static 			= "hud_exo",
		military_exo_outfit_kat_eye 			= "hud_exo",
		military_exo_outfit_psy 				= "hud_exo",
		military_exo_outfit_blackwhite 			= "hud_exo",
		military_exo_outfit_bast 				= "hud_exo",
		military_exo_outfit_plus 				= "hud_exo",
		military_exo_outfit_badplus 			= "hud_exo",
		military_exo_outfit_goodplus 			= "hud_exo",
		military_exo_outfit_defaultplus 			= "hud_exo",
		military_exo_outfit_staticplus 			= "hud_exo",
		military_exo_outfit_kat_eyeplus 			= "hud_exo",
		military_exo_outfit_psyplus 			= "hud_exo",
		military_exo_outfit_blackwhiteplus 		= "hud_exo",
		military_exo_outfit_bastplus 			= "hud_exo",
		military_outfit					= "hud_military",
		military_outfit_bad 				= "hud_military",
		military_outfit_good 				= "hud_military",
		military_outfit_default 				= "hud_military",
		military_outfit_static 				= "hud_military",
		military_outfit_kat_eye 				= "hud_military",
		military_outfit_psy 				= "hud_military",
		military_outfit_blackwhite 			= "hud_military",
		military_outfit_bast 				= "hud_military",
		military_outfit_plus 				= "hud_military",
		military_outfit_badplus 				= "hud_military",
		military_outfit_goodplus 				= "hud_military",
		military_outfit_defaultplus 			= "hud_military",
		military_outfit_staticplus 			= "hud_military",
		military_outfit_kat_eyeplus 			= "hud_military",
		military_outfit_psyplus 				= "hud_military",
		military_outfit_blackwhiteplus 			= "hud_military",
		military_outfit_bastplus 				= "hud_military",
		militaryspec_outfit				= "hud_military",
		militaryspec_outfit_bad 				= "hud_military",
		militaryspec_outfit_good 			= "hud_military",
		militaryspec_outfit_default 			= "hud_military",
		militaryspec_outfit_static 			= "hud_military",
		militaryspec_outfit_kat_eye 			= "hud_military",
		militaryspec_outfit_psy 				= "hud_military",
		militaryspec_outfit_blackwhite 			= "hud_military",
		militaryspec_outfit_bast 				= "hud_military",
		militaryspec_outfit_plus 				= "hud_military",
		militaryspec_outfit_badplus 			= "hud_military",
		militaryspec_outfit_goodplus 			= "hud_military",
		militaryspec_outfit_defaultplus 			= "hud_military",
		militaryspec_outfit_staticplus 			= "hud_military",
		militaryspec_outfit_kat_eyeplus 			= "hud_military",
		militaryspec_outfit_psyplus 			= "hud_military",
		militaryspec_outfit_blackwhiteplus 		= "hud_military",
		militaryspec_outfit_bastplus 			= "hud_military",
		monolit_exoskeleton 				= "hud_exo",
		monolit_exoskeleton_bad 			= "hud_exo",
		monolit_exoskeleton_good 			= "hud_exo",
		monolit_exoskeleton_default 			= "hud_exo",
		monolit_exoskeleton_static 			= "hud_exo",
		monolit_exoskeleton_kat_eye 			= "hud_exo",
		monolit_exoskeleton_psy 			= "hud_exo",
		monolit_exoskeleton_blackwhite 			= "hud_exo",
		monolit_exoskeleton_bast 			= "hud_exo",
		monolit_exoskeleton_plus 			= "hud_exo",
		monolit_exoskeleton_badplus 			= "hud_exo",
		monolit_exoskeleton_goodplus 			= "hud_exo",
		monolit_exoskeleton_defaultplus 		= "hud_exo",
		monolit_exoskeleton_staticplus 			= "hud_exo",
		monolit_exoskeleton_kat_eyeplus 		= "hud_exo",
		monolit_exoskeleton_psyplus 			= "hud_exo",
		monolit_exoskeleton_blackwhiteplus 		= "hud_exo",
		monolit_exoskeleton_bastplus 			= "hud_exo",
		monolit_gaz_outfit_m1 				= "hud_gaz",
		monolit_gaz_outfit_m1_bad 			= "hud_gaz",
		monolit_gaz_outfit_m1_good 			= "hud_gaz",
		monolit_gaz_outfit_m1_default 			= "hud_gaz",
		monolit_gaz_outfit_m1_static 			= "hud_gaz",
		monolit_gaz_outfit_m1_kat_eye 			= "hud_gaz",
		monolit_gaz_outfit_m1_psy 			= "hud_gaz",
		monolit_gaz_outfit_m1_blackwhite 		= "hud_gaz",
		monolit_gaz_outfit_m1_bast 			= "hud_gaz",
		monolit_gaz_outfit_m1_plus 			= "hud_gaz",
		monolit_gaz_outfit_m1_badplus 			= "hud_gaz",
		monolit_gaz_outfit_m1_goodplus 		= "hud_gaz",
		monolit_gaz_outfit_m1_defaultplus 		= "hud_gaz",
		monolit_gaz_outfit_m1_staticplus 		= "hud_gaz",
		monolit_gaz_outfit_m1_kat_eyeplus 		= "hud_gaz",
		monolit_gaz_outfit_m1_psyplus 			= "hud_gaz",
		monolit_gaz_outfit_m1_blackwhiteplus 		= "hud_gaz",
		monolit_gaz_outfit_m1_bastplus 			= "hud_gaz",
		monolit_scientific_outfit 				= "hud_sci",
		monolit_scientific_outfit_bad 			= "hud_sci",
		monolit_scientific_outfit_good 			= "hud_sci",
		monolit_scientific_outfit_default 			= "hud_sci",
		monolit_scientific_outfit_static 			= "hud_sci",
		monolit_scientific_outfit_kat_eye 		= "hud_sci",
		monolit_scientific_outfit_psy 			= "hud_sci",
		monolit_scientific_outfit_blackwhite 		= "hud_sci",
		monolit_scientific_outfit_bast 			= "hud_sci",
		monolit_scientific_outfit_plus 			= "hud_sci",
		monolit_scientific_outfit_badplus 			= "hud_sci",
		monolit_scientific_outfit_goodplus 		= "hud_sci",
		monolit_scientific_outfit_defaultplus 		= "hud_sci",
		monolit_scientific_outfit_staticplus 		= "hud_sci",
		monolit_scientific_outfit_kat_eyeplus 		= "hud_sci",
		monolit_scientific_outfit_psyplus 			= "hud_sci",
		monolit_scientific_outfit_blackwhiteplus 		= "hud_sci",
		monolit_scientific_outfit_bastplus 		= "hud_sci",
		nano_outfit 					= "hud_sci",
		nano_outfit_bad 					= "hud_sci",
		nano_outfit_good 				= "hud_sci",
		nano_outfit_default 				= "hud_sci",
		nano_outfit_static 				= "hud_sci",
		nano_outfit_kat_eye 				= "hud_sci",
		nano_outfit_psy 					= "hud_sci",
		nano_outfit_blackwhite 				= "hud_sci",
		nano_outfit_bast 				= "hud_sci",
		nano_outfit_plus 				= "hud_sci",
		nano_outfit_badplus 				= "hud_sci",
		nano_outfit_goodplus 				= "hud_sci",
		nano_outfit_defaultplus 				= "hud_sci",
		nano_outfit_staticplus 				= "hud_sci",
		nano_outfit_kat_eyeplus 			= "hud_sci",
		nano_outfit_psyplus 				= "hud_sci",
		nano_outfit_blackwhiteplus 			= "hud_sci",
		nano_outfit_bastplus 				= "hud_sci",
		nano_outfit_addw 				= "hud_sci",
		nano_outfit_addw_bad 				= "hud_sci",
		nano_outfit_addw_good 				= "hud_sci",
		nano_outfit_addw_default 			= "hud_sci",
		nano_outfit_addw_static 				= "hud_sci",
		nano_outfit_addw_kat_eye 			= "hud_sci",
		nano_outfit_addw_psy 				= "hud_sci",
		nano_outfit_addw_blackwhite 			= "hud_sci",
		nano_outfit_addw_bast 				= "hud_sci",
		nano_outfit_addw_plus 				= "hud_sci",
		nano_outfit_addw_badplus 			= "hud_sci",
		nano_outfit_addw_goodplus 			= "hud_sci",
		nano_outfit_addw_defaultplus 			= "hud_sci",
		nano_outfit_addw_staticplus 			= "hud_sci",
		nano_outfit_addw_kat_eyeplus 			= "hud_sci",
		nano_outfit_addw_psyplus 			= "hud_sci",
		nano_outfit_addw_blackwhiteplus 		= "hud_sci",
		nano_outfit_addw_bastplus 			= "hud_sci",
		nano_outfit_addh 				= "hud_sci",
		nano_outfit_addh_bad 				= "hud_sci",
		nano_outfit_addh_good 				= "hud_sci",
		nano_outfit_addh_default 			= "hud_sci",
		nano_outfit_addh_static 				= "hud_sci",
		nano_outfit_addh_kat_eye 			= "hud_sci",
		nano_outfit_addh_psy 				= "hud_sci",
		nano_outfit_addh_blackwhite 			= "hud_sci",
		nano_outfit_addh_bast 				= "hud_sci",
		nano_outfit_addh_plus 				= "hud_sci",
		nano_outfit_addh_badplus 			= "hud_sci",
		nano_outfit_addh_goodplus 			= "hud_sci",
		nano_outfit_addh_defaultplus 			= "hud_sci",
		nano_outfit_addh_staticplus 			= "hud_sci",
		nano_outfit_addh_kat_eyeplus 			= "hud_sci",
		nano_outfit_addh_psyplus 			= "hud_sci",
		nano_outfit_addh_blackwhiteplus 		= "hud_sci",
		nano_outfit_addh_bastplus 			= "hud_sci",
		neytral_exo_antigas_outfit			= "hud_exo",
		neytral_exo_antigas_outfit_bad 			= "hud_exo",
		neytral_exo_antigas_outfit_good 			= "hud_exo",
		neytral_exo_antigas_outfit_default 		= "hud_exo",
		neytral_exo_antigas_outfit_static 		= "hud_exo",
		neytral_exo_antigas_outfit_kat_eye 		= "hud_exo",
		neytral_exo_antigas_outfit_psy 			= "hud_exo",
		neytral_exo_antigas_outfit_blackwhite 		= "hud_exo",
		neytral_exo_antigas_outfit_bast 			= "hud_exo",
		neytral_exo_antigas_outfit_plus 			= "hud_exo",
		neytral_exo_antigas_outfit_badplus 		= "hud_exo",
		neytral_exo_antigas_outfit_goodplus 		= "hud_exo",
		neytral_exo_antigas_outfit_defaultplus 		= "hud_exo",
		neytral_exo_antigas_outfit_staticplus 		= "hud_exo",
		neytral_exo_antigas_outfit_kat_eyeplus 		= "hud_exo",
		neytral_exo_antigas_outfit_psyplus 		= "hud_exo",
		neytral_exo_antigas_outfit_blackwhiteplus 	= "hud_exo",
		neytral_exo_antigas_outfit_bastplus 		= "hud_exo",
		neytral_exo_gaz_outfit_m1 			= "hud_gaz",
		neytral_exo_gaz_outfit_m1_bad 			= "hud_gaz",
		neytral_exo_gaz_outfit_m1_good 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_default 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_static 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_kat_eye 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_psy 			= "hud_gaz",
		neytral_exo_gaz_outfit_m1_blackwhite 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_bast 			= "hud_gaz",
		neytral_exo_gaz_outfit_m1_plus 			= "hud_gaz",
		neytral_exo_gaz_outfit_m1_badplus 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_goodplus 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_defaultplus 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_staticplus 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_kat_eyeplus 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_psyplus 		= "hud_gaz",
		neytral_exo_gaz_outfit_m1_blackwhiteplus 	= "hud_gaz",
		neytral_exo_gaz_outfit_m1_bastplus 		= "hud_gaz",
		neytral_gaz_outfit_m1 				= "hud_gaz",
		neytral_gaz_outfit_m1_bad 			= "hud_gaz",
		neytral_gaz_outfit_m1_good 			= "hud_gaz",
		neytral_gaz_outfit_m1_default 			= "hud_gaz",
		neytral_gaz_outfit_m1_static 			= "hud_gaz",
		neytral_gaz_outfit_m1_kat_eye 			= "hud_gaz",
		neytral_gaz_outfit_m1_psy 			= "hud_gaz",
		neytral_gaz_outfit_m1_blackwhite 		= "hud_gaz",
		neytral_gaz_outfit_m1_bast 			= "hud_gaz",
		neytral_gaz_outfit_m1_plus 			= "hud_gaz",
		neytral_gaz_outfit_m1_badplus 			= "hud_gaz",
		neytral_gaz_outfit_m1_goodplus 			= "hud_gaz",
		neytral_gaz_outfit_m1_defaultplus 		= "hud_gaz",
		neytral_gaz_outfit_m1_staticplus 		= "hud_gaz",
		neytral_gaz_outfit_m1_kat_eyeplus 		= "hud_gaz",
		neytral_gaz_outfit_m1_psyplus 			= "hud_gaz",
		neytral_gaz_outfit_m1_blackwhiteplus 		= "hud_gaz",
		neytral_gaz_outfit_m1_bastplus 			= "hud_gaz",
		neytral_gaz_outfit_m2 				= "hud_gaz",
		neytral_gaz_outfit_m2_bad 			= "hud_gaz",
		neytral_gaz_outfit_m2_good 			= "hud_gaz",
		neytral_gaz_outfit_m2_default 			= "hud_gaz",
		neytral_gaz_outfit_m2_static 			= "hud_gaz",
		neytral_gaz_outfit_m2_kat_eye 			= "hud_gaz",
		neytral_gaz_outfit_m2_psy 			= "hud_gaz",
		neytral_gaz_outfit_m2_blackwhite 		= "hud_gaz",
		neytral_gaz_outfit_m2_bast 			= "hud_gaz",
		neytral_gaz_outfit_m2_plus 			= "hud_gaz",
		neytral_gaz_outfit_m2_badplus 			= "hud_gaz",
		neytral_gaz_outfit_m2_goodplus 			= "hud_gaz",
		neytral_gaz_outfit_m2_defaultplus 		= "hud_gaz",
		neytral_gaz_outfit_m2_staticplus 		= "hud_gaz",
		neytral_gaz_outfit_m2_kat_eyeplus 		= "hud_gaz",
		neytral_gaz_outfit_m2_psyplus 			= "hud_gaz",
		neytral_gaz_outfit_m2_blackwhiteplus 		= "hud_gaz",
		neytral_gaz_outfit_m2_bastplus 			= "hud_gaz",
		neytral_gaz_outfit_v1				= "hud_gaz",
		neytral_gaz_outfit_v1_bad 			= "hud_gaz",
		neytral_gaz_outfit_v1_good 			= "hud_gaz",
		neytral_gaz_outfit_v1_default 			= "hud_gaz",
		neytral_gaz_outfit_v1_static 			= "hud_gaz",
		neytral_gaz_outfit_v1_kat_eye 			= "hud_gaz",
		neytral_gaz_outfit_v1_psy 			= "hud_gaz",
		neytral_gaz_outfit_v1_blackwhite 		= "hud_gaz",
		neytral_gaz_outfit_v1_bast 			= "hud_gaz",
		neytral_gaz_outfit_v1_plus 			= "hud_gaz",
		neytral_gaz_outfit_v1_badplus 			= "hud_gaz",
		neytral_gaz_outfit_v1_goodplus 			= "hud_gaz",
		neytral_gaz_outfit_v1_defaultplus 		= "hud_gaz",
		neytral_gaz_outfit_v1_staticplus 			= "hud_gaz",
		neytral_gaz_outfit_v1_kat_eyeplus 		= "hud_gaz",
		neytral_gaz_outfit_v1_psyplus 			= "hud_gaz",
		neytral_gaz_outfit_v1_blackwhiteplus 		= "hud_gaz",
		neytral_gaz_outfit_v1_bastplus 			= "hud_gaz",
		neytral_gaz_outfit_v2				= "hud_gaz",
		neytral_gaz_outfit_v2_bad 			= "hud_gaz",
		neytral_gaz_outfit_v2_good 			= "hud_gaz",
		neytral_gaz_outfit_v2_default 			= "hud_gaz",
		neytral_gaz_outfit_v2_static 			= "hud_gaz",
		neytral_gaz_outfit_v2_kat_eye 			= "hud_gaz",
		neytral_gaz_outfit_v2_psy 			= "hud_gaz",
		neytral_gaz_outfit_v2_blackwhite 		= "hud_gaz",
		neytral_gaz_outfit_v2_bast 			= "hud_gaz",
		neytral_gaz_outfit_v2_plus 			= "hud_gaz",
		neytral_gaz_outfit_v2_badplus 			= "hud_gaz",
		neytral_gaz_outfit_v2_goodplus 			= "hud_gaz",
		neytral_gaz_outfit_v2_defaultplus 		= "hud_gaz",
		neytral_gaz_outfit_v2_staticplus 			= "hud_gaz",
		neytral_gaz_outfit_v2_kat_eyeplus 		= "hud_gaz",
		neytral_gaz_outfit_v2_psyplus 			= "hud_gaz",
		neytral_gaz_outfit_v2_blackwhiteplus 		= "hud_gaz",
		neytral_gaz_outfit_v2_bastplus 			= "hud_gaz",
		neytral_gaz_outfit_v3				= "hud_gaz",
		neytral_gaz_outfit_v3_bad 			= "hud_gaz",
		neytral_gaz_outfit_v3_good 			= "hud_gaz",
		neytral_gaz_outfit_v3_default 			= "hud_gaz",
		neytral_gaz_outfit_v3_static 			= "hud_gaz",
		neytral_gaz_outfit_v3_kat_eye 			= "hud_gaz",
		neytral_gaz_outfit_v3_psy 			= "hud_gaz",
		neytral_gaz_outfit_v3_blackwhite 		= "hud_gaz",
		neytral_gaz_outfit_v3_bast 			= "hud_gaz",
		neytral_gaz_outfit_v3_plus 			= "hud_gaz",
		neytral_gaz_outfit_v3_badplus 			= "hud_gaz",
		neytral_gaz_outfit_v3_goodplus 			= "hud_gaz",
		neytral_gaz_outfit_v3_defaultplus 		= "hud_gaz",
		neytral_gaz_outfit_v3_staticplus 			= "hud_gaz",
		neytral_gaz_outfit_v3_kat_eyeplus 		= "hud_gaz",
		neytral_gaz_outfit_v3_psyplus 			= "hud_gaz",
		neytral_gaz_outfit_v3_blackwhiteplus 		= "hud_gaz",
		neytral_gaz_outfit_v3_bastplus 			= "hud_gaz",
		neytral_novice_gaz_outfit_m1 			= "hud_gaz",
		neytral_novice_gaz_outfit_m1_bad 		= "hud_gaz",
		neytral_novice_gaz_outfit_m1_plus 		= "hud_gaz",
		neytral_novice_gaz_outfit_m1_badplus 		= "hud_gaz",
		outfit_exo_m1 					= "hud_exo",
		outfit_exo_m1_bad 				= "hud_exo",
		outfit_exo_m1_good 				= "hud_exo",
		outfit_exo_m1_default 				= "hud_exo",
		outfit_exo_m1_static 				= "hud_exo",
		outfit_exo_m1_kat_eye 				= "hud_exo",
		outfit_exo_m1_psy 				= "hud_exo",
		outfit_exo_m1_blackwhite 			= "hud_exo",
		outfit_exo_m1_bast 				= "hud_exo",
		outfit_exo_m1_plus 				= "hud_exo",
		outfit_exo_m1_badplus 				= "hud_exo",
		outfit_exo_m1_goodplus 			= "hud_exo",
		outfit_exo_m1_defaultplus 			= "hud_exo",
		outfit_exo_m1_staticplus 			= "hud_exo",
		outfit_exo_m1_kat_eyeplus 			= "hud_exo",
		outfit_exo_m1_psyplus 				= "hud_exo",
		outfit_exo_m1_blackwhiteplus 			= "hud_exo",
		outfit_exo_m1_bastplus 				= "hud_exo",
		outfit_killer_m1 					= "hud_merc",
		outfit_killer_m1_bad 				= "hud_merc",
		outfit_killer_m1_good 				= "hud_merc",
		outfit_killer_m1_default 				= "hud_merc",
		outfit_killer_m1_static 				= "hud_merc",
		outfit_killer_m1_kat_eye 			= "hud_merc",
		outfit_killer_m1_psy 				= "hud_merc",
		outfit_killer_m1_blackwhite 			= "hud_merc",
		outfit_killer_m1_bast 				= "hud_merc",
		outfit_killer_m1_plus 				= "hud_merc",
		outfit_killer_m1_badplus 				= "hud_merc",
		outfit_killer_m1_goodplus 			= "hud_merc",
		outfit_killer_m1_defaultplus 			= "hud_merc",
		outfit_killer_m1_staticplus 			= "hud_merc",
		outfit_killer_m1_kat_eyeplus 			= "hud_merc",
		outfit_killer_m1_psyplus 				= "hud_merc",
		outfit_killer_m1_blackwhiteplus 			= "hud_merc",
		outfit_killer_m1_bastplus 			= "hud_merc",
		outfit_specnaz_m1				= "hud_military",
		outfit_specnaz_m1_bad 				= "hud_military",
		outfit_specnaz_m1_good 			= "hud_military",
		outfit_specnaz_m1_default 			= "hud_military",
		outfit_specnaz_m1_static 			= "hud_military",
		outfit_specnaz_m1_kat_eye 			= "hud_military",
		outfit_specnaz_m1_psy 				= "hud_military",
		outfit_specnaz_m1_blackwhite 			= "hud_military",
		outfit_specnaz_m1_bast 			= "hud_military",
		outfit_specnaz_m1_plus 			= "hud_military",
		outfit_specnaz_m1_badplus 			= "hud_military",
		outfit_specnaz_m1_goodplus 			= "hud_military",
		outfit_specnaz_m1_defaultplus 			= "hud_military",
		outfit_specnaz_m1_staticplus 			= "hud_military",
		outfit_specnaz_m1_kat_eyeplus 			= "hud_military",
		outfit_specnaz_m1_psyplus 			= "hud_military",
		outfit_specnaz_m1_blackwhiteplus 		= "hud_military",
		outfit_specnaz_m1_bastplus 			= "hud_military",
		outfit_svoboda_m1 				= "hud_gaz",
		outfit_svoboda_m1_bad 				= "hud_gaz",
		outfit_svoboda_m1_good 			= "hud_gaz",
		outfit_svoboda_m1_default 			= "hud_gaz",
		outfit_svoboda_m1_static 			= "hud_gaz",
		outfit_svoboda_m1_kat_eye 			= "hud_gaz",
		outfit_svoboda_m1_psy 				= "hud_gaz",
		outfit_svoboda_m1_blackwhite 			= "hud_gaz",
		outfit_svoboda_m1_bast 				= "hud_gaz",
		outfit_svoboda_m1_plus 				= "hud_gaz",
		outfit_svoboda_m1_badplus 			= "hud_gaz",
		outfit_svoboda_m1_goodplus 			= "hud_gaz",
		outfit_svoboda_m1_defaultplus 			= "hud_gaz",
		outfit_svoboda_m1_staticplus 			= "hud_gaz",
		outfit_svoboda_m1_kat_eyeplus 			= "hud_gaz",
		outfit_svoboda_m1_psyplus 			= "hud_gaz",
		outfit_svoboda_m1_blackwhiteplus 		= "hud_gaz",
		outfit_svoboda_m1_bastplus 			= "hud_gaz",
		protection_outfit 				= "hud_sci",
		protection_outfit_bad 				= "hud_sci",
		protection_outfit_good 				= "hud_sci",
		protection_outfit_default 				= "hud_sci",
		protection_outfit_static 				= "hud_sci",
		protection_outfit_kat_eye 			= "hud_sci",
		protection_outfit_psy 				= "hud_sci",
		protection_outfit_blackwhite 			= "hud_sci",
		protection_outfit_bast 				= "hud_sci",
		protection_outfit_plus 				= "hud_sci",
		protection_outfit_badplus 			= "hud_sci",
		protection_outfit_goodplus 			= "hud_sci",
		protection_outfit_defaultplus 			= "hud_sci",
		protection_outfit_staticplus 			= "hud_sci",
		protection_outfit_kat_eyeplus 			= "hud_sci",
		protection_outfit_psyplus 			= "hud_sci",
		protection_outfit_blackwhiteplus 			= "hud_sci",
		protection_outfit_bastplus 			= "hud_sci",
		rus_spec_outfit 					= "hud_military",
		rus_spec_outfit_bad 				= "hud_military",
		rus_spec_outfit_good 				= "hud_military",
		rus_spec_outfit_default 				= "hud_military",
		rus_spec_outfit_static 				= "hud_military",
		rus_spec_outfit_kat_eye 			= "hud_military",
		rus_spec_outfit_psy 				= "hud_military",
		rus_spec_outfit_blackwhite 			= "hud_military",
		rus_spec_outfit_bast 				= "hud_military",
		rus_spec_outfit_plus 				= "hud_military",
		rus_spec_outfit_badplus 			= "hud_military",
		rus_spec_outfit_goodplus 			= "hud_military",
		rus_spec_outfit_defaultplus 			= "hud_military",
		rus_spec_outfit_staticplus 			= "hud_military",
		rus_spec_outfit_kat_eyeplus 			= "hud_military",
		rus_spec_outfit_psyplus 			= "hud_military",
		rus_spec_outfit_blackwhiteplus 			= "hud_military",
		rus_spec_outfit_bastplus 			= "hud_military",
		scientific_outfit 					= "hud_sci",
		scientific_outfit_bad 				= "hud_sci",
		scientific_outfit_good 				= "hud_sci",
		scientific_outfit_default 				= "hud_sci",
		scientific_outfit_static 				= "hud_sci",
		scientific_outfit_kat_eye 				= "hud_sci",
		scientific_outfit_psy 				= "hud_sci",
		scientific_outfit_blackwhite 			= "hud_sci",
		scientific_outfit_bast 				= "hud_sci",
		scientific_outfit_plus 				= "hud_sci",
		scientific_outfit_badplus 				= "hud_sci",
		scientific_outfit_goodplus 			= "hud_sci",
		scientific_outfit_defaultplus 			= "hud_sci",
		scientific_outfit_staticplus 			= "hud_sci",
		scientific_outfit_kat_eyeplus 			= "hud_sci",
		scientific_outfit_psyplus 				= "hud_sci",
		scientific_outfit_blackwhiteplus 			= "hud_sci",
		scientific_outfit_bastplus 			= "hud_sci",
		specops_outfit					= "hud_military",
		specops_outfit_bad 				= "hud_military",
		specops_outfit_good 				= "hud_military",
		specops_outfit_default 				= "hud_military",
		specops_outfit_static 				= "hud_military",
		specops_outfit_kat_eye 				= "hud_military",
		specops_outfit_psy 				= "hud_military",
		specops_outfit_blackwhite 			= "hud_military",
		specops_outfit_bast 				= "hud_military",
		specops_outfit_plus 				= "hud_military",
		specops_outfit_badplus 				= "hud_military",
		specops_outfit_goodplus 			= "hud_military",
		specops_outfit_defaultplus 			= "hud_military",
		specops_outfit_staticplus 			= "hud_military",
		specops_outfit_kat_eyeplus 			= "hud_military",
		specops_outfit_psyplus 				= "hud_military",
		specops_outfit_blackwhiteplus 			= "hud_military",
		specops_outfit_bastplus 			= "hud_military",
		stalker_france_killer_gaz				= "hud_merc",
		stalker_france_killer_gaz_bad 			= "hud_merc",
		stalker_france_killer_gaz_good 			= "hud_merc",
		stalker_france_killer_gaz_default 		= "hud_merc",
		stalker_france_killer_gaz_static 			= "hud_merc",
		stalker_france_killer_gaz_kat_eye 		= "hud_merc",
		stalker_france_killer_gaz_psy 			= "hud_merc",
		stalker_france_killer_gaz_blackwhite 		= "hud_merc",
		stalker_france_killer_gaz_bast 			= "hud_merc",
		stalker_france_killer_gaz_plus 			= "hud_merc",
		stalker_france_killer_gaz_badplus 		= "hud_merc",
		stalker_france_killer_gaz_goodplus 		= "hud_merc",
		stalker_france_killer_gaz_defaultplus 		= "hud_merc",
		stalker_france_killer_gaz_staticplus 		= "hud_merc",
		stalker_france_killer_gaz_kat_eyeplus 		= "hud_merc",
		stalker_france_killer_gaz_psyplus 		= "hud_merc",
		stalker_france_killer_gaz_blackwhiteplus 		= "hud_merc",
		stalker_france_killer_gaz_bastplus 		= "hud_merc",
		stalker_usa_killer_gaz				= "hud_merc",
		stalker_usa_killer_gaz_bad 			= "hud_merc",
		stalker_usa_killer_gaz_good 			= "hud_merc",
		stalker_usa_killer_gaz_default 			= "hud_merc",
		stalker_usa_killer_gaz_static 			= "hud_merc",
		stalker_usa_killer_gaz_kat_eye 			= "hud_merc",
		stalker_usa_killer_gaz_psy 			= "hud_merc",
		stalker_usa_killer_gaz_blackwhite 		= "hud_merc",
		stalker_usa_killer_gaz_bast 			= "hud_merc",
		stalker_usa_killer_gaz_plus 			= "hud_merc",
		stalker_usa_killer_gaz_badplus 			= "hud_merc",
		stalker_usa_killer_gaz_goodplus 		= "hud_merc",
		stalker_usa_killer_gaz_defaultplus 		= "hud_merc",
		stalker_usa_killer_gaz_staticplus 		= "hud_merc",
		stalker_usa_killer_gaz_kat_eyeplus 		= "hud_merc",
		stalker_usa_killer_gaz_psyplus 			= "hud_merc",
		stalker_usa_killer_gaz_blackwhiteplus 		= "hud_merc",
		stalker_usa_killer_gaz_bastplus 			= "hud_merc",
		svoboda_exoskeleton 				= "hud_exo",
		svoboda_exoskeleton_bad 			= "hud_exo",
		svoboda_exoskeleton_good 			= "hud_exo",
		svoboda_exoskeleton_default 			= "hud_exo",
		svoboda_exoskeleton_static 			= "hud_exo",
		svoboda_exoskeleton_kat_eye 			= "hud_exo",
		svoboda_exoskeleton_psy 			= "hud_exo",
		svoboda_exoskeleton_blackwhite 		= "hud_exo",
		svoboda_exoskeleton_bast 			= "hud_exo",
		svoboda_exoskeleton_plus 			= "hud_exo",
		svoboda_exoskeleton_badplus 			= "hud_exo",
		svoboda_exoskeleton_goodplus 			= "hud_exo",
		svoboda_exoskeleton_defaultplus 		= "hud_exo",
		svoboda_exoskeleton_staticplus 			= "hud_exo",
		svoboda_exoskeleton_kat_eyeplus 		= "hud_exo",
		svoboda_exoskeleton_psyplus 			= "hud_exo",
		svoboda_exoskeleton_blackwhiteplus 		= "hud_exo",
		svoboda_exoskeleton_bastplus 			= "hud_exo",
		svoboda_gaz_outfit_m1 				= "hud_gaz",
		svoboda_gaz_outfit_m1_bad 			= "hud_gaz",
		svoboda_gaz_outfit_m1_good 			= "hud_gaz",
		svoboda_gaz_outfit_m1_default 			= "hud_gaz",
		svoboda_gaz_outfit_m1_static 			= "hud_gaz",
		svoboda_gaz_outfit_m1_kat_eye 		= "hud_gaz",
		svoboda_gaz_outfit_m1_psy 			= "hud_gaz",
		svoboda_gaz_outfit_m1_blackwhite 		= "hud_gaz",
		svoboda_gaz_outfit_m1_bast 			= "hud_gaz",
		svoboda_gaz_outfit_m1_plus 			= "hud_gaz",
		svoboda_gaz_outfit_m1_badplus 			= "hud_gaz",
		svoboda_gaz_outfit_m1_goodplus 		= "hud_gaz",
		svoboda_gaz_outfit_m1_defaultplus 		= "hud_gaz",
		svoboda_gaz_outfit_m1_staticplus 		= "hud_gaz",
		svoboda_gaz_outfit_m1_kat_eyeplus 		= "hud_gaz",
		svoboda_gaz_outfit_m1_psyplus 			= "hud_gaz",
		svoboda_gaz_outfit_m1_blackwhiteplus 		= "hud_gaz",
		svoboda_gaz_outfit_m1_bastplus 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1			= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_bad 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_good 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_default 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_static 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_kat_eye 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_psy 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_blackwhite 	= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_bast 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_plus 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_badplus 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_goodplus 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_defaultplus 	= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_staticplus 	= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_kat_eyeplus 	= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_psyplus 		= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_blackwhiteplus 	= "hud_gaz",
		svoboda_heavy_gaz_outfit_m1_bastplus 		= "hud_gaz",
		svoboda_yellow_exo_outfit_m1			= "hud_exo",
		svoboda_yellow_exo_outfit_m1_bad 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_good 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_default 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_static 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_kat_eye 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_psy 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_blackwhite 	= "hud_exo",
		svoboda_yellow_exo_outfit_m1_bast 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_plus 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_badplus 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_goodplus 	= "hud_exo",
		svoboda_yellow_exo_outfit_m1_defaultplus 	= "hud_exo",
		svoboda_yellow_exo_outfit_m1_staticplus 	= "hud_exo",
		svoboda_yellow_exo_outfit_m1_kat_eyeplus 	= "hud_exo",
		svoboda_yellow_exo_outfit_m1_psyplus 		= "hud_exo",
		svoboda_yellow_exo_outfit_m1_blackwhiteplus 	= "hud_exo",
		svoboda_yellow_exo_outfit_m1_bastplus 		= "hud_exo" }

local current_static
local static_enabled
local current_zoom=1
local last_rect

function get_hud_rect(force)
	if force or not last_rect then
		local zoom=Actor:get_camera_fov()/screen.fov
		zoom=(zoom-1)*1.5+1
		if zoom<1 then
			zoom=1
		end
		local stretchy=0.75/(math_floor((screen.height / screen.width)*1000)/1000)
		if stretchy<1 then stretchy=1 end
		last_rect={zoom=zoom,x=-768*zoom+768,y=(-512*zoom+512)*stretchy-(stretchy-1)*300,w=1024*zoom,h=768*zoom*stretchy}
	end

	return last_rect
end

function set_hud_tex(static,enabled)
	local rect = get_hud_rect(true)
	if amk_load_variable("option_hud",2)==2 then
		set_blurs(enabled and curr_tex~="hud_sci" and static~=nil,rect)
	else
		set_blurs(false,rect)
	end
  if enabled==static_enabled and current_static==static and
      rect.zoom==current_zoom then
		return
	end

	sa_main.reattach_statics()

	current_zoom=rect.zoom
	local need_change=false
	if current_static~=static then
		if current_static then
			hud:RemoveCustomStatic(current_static)
		end
		if static then
			hud:AddCustomStatic(static)
		end
		need_change=true
		current_static=static
	end
  local wnd=hud:GetCustomStatic(current_static) and
            hud:GetCustomStatic(current_static):wnd()
	if (not enabled) and wnd then
		wnd:SetWidth(0)
	elseif wnd then
		wnd:SetWndRect(rect.x,rect.y,rect.w,rect.h)
	end
	static_enabled=enabled
end

local blurs=nil
local blurval=0 -- уровень запотевания от 0 до 1
local blurlt=0 -- время последнего обновления
local blurcyctime=0 -- время начала последнего цикла дыхания (выдох)
local blurlastphase=0

function set_blurs(enabled,rect)
	if (not blurs) or hud:GetCustomStatic("hud_blur1")==nil then
		blurs={}
		for i=1,4 do
			hud:AddCustomStatic("hud_blur"..i)
			blurs[i]=hud:GetCustomStatic("hud_blur"..i):wnd()
			blurs[i]:SetWidth(0)
		end
	end
	if not enabled then
		for i=1,4 do
			blurs[i]:SetWidth(0)
		end
		return
	end

-- Циклы в зависимости от силы дыхания: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
	local power=Actor.power
	local period=1.0+power*power*1.0 -- текущая частота дыхания от 30 до 120 циклов в минуту
	local expirt=0.3
	local breathpower=3

	local delta=(time_real_ms-blurlt)/1000 -- дельта в секундах
	local phase=(time_real_ms-blurcyctime)/1000 -- фаза дыхательного цикла в сек.
	blurlt=time_real_ms
	if phase>period then
		phase=phase%period
		blurcyctime=blurlt-phase*1000
	end
	if blurlastphase>phase then
		blurlastphase=0
	end

	local blurdelta=delta*-0.7 -- работа вентилляции
	if blurlastphase<expirt and phase<expirt then
		blurdelta=blurdelta+(phase-blurlastphase)*breathpower
	elseif blurlastphase<expirt then
		blurdelta=blurdelta+(expirt-blurlastphase)*breathpower
	end
	blurlastphase=phase

	blurval=blurval+blurdelta
	if blurval>0.999 then
		blurval=0.999
	elseif blurval<0 then
		blurval=0
	end

	local tm=math_floor(blurval*3)
	local tmn=(tm+1)
	local v=blurval*3-math_floor(blurval*3)
	v=1-v
	local v1=1-v
	if tm~=0 then
		blurs[tm]:SetColor(GetARGB(v*255,255,255,255))
	end
	if tmn~=0 then
		blurs[tmn]:SetColor(GetARGB(v1*255,255,255,255))
	end
	for i=1,4 do
		if i==tm or i==tmn then
			blurs[i]:SetWndRect(rect.x,rect.y,rect.w,rect.h)
		else
			blurs[i]:SetWndRect(rect.x,rect.y,0,0)
		end
	end
end

function check_hud()
	if not Actor then return false end
	local hudotf=Actor:get_current_outfit()
	local hudotf_id="nil"
	if hudotf then
		hudotf_id=hudotf:section()
	end
	local tex
	if hudotf_id then
		tex = hud_tbl[hudotf_id]
	end
	curr_tex=tex
	local act_it=Actor:active_item()

	if Actor.health>0 and not (act_it and act_it:section()=="wpn_binoc" and device().fov<50) and device().fov>30 and amk_load_variable("option_hud",2)~=0 then
		set_hud_tex(tex,true)
	else
		set_hud_tex(tex,false)
	end

	if Actor.health>0 and amk_load_variable("option_rad",1) ~= 0 then
		if act_it and act_it:section()=="wpn_binoc" then
			if last_rect.zoom > 1.3 then
				ui_rad.update(false)
			else
				ui_rad.update(true)
			end
		else
			ui_rad.update(true)
		end
	else
		ui_rad.update(false)
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **     SPAWN_OBJ        **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function spawn_fuel()
	local ballons = {
	{108.16, -6.30, -18.17, 412158, 115},
	{370.12, 15.06, -39.48, 594401, 0},
	{58.30, 19.36, 156.50, 345136, 97},
	{-92.21, -1.18, -212.66, 115177, 268},
	{-74.17, 1.80, 8.45, 127766, 329},
	{3.18, 1.24, 42.48, 243919, 490},
	{15.35, -1.90, 2.40, 255433, 479},
	{77.54, 0.30, -108.47, 312366, 427},
	{-145.54, -0.00, -199.61, 92520, 650},
	{-130.08, 10.00, -196.67, 109214, 629},
	{-140.13, 10.00, -197.94, 98647, 629},
	{37.28, 1.02, -49.90, 220638, 1084},
	{476.68, -46.94, -0.23, 155714, 1919},
	{76.80, -2.54, -23.93, 36304, 1970},
	{94.78, 0.03, -6.88, 88986, 1514},
	{-3.24, -11.75, -263.07, 33794, 1448}
	}
	local kanisters = {
	{-293.80, -14.18, -15.36, 15703, 67},
	{-16.57, 2.48, 58.82, 260308, 88},
	{-74.81, -1.30, 160.52, 196218, 163},
	{-69.94, 0.97, 6.51, 131411, 329},
	{64.01, 0.60, 148.46, 235341, 364},
	{63.29, -0.20, 5.10, 299326, 461},
	{-28.52, -1.04, -181.84, 211644, 676},
	{2.93, -1.88, -13.30, 176553, 1047},
	{41.71, 4.54, -86.36, 227110, 1100},
	{7.90, 1.41, -71.93, 183138, 1041},
	{158.71, -0.76, -259.73, 358950, 962},
	{-342.92, -13.60, 390.01, 11235, 1847},
	{305.22, -36.99, -24.40, 68330, 1930},
	{55.02, 1.17, 40.35, 68094, 1511},
	{-114.14, -0.00, 121.75, 43453, 1315},
	{31.33, 5.60, -13.51, 4683, 1538}
	}
	for k,v in pairs(ballons) do
		if #v == 5 then
			AI:create("amk_ballon",vector():set(v[1], v[2], v[3]), v[4], v[5])
		end
	end
	for k,v in pairs(kanisters) do
		if #v == 5 then
			AI:create("amk_kanistra",vector():set(v[1], v[2], v[3]), v[4], v[5])
		end
	end
end

-- БТР на блокпосту
function spawn_military_btr()
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-168.11, -29.71, -303.21),81808,38 ) ,"vehicle_btr")
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-237.85, -26.23, -378.81),17147,14 ) ,"vehicle_btr")
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-189.55,-0.24,-140.49),46901,559),"vehicle_btr")
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-93.81,0,-185.82),146369,607),"vehicle_btr")
	spawn_military_tech_pack( AI:create("helicopter",vector():set(-150.0,-40.0,-620.0),128298,11 ) ,"helicopter")
end

function spawn_military_tech_pack(obj, spawn_item)
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	if spawn_item == "helicopter" then
		-- свойства cse_motion
		motion_name = packet:r_stringZ()
	end

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health
	local cse_alife_helicopter__unk1_sz
	local engine_sound

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = packet:r_stringZ()
		engine_sound = packet:r_stringZ()
	elseif	spawn_item == "vehicle_btr" then
		health = packet:r_float()
	end

	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	if spawn_item == "helicopter" then
		packet:w_stringZ("[logic]\ncfg = scripts\\esc\\esc_blockpost_heli.ltx")
	elseif	spawn_item == "vehicle_btr" then
		packet:w_stringZ("[logic]\ncfg = scripts\\esc\\esc_blockpost_btr.ltx")
	end
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)

	if spawn_item == "helicopter" then
		packet:w_stringZ(motion_name)
	end

	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = "idle"
		engine_sound = "alexmx\\helicopter"
		packet:w_stringZ(cse_alife_helicopter__unk1_sz)
		packet:w_stringZ(engine_sound)
	elseif  spawn_item == "vehicle_btr" then
		health = 1
		packet:w_float(health)
	end
	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       DYNWEATHERS       **   **   **   **   **    **   **   **
--'*******************************************************************************

local dynweathers = {
	september = {
		clear = {
			clear		= 50,
			pasmurno	= 50,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 45,
			pasmurno	= 25,
			rain		= 20,
			groza		= 10
		},
		rain = {
			clear		= 0,
			pasmurno	= 65,
			rain		= 15,
			groza		= 20
		},
		groza = {
			clear		= 0,
			pasmurno	= 80,
			rain		= 20,
			groza		= 0
		}
	},
	october = {
		clear = {
			clear		= 35,
			pasmurno	= 65,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 30,
			pasmurno	= 40,
			rain		= 20,
			groza		= 10
		},
		rain = {
			clear		= 0,
			pasmurno	= 50,
			rain		= 25,
			groza		= 25
		},
		groza = {
			clear		= 0,
			pasmurno	= 70,
			rain		= 30,
			groza		= 0
		}
	},
	depressive = {
		clear = {
			clear		= 15,
			pasmurno	= 85,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 20,
			pasmurno	= 50,
			rain		= 20,
			groza		= 10
		},
		rain = {
			clear		= 0,
			pasmurno	= 45,
			rain		= 20,
			groza		= 35
		},
		groza = {
			clear		= 0,
			pasmurno	= 65,
			rain		= 20,
			groza		= 15
		}
	},
	mist = {
		clear = {
			clear		= 10,
			pasmurno	= 90,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 10,
			pasmurno	= 20,
			rain		= 35,
			groza		= 35
		},
		rain = {
			clear		= 0,
			pasmurno	= 25,
			rain		= 35,
			groza		= 40
		},
		groza = {
			clear		= 0,
			pasmurno	= 25,
			rain		= 55,
			groza		= 20
		}
	}
}

function get_moon_phase()
	local Y, M, D, h, m, s, ms = game.get_game_time():get(Y, M, D, h, m, s, ms)

	if h > 4 and h < 23 then return "" end

	local months = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
	local math_mod = math.mod
	local day = D

	for yy = 1, Y - 2012 do
		day = day + ((math_mod(yy - 1, 4) == 0 and 366) or 365)
	end
	for mm = 1, M - 1 do
		day = day + months[mm]
	end
	if math_mod(Y, 4) == 0 and M > 2 then
		day = day + 1
	end
	if h >= 12 then
		day = day + 1
	end

	local phase = math_mod(day, 14) + 1
	if phase < 10 then
		return "_ph_0" .. phase
	else
		return "_ph_" .. phase
	end
end

function weather_manager()
	if sync_done==false then return end
	local hour = level.get_time_hours()
	local dynlasthour = amk_load_variable("dynlasthour",-1)
	if dynlasthour<hour or (hour==0 and dynlasthour==23) then
		local next_weather
		local rnd = math_random(0,100)
		local dynw = amk_load_variable("dynw", "pasmurno")
		local dynw_type = dynweather_types[level.name()]
		for k,v in pairs(dynweathers[dynw_type][dynw]) do
			if v > 0 and rnd <= v then
				next_weather=k
				break
			end
			rnd=rnd-v
		end
		local sect = dynw .. "_" .. next_weather .. "_" .. hour .. get_moon_phase()
		if (amk_load_variable("blowout",0)==0 and blowout_type()<1) then
			level.set_weather(dynw_type .. "_" .. sect)
		end
		news_main.on_weather_change(dynw, next_weather)

		amk_save_variable("dynw",next_weather)
		amk_save_variable("dynlasthour",hour)
		amk_save_variable("dynweather", sect)
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       AMK_RESPAWNS     **   **   **   **   **    **   **   **
--'*******************************************************************************
function switch_monster_online(obj)
	se_monster.need_be_online[obj.id]=true
end

function switch_monster_offline(obj)
	se_monster.need_be_online[obj.id]=false
end

function respawned(obj, respawner)
	if not obj or not (obj:is_monster() or obj:is_stalker()) then return end

	local sini = respawner:spawn_ini()
	if not sini:line_exist("respawn", "creature_binded_logic") then return end

	local custom =
		"[smart_terrains]\n" ..
		"none = true\n" ..
		"[logic]\n" ..
		"cfg = scripts\\amk\\" .. sini:r_string("respawn", "creature_binded_logic") .. ".ltx"
	obj:modify_netpk("custom_data", custom)

	obj.ini_initialized = false
	obj:on_before_register()
end

local respawners={}

function spawn_unspawned_respawners()

	for a=1,65534 do
		local obj = AI:object(a)
		if obj then
			local oini = obj:spawn_ini()
			if oini:line_exist ("respawn", "amk_name") == true then
				local amk_name = utils.cfg_get_string(oini, "respawn", "amk_name", false, false, false, false)
				if amk_name then respawners[amk_name]=true end
			end
		end
	end

	local sini = ini_file("scripts\\amk\\amk_respawns.ltx")

	local dv={}
	if sini:section_exist("default_values") then
		local result, id, value = nil, nil, nil
		for a=0,sini:line_count("default_values")-1 do
			result, id, value = sini:r_line("default_values",a,"","")
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				dv[amk.trim(id)]=amk.trim(value)
			end
		end
	end

	if sini:section_exist("amk_respawns") then
		local tmp={}
		local result, id, value = nil, nil, nil
		for a=0,sini:line_count("amk_respawns")-1 do
			result, id, value = sini:r_line("amk_respawns",a,"","")
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				table.insert(tmp, amk.trim(id))
			end
		end

		for k,v in pairs(tmp) do
			local flag = utils.cfg_get_bool(sini, "amk_respawns", v, true, false, false)
			if not respawners[v] and flag==true then
				local t = amk.parse_ini_section_to_array(sini, v)
				local xyzlg = amk.str_explode(",",t.xyzlg,true)
				local pos = vector():set(tonumber(xyzlg[1]),tonumber(xyzlg[2]),tonumber(xyzlg[3]))
				local respawner = amk.spawn_item("respawn",pos,tonumber(xyzlg[5]),tonumber(xyzlg[4]))
				local tbl = amk.get_spawner_data(respawner)
				t.xyzlg = nil
				t.amk_name = v

				for kkk,vvv in pairs(dv) do
					if t[kkk]==nil then
						t[kkk]=vvv
					end
				end

				tbl.custom = amk.gen_custom_data({respawn=t})
				amk.set_spawner_data(tbl, respawner)
				se_respawn.reinit_spawner_params(respawner:name(), true)
			end
			if flag==false then
				local o = se_respawn.get_respawner_by_name(v)
				if o then
					AI:release(o)
				end
			end
		end
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **          OTHER        **   **   **   **   **    **   **   **   **
--'*******************************************************************************

local last_armor_id=0
local last_condition=0

function repair_armor(val)
	local armor = Actor:item_in_slot(6)
	if armor then
		last_armor_id=armor:id()
		last_condition=val
		armor:set_condition(val)
	end
end

function check_armor()
	local armor = Actor:item_in_slot(6)

	if Actor:active_slot()==2 then
		local weapon = Actor:item_in_slot(2)
		local tmp = weapon and armor and armor:section()

		if tmp and weapon:section()=="wpn_pkm1" and not string_find(tmp, "exo") then
			Actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_pkm1")
			Actor:transfer_item(weapon, Actor)
			AI:release(tmpw)
		end
	end

	if not armor then
		last_armor_id=0
		return
	end
	if armor:id()~=last_armor_id then
		last_armor_id=armor:id()
		last_condition=armor:condition()
		return
	end
	if last_condition<armor:condition() then
		armor:set_condition(last_condition)
	else
		last_condition=armor:condition()
	end
end

function dezombify(id,v)
	local npc=level_object_by_id(id)
	if npc then
		if npc:alive()==false then
			return true
		end
		local sobj=AI:object(id)
		if sobj then
			npc:set_character_community(v.comm,0,0)
			npc:set_goodwill(v.gw,Actor)
			local orgtbl=amk.read_stalker_params(sobj)
			orgtbl.profile=string.gsub(orgtbl.profile,"(.*)_zombi","%1")
			-- amk.mylog("dezombified "..npc:name().." profile "..orgtbl.profile)
			amk.write_stalker_params(orgtbl,sobj)
			return true
		end
	end
	return false
end

btrs_friends={}

function build_btrs_table(obj)
	if obj and (obj:is_stalker() and obj:character_community()=="military" and obj:alive()) or obj:section()=="vehicle_btr" then
			btrs_friends[obj:id()] = obj:section()
	end
end

function firebated(obj, amount, local_direction, who, bone_index)
	if who and bone_index > 0 then --false для отключения
		local script
		if obj:is_monster() then
			script=bind_monster
		elseif obj:is_stalker() then
			script=bind_stalker
		elseif obj:is_trader() then
			script = bind_trader
		end
		if script then
			local weapon = who:active_item()
			if not weapon or weapon:section()~="wpn_flame" then return end
			if string_find(obj:section(), "zomb") and obj.health<0.2 then obj:kill(obj) end
			script.play_particle(obj,
			{
				obj=obj,
				particle="amk\\flame",
				bone="bip01_spine1"
			})
		end
	end
end

local zombi_skeletons={
"physics\\dead_body\\skelet_combine_pose_03",
"physics\\dead_body\\skelet_combine_pose_04",
"physics\\dead_body\\skelet_combine_pose_05",
"physics\\dead_body\\skelet_torso"
}

function spawn_skel(obj)
	local skel = create("breakable_object", obj:position(), obj:level_vertex_id(), obj:game_vertex_id())
	local t = amk.get_breakable_data(skel)
	t.visual = table.random(zombi_skeletons)
	t.mass = 1.0
	t.physic_type = 3
	t.skeleton_flags = 1
	amk.set_breakable_data(t, skel)
end

function zomby_blow(obj)
	if obj:object("wpn_flame") then
		amk_particle.amk_particle({
				particle="explosions\\explosion_fuelcan",
				pos=obj:position(),
				sound=[[weapons\t_rgd5_explosion]]
			})
		local dist = Actor:position():distance_to(obj:position())
		if dist < 10 and Actor:see(obj) then
			local h = hit()
			h.impulse = 0
			h.draftsman = Actor
			h.direction = vector():set(0,0,0)
			h:bone("bip01_spine") -- чтобы учитывалась броня
			h.power = 1/dist
			h.type = hit.strike --chemical_burn
			Actor:hit(h)
			h.power = 15/dist
			h.type = hit.chemical_burn
			Actor:hit(h)
		end
		AI:release(AI:object(obj:id()))
		return
	end

	if obj:section()=="zombie_blow" then
		amk_particle.amk_particle({
				particle="amk\\zomb_explode",
				pos=obj:position(),
				sound=[[anomaly\anomaly_body_tear_1]]
			})
		local dist = Actor:position():distance_to(obj:position())
		if dist < 30 and Actor:see(obj) then
			local h = hit()
    	h.impulse = 0
		h.draftsman = Actor
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine") -- чтобы учитывалась броня
    	h.power = 1/dist
    	h.type = hit.strike --chemical_burn
		Actor:hit(h)
    	h.power = 15/dist
    	h.type = hit.chemical_burn
		Actor:hit(h)
		end
		spawn_skel(obj)
		AI:release(AI:object(obj:id()))
	end
end

function firebat_ammo()
	local ammo=Actor:object("ammo_flame")
	if ammo then
		Actor:iterate_inventory(
			function(dummy,item)
				if item:section()=="ammo_flame" then
					AI:release(AI:object(item:id()))
				end
			end
			, Actor)
	end
end
