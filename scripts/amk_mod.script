--[[

File:  amk_mod .script
copyright © AMK TEAM 2007-2008

добавлена fenechka by TAG

--]]

local amk_g_start_timer = amk.g_start_timer
local amk_load_variable = amk.load_variable
local amk_save_variable = amk.save_variable
local amk_start_timer = amk.start_timer
local level_object_by_id = level.object_by_id
local math_floor = math.floor
local math_random = math.random
local string_find = string.find
local string_sub = string.sub

local gv,lv,w
in_hide=false
local sound_obj_right,sound_obj_left,snd_volume,snd_obj_eq
local sync_done=false
local dynlasthour

local weather_types = {
	l01_escape		= 0,
	l02_garbage		= 0,
	l03_agroprom		= 0,
	l03u_agr_underground	= 1,
	l04_darkvalley		= 0,
	l04u_labx18		= 1,
	l05_bar			= 0,
	l06_rostok		= 0,
	l07_military		= 0,
	l08_yantar		= 2,
	l08u_brainlab		= 1,
	l10_radar		= 0,
	l10u_bunker		= 1,
	l11_pripyat		= 0,
	l12_stancia		= 0,
	l12_stancia_2		= 0,
	l12u_control_monolith	= 1,
	l12u_sarcofag		= 1
}

local dynweather_types = {
	l01_escape		= "september",
	l02_garbage		= "october",
	l03_agroprom		= "september",
	l03u_agr_underground	= "september",
	l04_darkvalley		= "depressive",
	l04u_labx18		= "depressive",
	l05_bar			= "october",
	l06_rostok		= "october",
	l07_military		= "september",
	l08_yantar		= "mist",
	l08u_brainlab		= "mist",
	l10_radar		= "mist",
	l10u_bunker		= "mist",
	l11_pripyat		= "depressive",
	l12_stancia		= "depressive",
	l12_stancia_2		= "mist",
	l12u_control_monolith	= "mist",
	l12u_sarcofag		= "depressive"
}

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      QUEST_AF_STAR        **   **   **   **    **   **   **   **
--'*******************************************************************************
local points={
    {
        position={x=-24.2727108001709,y=-12.1660995483398,z=-100.200202941895},
        gv=0,
        lv=73868
        },
    {
        position={x=159.56,y=4.72,z=88.60},
        gv=155,
        lv=463808
        },
    {
        position={x=-4.11,y=2.90,z=108.09},
        gv=85,
        lv=272619
        }
}

function spawn_star(actor,npc,p1,p2)
    local a = points[math_random(#points)]
	AI:create("amk_af_night_star", vector():set(a.position.x,a.position.y,a.position.z), a.lv, a.gv)

	local m_where
	if news_main then
		m_where = news_main.get_point_description("l01_escape", vector():set(a.position.x,a.position.y,a.position.z))
	else
		m_where = "Здесь, на Кордоне"
	end
	Actor:give_talk_message(m_where.." скорее всего поискать стоит. Где-то там он, точно говорю.", "ui\\ui_iconstotal", Frect():set(0,0,10,10), "simple_answer_item")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **        FIRST_RUN          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
-- Эта функция вызывается первой. Онлайновые объекты недоступны! Actor недоступен!
function on_game_start()
	math.randomseed (device ():time_global ())
end

function first_run()
	if not has_info("storyline_actor_start") then
		amk_g_start_timer("gg_need_sleep",0,0,6)
		amk_g_start_timer("show_news",0,0,10)

		amk.spawn_item("amk_zapiska",vector():set(-126.96,-28.41,-379.12),27,125181)
		amk.spawn_item("amk_zapiska",vector():set(21.6,-3.94,-18.28),1140,5991)
		amk.spawn_item("amk_zapiska",vector():set(-126.92,23.27,-36.98),1543,7083)
		sak.add_new_lcitem()

		-- pri_space_restrictor_0011
		local obj = AI:story_object(830)
		if obj then
			AI:release(obj)
			AI:create(5877)
		end

		amk_anoms.pre_blow_off()
		amk_anoms.after_blow_on()

		spawn_military_btr()
		spawn_fuel()
		meceniy_work.main()
	end
end
--'*******************************************************************************
--'   **   **   **   **   **    **   **   **        CHECK_SPAWN          **   **   **   **   **    **   **   **
--'*******************************************************************************

function get_weather(lname)
	return amk.cfg_get_string(ini_file("game_maps_single.ltx"), lname, "weathers", "default")
end

function get_weather_sect(lname)
	if weather_types[lname] == 1 then
		return get_weather(lname)
	elseif weather_types[lname] == 2 then
		return dynweather_types[lname] .. "_" .. get_weather(lname) .. get_moon_phase()
	end

	local dynw = amk_load_variable("dynweather", nil)
	if not dynw then
		return get_weather(lname)
	end

	return dynweather_types[lname].."_"..dynw
end

function check_spawn()
	amk_anoms.init()
	spawn_unspawned_respawners()
	if (news_main) then
		news_main.init()
	end
	if (amk_offline_alife) then
		amk_offline_alife.init()
	end
	if (amk_corpses) then
		amk_corpses.init()
	end
	if (amk_objects) then
		amk_objects.init()
	end

	local obj = AI:story_object(6000)
	if not obj then
		AI:create(6374)
		obj = AI:story_object(6000)
	end

	if amk_load_variable("freeplay",0)==1 then
		amk_save_variable("freeplay",2)
	elseif amk_load_variable("freeplay",0)==2 and (not has_alife_info("cit_fail_first_task")) then
		Actor:give_info_portion("cit_fail_first_task")
		give_info("freeplay")
	end

	--level_changers section
	local lname = level.name()
	local sname = amk_load_variable("level_on_save","")

    if (amk_offline_alife) then
		amk_offline_alife.update_npc_tables()
	end
	if (amk_corpses) then
		amk_corpses.update_all_corpses()
	end
	if lname ~= sname and amk_objects then
		amk_objects.update()
	end

	-- Выдадим сообщения при переходе на уровень.
	if lname ~= sname and sname ~= "" then
		news_main.check_connection(lname, sname)
		amk_offline_alife.update_trade()
	end

	if sname=="l01_escape" and lname=="l04_darkvalley" then
		Actor:set_actor_position(vector():set(-44.38, 0.43, -541.47))
	end

	if lname ~= sname and sname ~= "" then
		reap_misc.rename_autosave(sname, lname)
	end

	w = get_weather_sect(lname)
	if amk_load_variable("blowout",0)>0 then amk_save_variable("weather",level.get_weather()) end
	level.set_weather("amk_for_blow",true)
	game.start_tutorial("restore_sun")

	if amk_load_variable("blowout",0)>0 and amk_load_variable("blowout",0)<4 then
		local bt=blowout_type()
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		if bt<1 then
			level.set_weather("amk_for_blow",true)
			level.add_pp_effector("vibros.ppe", 2001, true)
			blowout_psy_sound("start")
		end
	end

	if Actor and not has_alife_info("game_over") then
		local flame = Actor:object("wpn_flame")
		if flame then
			Actor:iterate_inventory(
				function(dummy,item)
					if item:section()=="wpn_flame" then
						AI:release(AI:object(item:id()))
					end
				end
				,Actor)

		end
	end
end

function restore_sun()
  if amk_load_variable("blowout",0)==0 then level.set_weather(w,true) end

	local lname = level.name()
	local sname = amk_load_variable("level_on_save","")
  amk_save_variable("level_on_save",lname)
  if sname=="l12_stancia_2" and lname=="l11_pripyat" then
		Dream:sleep(1)
  end

	if not has_info("storyline_actor_start") then
		start_blow_timer()
	end
	sync_done=true
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **         FREEPLAY           **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function freeplay()
	amk_save_variable("freeplay",1)

	local obj = AI:story_object(6001)
	if not obj then
		AI:create(5963)
	end

	for a=1,5 do
		amk_anoms.after_blow_on()
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      NEWS_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function show_news()
	news_main.on_news()

	if level.indoor() == false then -- Радиомолчание
		if math_random()>0.2 then
			if math_random()>0.875 then
				local comm = math_random(6)
				if comm == 1 then
					sound_object("device\\pda\\pda_news"):play(Actor, 0, sound_object.s2d)
					local dolg_news=amk_dolg.get_strings()
					Actor:give_game_news(dolg_news, "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
				elseif comm == 2 then
					sound_object("device\\pda\\pda_news"):play(Actor, 0, sound_object.s2d)
					local freedom_news=amk_freedom.get_strings()
					Actor:give_game_news(freedom_news, "ui\\ui_iconsTotal", Frect():set(498,94,83,47), 0, 15000)
				else
					sa_main.dynamic_news()
				end
			end
		else
			if amk_uniq_news_lists and math_random()>0.5 then
				local uniq=amk_uniq_news_lists.get_strings()
				local name,sname = amk_names_lists.get_strings()
				amk.send_tip(uniq,name.." "..sname,nil,15,"uniq", "news")
			elseif amk_modders then
				sound_object("device\\pda\\pda_news"):play(Actor, 0, sound_object.s2d)
				local mod_news=amk_modders.get_strings()
				Actor:give_game_news(mod_news, "ui\\ui_iconsTotal", Frect():set(498,47,83,47), 0, 15000)
			end
		end
	end
	amk_g_start_timer("show_news",0,0,math_random(40,80))
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      SLEEP_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function reduce_need_sleep(time)
	local tmp=amk_load_variable("gg_need_sleep",0)
	tmp=tmp-time*120
	if tmp<0 then tmp=0 end
	amk_save_variable("gg_need_sleep_nrg",0)
	amk_save_variable("block_sleep_menu",0)
	amk_save_variable("gg_need_sleep",tmp)
	test_sleep_pp()
end

function test_for_need_sleep()
	if not actor_flags.sleep_state then
		amk_save_variable("gg_need_sleep",amk_load_variable("gg_need_sleep",0)+1)
		test_sleep_pp()
	end
	amk_g_start_timer("gg_need_sleep",0,0,6)
end

function test_sleep_pp()
	local tmp=amk_load_variable("gg_need_sleep",0)
	if tmp>360 then
		Dream:sleep(5+amk_load_variable("gg_need_sleep_nrg",0))
	end
	if tmp>300 then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, 5.0)
	else
		level.remove_pp_effector(999)
	end
end

function test_for_need_sleep_nrg()
	local n=amk_load_variable("gg_need_sleep_nrg",0)
	if n<3 then
		amk_save_variable("gg_need_sleep_nrg",n+1)
		amk_save_variable("gg_need_sleep",amk_load_variable("gg_need_sleep",0)-30+n*10)
		test_sleep_pp()
	end
	amk_g_start_timer("block_sleep_menu",0,1,0)
	amk_save_variable("block_sleep_menu",1)
end

function sleep_action(snd)
	local enemy=false
	local actorPos = Actor:position()
	for npcId, obj in pairs(db.creatures) do
		if (( obj:is_stalker() and amk.get_npc_relation(obj,Actor)=="enemy" ) or obj:is_monster())
			and obj:position():distance_to(actorPos) < 40 and obj:see(Actor) then
			enemy=true
			break
		end
	end
	if enemy==true then
		amk.send_tip(game.translate_string("not_need_sleep_enemy"),nil,nil,5)
	else
		if amk_load_variable("blowout",-1)>-1 and amk_load_variable("blowout",-1)<5 then
			amk.send_tip(game.translate_string("blowout_not_sleep"),nil,nil,5)
		else
			if amk_load_variable("block_sleep_menu",0)==0 then
				if amk_load_variable("gg_need_sleep",0)>10 then
					if snd then
						say(snd)
					end
					local spwn=ui_cheat.cheat(get_hud())
					level.start_stop_menu(spwn,true)
				else
					amk.send_tip(game.translate_string("not_need_sleep"),nil,nil,5)
				end
			else
				amk.send_tip(game.translate_string("not_need_sleep_nrg"),nil,nil,5)
			end
		end
	end
end

function test_for_need_sleep_matras()
	sleep_action([[inventory\inv_sleeping]])
	amk.spawn_item_in_inv("matras")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **    AMK_METKA     **   **   **   **   **    **   **   **   **
--'*******************************************************************************
local beakons={}
function check_beacon_drop(obj)
	if obj:section()=="amk_metka" then
		beakons[obj:id()]=true
	end
end

function check_metka()
	for id,v in pairs(beakons) do
		local obj=level_object_by_id(id)
		if obj then
			beakons[id]=nil
			if obj:parent()==nil then
				local spwn=ui_dots.dots(get_hud(),id)
				level.start_stop_menu(spwn,true)
			end
		end
	end
end

-- Динамическая музыка
local next_update=0
local inert = 1000
local clicks_prev = 200
local music_section=""
local music_previous_section=""
local music_next_section_start_time=0
local music_stop_previous=0
local music=false
local music_init = 0
local music_themes = {}
local music_phases={}
local musicflag=1
local music_objs={[1] = nil,[2] = nil}
local music_stor={ enemy_see_actor=0, actor_see_enemy=0, enemy_hit_actor=0, actor_hit_enemy=0 }
local music_lo_lvl=7
local music_hi_lvl=17
local music_graph = {}

function build_music_graph()
	local lvls = {
		lo	= music_lo_lvl,
		hi	= music_hi_lvl
	}
	local lname = level.name()
	local skip = false

	local sect = "music_themes"
	local sini = ini_file("scripts\\amk\\music.ltx")
	if sini:section_exist(sect) then
		local value1, tmp, t, tt
		sini:iterate_lines(sect, function(result, id, value)
			value1 = string.explode(value, "|", true)
			value = {}

			for k,v in pairs(value1) do
				tmp = string.explode(v, "=", true)
				value[tmp[1]] = tmp[2]
			end

			if value.map then
				t = string.explode(value.map, ",", true)
				for kk,vv in pairs(t)do
					skip = skip or vv == lname
				end
				skip = not skip
			else
				skip = false
			end

			if not skip then
				table.insert(music_themes, id)
				t = sini:key_value(id.."_music_files")
				t.null = ""
				for k,v in pairs(t) do
					music_phases[id.."_"..k]=v
					if not music_graph[id.."_"..k] then
						music_graph[id.."_"..k] = {}
					end
					tt = sini:key_value(id.."_graph_"..k)
					for kk,vv in pairs(tt) do
						tmp = string.explode(vv, ",", true)
						music_graph[id.."_"..k][id.."_"..kk] = {lvls[tmp[1]],tmp[2]}
					end
				end
			end
		end)

		if #music_themes > 0 then
			return true
		else
			return false
		end
	end

	return false
end

function music_start(sound)
	if get_value("option_mus", 1) == 0 then
		return
	end
	if not music then
		if music_objs[1] == nil then
			music_objs[1] = amk_music.amk_music()
		end
		if music_objs[2] == nil then
			music_objs[2] = amk_music.amk_music()
		end
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time = music_objs[musicflag]:play()-200
		music_previous_section = music_section
		musicflag = 3-musicflag
	end

	music = true
end

function music_change(sound)
	if music then
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time = music_objs[musicflag]:play_at_time(music_next_section_start_time+200)-200
		musicflag=3-musicflag music_previous_section=music_section
	end
end

function interactive_music()
	amk.oau_reason="music begin"

	if get_value("option_mus", 1) == 0 then
		if music then
			if music_objs[1] then music_objs[1]:stop() end
			if music_objs[2] then music_objs[2]:stop() end
		end
		return
	end
	if music_init == -1 then return end
	if music_init == 0 then
		if build_music_graph() then
			music_init = 1
		else
			music_init = -1
			return
		end
	end
	if not music then
		if next_update <= time_real_ms then
			music_select_section(inert)
			next_update = time_real_ms + inert
		end
	end
	if not music and music_previous_section == "" and music_section ~= "" then
		music_start(music_section)
	end
	if music and music_previous_section ~= "" and music_section == "" then
		music_previous_section = ""
	end
	if music then
		music_objs[1]:update()
		music_objs[2]:update()
		if time_real_ms > music_next_section_start_time then
			music_select_section(music_objs[musicflag]:length())
			if music_section ~= "" then
				music_change(music_section)
			else
				music = false
			end
		end
	end

	amk.oau_reason=""
end

function reset_music_cntrs(c)
	music_stor.actor_see_enemy = music_stor.actor_see_enemy-2*c
	music_stor.enemy_see_actor = music_stor.enemy_see_actor-2*c
	music_stor.actor_hit_enemy = music_stor.actor_hit_enemy-8*c
	music_stor.enemy_hit_actor = music_stor.enemy_hit_actor-4*c
	if music_stor.actor_see_enemy < 0 then
		music_stor.actor_see_enemy = 0
	elseif music_stor.actor_see_enemy > music_lo_lvl then
		music_stor.actor_see_enemy = music_lo_lvl
	end
	if music_stor.enemy_see_actor < 0 then
		music_stor.enemy_see_actor = 0
	elseif music_stor.enemy_see_actor > music_lo_lvl then
		music_stor.enemy_see_actor = music_lo_lvl
	end
	if music_stor.actor_hit_enemy < 0 then
		music_stor.actor_hit_enemy = 0
	elseif music_stor.actor_hit_enemy > music_hi_lvl then
		music_stor.actor_hit_enemy = music_hi_lvl
	end
	if music_stor.enemy_hit_actor < 0 then
		music_stor.enemy_hit_actor = 0
	elseif music_stor.enemy_hit_actor > music_hi_lvl then
		music_stor.enemy_hit_actor = music_hi_lvl
	end
end

local shoot_helper = 0

function get_dist(obj, tech)
	local pos, apos = obj:position(), Actor:position()
	if not tech then
		return pos:distance_to(apos)
	end

	pos.y = apos.y

	return pos:distance_to(apos) / 4
end

function calc_adrenaline(act,obj,typ)
	if not actor_flags.alive then return end

	if act == "actor_see_enemy" then
		music_stor.actor_see_enemy = music_stor.actor_see_enemy+50/get_dist(obj, typ == true)
	elseif act == "enemy_see_actor" then
		music_stor.enemy_see_actor = music_stor.enemy_see_actor+50/get_dist(obj, typ == true)
	elseif act == "actor_hit_enemy" then
		if time_global() > shoot_helper then
			music_stor.actor_hit_enemy = music_stor.actor_hit_enemy+13
			shoot_helper = time_global()+500
		end
	elseif act == "enemy_hit_actor" then
		music_stor.enemy_hit_actor = music_stor.enemy_hit_actor+8
	end
end

function music_select_section(time)
	reset_music_cntrs(time/inert)

	local cs = music_section
	local eseen = music_stor.enemy_see_actor
	if eseen >= music_lo_lvl then
		eseen = music_lo_lvl
	end
	local aseen = music_stor.actor_see_enemy
	if aseen >= music_lo_lvl then
		aseen = music_lo_lvl
	end
	local ehits = music_stor.enemy_hit_actor
	if ehits >= music_hi_lvl then
		ehits = music_hi_lvl
	end
	local ahits = music_stor.actor_hit_enemy
	if ahits >= music_hi_lvl then
		ahits = music_hi_lvl
	end

	local lvl = aseen+eseen
	if lvl > music_hi_lvl*0.75 then
		lvl = music_hi_lvl*0.75
	end
	lvl = ehits+lvl+ahits

	if music_section == "" then
		music_section = table.random(music_themes).."_null"
	end

	local last_sel_max = 0
	local last_sel_min = 1000
	for k,v in pairs(music_graph[music_section]) do
		if v[2] == "<" and v[1] < last_sel_min then
			if v[1] > lvl then
				music_section=k
				last_sel_min=v[1]
			end
		end
		if v[2] == ">" and v[1] >= last_sel_max then
			if v[1] <= lvl then
				music_section = k
				last_sel_max = v[1]
			end
		end
	end

	if string_find(music_section,"null") then
		music_section = ""
	end
	if music and music_previous_section ~= "" and music_section == "" then
		music_previous_section = ""
	end

	local l = 0
	if music and music_objs[musicflag] ~= nil then
		l = music_objs[musicflag]:length()
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **      BLOWOUT        **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function blowout_phantoms()
	local blow=amk_load_variable("blowout",-1)
	if blow>1 and blow<4 and blowout_type()<2 then
	  local lname=level.name()
		if not in_hide and amk_hideouts.blowouts_phantoms[lname] then
			local phantoms=amk_hideouts.blowouts_phantoms[lname]
			if phantoms and phantoms.count>0 then
				if math_random()<phantoms.probability then
					if phantom_manager:phantom_count()<phantoms.count then
						local yaw	 			= math.pi*2.0*math_random()
						local radius 			= phantoms.radius*(math_random()/2.0+0.5)
						local height 			= phantoms.height*math_random()
						local a_pos 			= Actor:position()
						local pos 				= vector():set(math.sin(yaw)*radius+a_pos.x,a_pos.y+height,math.cos(yaw)*radius+a_pos.z)
						phantom_manager.spawn_phantom(pos)
					end
				end
			end
		end
	end
end

function blowout_scary_sounds()
	local blow=amk_load_variable("blowout",-1)
	if blow>0 and blow<4 then
		local snd_obj = xr_sound.get_safe_sound_object(amk_hideouts.blowout_sounds[math_random(#amk_hideouts.blowout_sounds)])
		local a=vector()
		a.x=math_random(0,10)
		a.y=math_random(0,10)
		a.z=math_random(0,10)
		snd_obj:play_at_pos(Actor, Actor:position():add(a))
		amk_start_timer("blowout_ss",math_random(10,30),0)
	end
end

function blowout_psy_sound(action)
	if action=="start" then
		snd_obj_eq = sound_object([[ambient\earthquake]],sound_object.looped+sound_object.s2d)
    snd_obj_eq:play(Actor, 4, sound_object.looped+sound_object.s2d)
	end
	if action == "stop" then
		if snd_obj_eq then snd_obj_eq:stop() end
	end

	local lname=level.name()
	if not amk_hideouts.blowouts_phantoms[lname] then return end
	local psy_sound=amk_hideouts.blowouts_phantoms[lname].psy_sounds or false
	if not psy_sound then return end

	if action=="start" then
		local level_vol=amk_hideouts.blowouts_phantoms[lname].level_vol or 1
		sound_obj_right, sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
		sound_obj_left:play_at_pos (Actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		sound_obj_right:play_at_pos(Actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		snd_volume	= level.get_snd_volume()
		level.set_snd_volume( level_vol )
	end
	if action == "stop" then
		if sound_obj_left then sound_obj_left:stop() end
		if sound_obj_right then sound_obj_right:stop() end
		if snd_volume then level.set_snd_volume(snd_volume) end
	end
end

function Run_Blowout_pp()
	local blow_enabled = system_ini():r_float("blowout_period","enabled")
	if blow_enabled>0 then
		local bt = blowout_type()
		if bt == 2 then
			start_blow_timer()
			return
		end

		Dream:stopper()
		set_value("blowout", 1)
		level.add_cam_effector("camera_effects\\shell_shock.anm", 2004, false, "")
		say([[ambient\organic_moan1]])
		play_safe_sound_object([[ambient\blowout]])
		if bt < 1 then
			level.add_pp_effector("monolith_off.ppe", 2003, false)
		end
		amk_start_timer("blowout_ss",math_random(5,15),0)
		amk_start_timer("blowout",11,0)
		amk_hideouts.pda_show_hideouts()
	end
	start_blow_timer()
end

function start_blow_timer()
	local shift = system_ini():r_float("blowout_period","shift")
	shift = (math_random()*shift)-(shift/2)
	local t_time = system_ini():r_float("blowout_period","time")
	amk_g_start_timer( "blow_shift",0,0, t_time+shift )
	news_main.next_blow(t_time+shift)
end

function Blowout_pp(phase)
---------------------------------------------------
--' TimeFactor = 5
--' GameMin = 12 RealSec
--' TimeBlowout = 184 RealSec

--' Начало (Timer = 36 sec)
--' Первая Фаза (Timer = 36 sec)
--' Вторая Фаза (Timer = 36 sec)
--' Третья Фаза (Timer = 36 sec)
--' Четвертая Фаза (Timer = 60 sec)
--' Конечная Фаза (Timer = 0 sec)
---------------------------------------------------

	local bt=blowout_type()

	if phase==0 then
		amk_anoms.pre_blow_off()
		if bt<1 then
			level.set_weather("pre_blow",true)

			local hr = level.get_time_hours()
			if level.get_time_minutes() >= 30 then
				hr = hr < 23 and hr + 1 or 0
			end

			level.set_weather_fx("amk_surge_day_" .. hr)
		end
		amk_g_start_timer("blowout", 0, 0, math_random(2, 4), 1)
	elseif phase==1 then
		local snd_obj = xr_sound.get_safe_sound_object([[ambient\earthquake]])
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		snd_obj = xr_sound.get_safe_sound_object([[anomaly\blowout]])
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		blowout_psy_sound("start")
		if bt<1 then
			level.add_pp_effector("vibros.ppe", 2001, true)
		end
		in_hide=false
		amk_g_start_timer("blowout", 0, 0, math_random(2, 4), 2)
		amk_save_variable("blowout",2)
	elseif phase==2 then
		amk_g_start_timer("blowout", 0, 0, math_random(2, 4), 3)
	elseif phase==3 then
		amk_anoms.after_blow_on()
		amk_anoms.off_testobj()
		amk_save_variable("blowout",3)
		local h = hit()
		local cr
		h.type = hit.strike
		h.power = 1000
		h.impulse = 1000
		for a=1,65534,1 do
			cr=level_object_by_id(a)
			if cr~=nil and cr:section()=="m_crow" and math_random(0,100)<70 then
				h.draftsman = cr
				h.direction = cr:direction()
				cr:hit(h)
			end
		end
		amk_g_start_timer("blowout", 0, 0, math_random(2, 4), 4)
	elseif phase==4 then
		amk_save_variable("blowout",4)
		level.remove_cam_effector(2002)
		if bt<1 then
			level.remove_pp_effector(2001)
			level.add_pp_effector("monolith_off.ppe", 2003, false)
		end
		blowout_psy_sound("stop")
		amk_start_timer("blowout",5,5)
	elseif phase==5 then
		level.set_weather(amk_load_variable("weather", "default"), true)
		if bt<1 then
			local snd_obj = xr_sound.get_safe_sound_object([[anomaly\teleport_work2]])
			snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)

			local sect = "groza_groza_" .. level.get_time_hours() .. get_moon_phase()
			level.set_weather(dynweather_types[level.name()] .. "_" .. sect, true)
			amk_save_variable("dynw","groza")
			amk_save_variable("dynlasthour", level.get_time_hours())
			amk_save_variable("dynweather", sect)
		end
		del_value("blowout")
		amk_hideouts.pda_hide_hideouts()
-- TAG --
		tag_spb.zombie_team()
	end
end

local next_actor_hit_time=0
function on_blowout_hit_actor(force)
	if force or next_actor_hit_time<time_global() then
		next_actor_hit_time=time_global()+1000
		on_blowout_hit(Actor)
	end
end

function check_safe_place(npc, khit)
	local sleep = 1 - dmx_sleep_binder.safe_place_coef(npc)
	if sleep == 1 then
		return khit == 1, khit
	else
		return false, sleep < khit and sleep or khit
	end
end

function blowout_khit(npc, hide)
	if not npc then npc = Actor end

	if hide then
		if not hide.zone then return check_safe_place(npc, 1) end

		local need_hit = not check_npc_in_hideout(npc,hide)
		if not (need_hit or hide.defence) then
			return false, 0
		else
			return check_safe_place(npc, need_hit and 1 or hide.defence)
		end
	end

	local hides=amk_hideouts.hide[curr_level]
	local tmp
	if hides then
		for i,o in ipairs(hides) do
			if o.zone then
				for j,v in ipairs(o.zone) do
					if v.p3 then
						tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
					else
						tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
					end
					if tmp then
						return false, (o.defence and check_safe_place(npc, o.defence) or 0)
					end
				end
			end
		end
	end

	return check_safe_place(npc, 1)
end

function on_blowout_hit(npc,hide)
	local bt=blowout_type()
	if bt>0 or amk_load_variable("blowout",-1)~=3 then
    if npc:id()==0 then in_hide = true end
		return false
	end

	local need_hit, khit = blowout_khit(npc, hide)
	khit = khit + khit * level.get_game_difficulty() / 6

    if npc:id()==0 then in_hide = not need_hit end
    if (need_hit or khit>0) and amk.load_variable("blowout",-1)==3 and not (hide and hide.hidden) then
		local h = hit()
    	h.power = (amk_hideouts.blowout_damages[curr_level] or 0.01)*khit
    	h.impulse = 0
		h.draftsman = npc
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine") -- чтобы учитывалась броня
    	h.type = hit.strike
		npc:hit(h)
    	h.type = hit.telepatic
		npc:hit(h)
    	h.type = hit.radiation
		npc:hit(h)
    end
    return need_hit or khit>0
end

function check_npc_in_hideout(npc,hide)
	local not_in_zone=true
	if hide and hide.zone then
		for k,v in pairs(hide.zone) do
			if v.p3 then
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
			else
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
			end
		end
	end
	return not not_in_zone
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       ANOMS SPAWN        **   **   **   **   **    **   **   **
--'*******************************************************************************

function blowout_type()
	local lname=level.name()
	local t=amk_hideouts.blowout_types[lname]
	if t>1 and amk_load_variable("freeplay",0)==2 then t=0 end
	return t or 0
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **    **      RECEPTS       **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function check_usable_item(obj)
	local info=nil
	if obj:name()=="mil_stalker0012" then
		info="info_amk_recipt_stone_dikoobraz"
	elseif level.name()=="l01_escape" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_shkura"
		amk.drop_item(Actor,obj)
		amk.remove_item(obj)
	elseif level.name()=="l04u_labx18" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_simbion"
		amk.drop_item(Actor,obj)
		amk.remove_item(obj)
	elseif level.name()=="l08u_brainlab" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_dummy"
		amk.drop_item(Actor,obj)
		amk.remove_item(obj)
	end
	if Actor==nil or info==nil or Actor:has_info(info) then
		return
	end
	Actor:give_info_portion(info)
end

function generate_recipe(obj)
	if obj:is_monster() then
		return
	end
	local info=nil
	local prob = 100
	if curr_level == "l10_radar" and obj.character_community and
          obj:character_community()=="monolith" then
		info="info_amk_recipt_controller_skalp"
		prob=10
	end
	if not info or has_info(info) or math_random(100) > prob then return end

	-- Сгенерим рецепт
	give_info(info)
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      OUTFIT_HUD        **   **   **   **   **    **   **   **   **
--'*******************************************************************************

local current_static, curr_sect
local static_enabled
local current_zoom=1

local last_rect = {
	width	= screen.width,
	height	= screen.height,
	zoom	= 0
}

function get_hud_rect()
	if last_rect.width ~= screen.width or last_rect.height ~= screen.height then
		set_static_rescale_factor(screen.height / screen.width / 0.75)
		_G.refactor = get_static_rescale_factor()

		last_rect.width = screen.width
		last_rect.height = screen.height
		last_rect.zoom = 0
	end

	local zoom
	if not actor_flags.in_car then
		zoom = math_floor(Actor:get_camera_fov() * 10 + 0.5) / math_floor(screen.fov * 10 + 0.5)
		if zoom < 1 then
			zoom = 1
		end

		zoom = (zoom - 1) * 1.5 + 1
	else
		zoom = 1
	end
	if zoom == last_rect.zoom then
		return last_rect
	end

	last_rect = {
		width	= screen.width,
		height	= screen.height,
		zoom	= zoom,
		x	= -768 * zoom + 768,
		y	= (-512 * zoom + 512) / refactor - (768 / refactor - 768) / 2,
		w	= 1024 * zoom,
		h	= 768 * zoom / refactor
	}
	return last_rect
end

function set_hud_tex(sect)
	local enabled = get_value("option_hud", 2)
	local rect = get_hud_rect()

	local static
	if sect ~= curr_sect then
		static = sect and config:r_string_ex(sect, "hud_static")
		curr_sect = sect
	else
		static = current_static
	end

	set_blurs(enabled == 2 and static and static ~= "hud_sci", rect)

  if enabled==static_enabled and current_static==static and
      rect.zoom==current_zoom then
		return
	end

	sa_main.rect_change()
	current_zoom = rect.zoom

	if current_static~=static then
		if current_static then
			hud:RemoveCustomStatic(current_static)
		end
		if static then
			hud:AddCustomStatic(static)
		end
		sa_main.reattach_statics()
		current_static=static
	end

	local wnd = hud:GetCustomStatic(current_static)
	if wnd then
		wnd = wnd:wnd()
	end
	if enabled == 0 and wnd then
		wnd:SetWidth(0)
	elseif wnd then
		wnd:SetWndRect(rect.x,rect.y,rect.w,rect.h)
	end
	static_enabled=enabled
end

local blurs=nil
local blurval=0 -- уровень запотевания от 0 до 1
local blurlt=0 -- время последнего обновления
local blurcyctime=0 -- время начала последнего цикла дыхания (выдох)
local blurlastphase=0

function set_blurs(enabled,rect)
	if (not blurs) or hud:GetCustomStatic("hud_blur1")==nil then
		blurs={}
		for i=1,4 do
			hud:AddCustomStatic("hud_blur"..i)
			blurs[i]=hud:GetCustomStatic("hud_blur"..i):wnd()
			blurs[i]:SetWidth(0)
		end
	end
	if not enabled then
		for i=1,4 do
			blurs[i]:SetWidth(0)
		end
		return
	end

-- Циклы в зависимости от силы дыхания: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
	local power=Actor.power
	local period=1.0+power*power*1.0 -- текущая частота дыхания от 30 до 120 циклов в минуту
	local expirt=0.3
	local breathpower=3

	local delta=(time_real_ms-blurlt)/1000 -- дельта в секундах
	local phase=(time_real_ms-blurcyctime)/1000 -- фаза дыхательного цикла в сек.
	blurlt=time_real_ms
	if phase>period then
		phase=phase%period
		blurcyctime=blurlt-phase*1000
	end
	if blurlastphase>phase then
		blurlastphase=0
	end

	local blurdelta=delta*-0.7 -- работа вентилляции
	if blurlastphase<expirt and phase<expirt then
		blurdelta=blurdelta+(phase-blurlastphase)*breathpower
	elseif blurlastphase<expirt then
		blurdelta=blurdelta+(expirt-blurlastphase)*breathpower
	end
	blurlastphase=phase

	blurval=blurval+blurdelta
	if blurval>0.999 then
		blurval=0.999
	elseif blurval<0 then
		blurval=0
	end

	local tm=math_floor(blurval*3)
	local tmn=(tm+1)
	local v=blurval*3-math_floor(blurval*3)
	v=1-v
	local v1=1-v
	if tm~=0 then
		blurs[tm]:SetColor(GetARGB(v*255,255,255,255))
	end
	if tmn~=0 then
		blurs[tmn]:SetColor(GetARGB(v1*255,255,255,255))
	end
	for i=1,4 do
		if i==tm or i==tmn then
			blurs[i]:SetWndRect(rect.x,rect.y,rect.w,rect.h)
		else
			blurs[i]:SetWndRect(rect.x,rect.y,0,0)
		end
	end
end

function check_hud()
	local hudotf = Actor:get_current_outfit()

	set_hud_tex(hudotf and hudotf:section())
	ui_rad.update()
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **     SPAWN_OBJ        **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function spawn_fuel()
	local ballons = {
	{108.16, -6.30, -18.17, 412158, 115},
	{370.12, 15.06, -39.48, 594401, 0},
	{58.30, 19.36, 156.50, 345136, 97},
	{-92.21, -1.18, -212.66, 115177, 268},
	{-74.17, 1.80, 8.45, 127766, 329},
	{3.18, 1.24, 42.48, 243919, 490},
	{15.35, -1.90, 2.40, 255433, 479},
	{77.54, 0.30, -108.47, 312366, 427},
	{-145.54, -0.00, -199.61, 92520, 650},
	{-130.08, 10.00, -196.67, 109214, 629},
	{-140.13, 10.00, -197.94, 98647, 629},
	{37.28, 1.02, -49.90, 220638, 1084},
	{476.68, -46.94, -0.23, 155714, 1919},
	{76.80, -2.54, -23.93, 36304, 1970},
	{94.78, 0.03, -6.88, 88986, 1514},
	{-3.24, -11.75, -263.07, 33794, 1448}
	}
	local kanisters = {
	{-293.80, -14.18, -15.36, 15703, 67},
	{-16.57, 2.48, 58.82, 260308, 88},
	{-74.81, -1.30, 160.52, 196218, 163},
	{-69.94, 0.97, 6.51, 131411, 329},
	{64.01, 0.60, 148.46, 235341, 364},
	{63.29, -0.20, 5.10, 299326, 461},
	{-28.52, -1.04, -181.84, 211644, 676},
	{2.93, -1.88, -13.30, 176553, 1047},
	{41.71, 4.54, -86.36, 227110, 1100},
	{7.90, 1.41, -71.93, 183138, 1041},
	{158.71, -0.76, -259.73, 358950, 962},
	{-342.92, -13.60, 390.01, 11235, 1847},
	{305.22, -36.99, -24.40, 68330, 1930},
	{55.02, 1.17, 40.35, 68094, 1511},
	{-114.14, -0.00, 121.75, 43453, 1315},
	{31.33, 5.60, -13.51, 4683, 1538}
	}
	for k,v in pairs(ballons) do
		if #v == 5 then
			AI:create("amk_ballon",vector():set(v[1], v[2], v[3]), v[4], v[5])
		end
	end
	for k,v in pairs(kanisters) do
		if #v == 5 then
			AI:create("explosive_mobiltank",vector():set(v[1], v[2], v[3]), v[4], v[5])
		end
	end
end

-- БТР на блокпосту
function spawn_military_btr()
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-168.11, -29.71, -303.21),81808,38 ) ,"vehicle_btr")
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-237.85, -26.23, -378.81),17147,14 ) ,"vehicle_btr")
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-189.55,-0.24,-140.49),46901,559),"vehicle_btr")
	spawn_military_tech_pack( AI:create("vehicle_btr",vector():set(-93.81,0,-185.82),146369,607),"vehicle_btr")
	spawn_military_tech_pack( AI:create("helicopter",vector():set(-150.0,-40.0,-620.0),128298,11 ) ,"helicopter")
end

function spawn_military_tech_pack(obj, spawn_item)
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	if spawn_item == "helicopter" then
		-- свойства cse_motion
		motion_name = packet:r_stringZ()
	end

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health
	local cse_alife_helicopter__unk1_sz
	local engine_sound

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = packet:r_stringZ()
		engine_sound = packet:r_stringZ()
	elseif	spawn_item == "vehicle_btr" then
		health = packet:r_float()
	end

	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	if spawn_item == "helicopter" then
		packet:w_stringZ("[logic]\ncfg = scripts\\esc\\esc_blockpost_heli.ltx")
	elseif	spawn_item == "vehicle_btr" then
		packet:w_stringZ("[logic]\ncfg = scripts\\esc\\esc_blockpost_btr.ltx")
	end
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)

	if spawn_item == "helicopter" then
		packet:w_stringZ(motion_name)
	end

	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = "idle"
		engine_sound = "alexmx\\helicopter"
		packet:w_stringZ(cse_alife_helicopter__unk1_sz)
		packet:w_stringZ(engine_sound)
	elseif  spawn_item == "vehicle_btr" then
		health = 1
		packet:w_float(health)
	end
	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       DYNWEATHERS       **   **   **   **   **    **   **   **
--'*******************************************************************************

local dynweathers = {
	september = {
		clear = {
			clear		= 50,
			pasmurno	= 50,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 45,
			pasmurno	= 25,
			rain		= 20,
			groza		= 10
		},
		rain = {
			clear		= 0,
			pasmurno	= 65,
			rain		= 15,
			groza		= 20
		},
		groza = {
			clear		= 0,
			pasmurno	= 80,
			rain		= 20,
			groza		= 0
		}
	},
	october = {
		clear = {
			clear		= 35,
			pasmurno	= 65,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 30,
			pasmurno	= 40,
			rain		= 20,
			groza		= 10
		},
		rain = {
			clear		= 0,
			pasmurno	= 50,
			rain		= 25,
			groza		= 25
		},
		groza = {
			clear		= 0,
			pasmurno	= 70,
			rain		= 30,
			groza		= 0
		}
	},
	depressive = {
		clear = {
			clear		= 15,
			pasmurno	= 85,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 20,
			pasmurno	= 50,
			rain		= 20,
			groza		= 10
		},
		rain = {
			clear		= 0,
			pasmurno	= 45,
			rain		= 20,
			groza		= 35
		},
		groza = {
			clear		= 0,
			pasmurno	= 65,
			rain		= 20,
			groza		= 15
		}
	},
	mist = {
		clear = {
			clear		= 10,
			pasmurno	= 90,
			rain		= 0,
			groza		= 0
		},
		pasmurno = {
			clear		= 10,
			pasmurno	= 20,
			rain		= 35,
			groza		= 35
		},
		rain = {
			clear		= 0,
			pasmurno	= 25,
			rain		= 35,
			groza		= 40
		},
		groza = {
			clear		= 0,
			pasmurno	= 25,
			rain		= 55,
			groza		= 20
		}
	}
}

function get_moon_phase()
	local t = game.get_game_time():get_table()
	if t.hour > 4 and t.hour < 23 then return "" end

	local months = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
	local math_mod = math.mod
	local day = t.day

	for yy = 1, t.year - 2012 do
		day = day + ((math_mod(yy - 1, 4) == 0 and 366) or 365)
	end
	for mm = 1, t.month - 1 do
		day = day + months[mm]
	end
	if math_mod(t.year, 4) == 0 and t.month > 2 then
		day = day + 1
	end
	if t.hour >= 12 then
		day = day + 1
	end

	local phase = math_mod(day, 7)
	phase = phase * 2 + math_mod(day - phase, 2) + 1
	if phase < 10 then
		return "_ph_0" .. phase
	else
		return "_ph_" .. phase
	end
end

function weather_manager()
	if sync_done==false then return end
	local hour = level.get_time_hours()
	local dynlasthour = amk_load_variable("dynlasthour",-1)
	if dynlasthour<hour or (hour==0 and dynlasthour==23) then
		local next_weather
		local rnd = math_random(0,100)
		local dynw = amk_load_variable("dynw", "pasmurno")
		local dynw_type = dynweather_types[level.name()]
		for k,v in pairs(dynweathers[dynw_type][dynw]) do
			if v > 0 and rnd <= v then
				next_weather=k
				break
			end
			rnd=rnd-v
		end
		local sect = dynw .. "_" .. next_weather .. "_" .. hour .. get_moon_phase()
		if (amk_load_variable("blowout",0)==0 and blowout_type()<1) then
			level.set_weather(dynw_type .. "_" .. sect, true)
		end
		news_main.on_weather_change(dynw, next_weather)

		amk_save_variable("dynw",next_weather)
		amk_save_variable("dynlasthour",hour)
		amk_save_variable("dynweather", sect)
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       AMK_RESPAWNS     **   **   **   **   **    **   **   **
--'*******************************************************************************
function switch_monster_online(obj)
	se_monster.need_be_online[obj.id]=true
end

function switch_monster_offline(obj)
	se_monster.need_be_online[obj.id]=false
end

function respawned(obj, respawner)
	if not obj or not (obj:is_monster() or obj:is_stalker()) then return end

	local sini = respawner:spawn_ini()
	if not sini:line_exist("respawn", "creature_binded_logic") then return end

	local custom =
		"[smart_terrains]\n" ..
		"none = true\n" ..
		"[logic]\n" ..
		"cfg = scripts\\amk\\" .. sini:r_string("respawn", "creature_binded_logic") .. ".ltx"
	obj:modify_netpk("custom_data", custom)

	obj.ini_initialized = false
	obj:on_before_register()
end

local respawners={}

function spawn_unspawned_respawners()

	for a=1,65534 do
		local obj = AI:object(a)
		if obj then
			local oini = obj:spawn_ini()
			if oini:line_exist ("respawn", "amk_name") == true then
				local amk_name = utils.cfg_get_string(oini, "respawn", "amk_name", false, false, false, false)
				if amk_name then respawners[amk_name]=true end
			end
		end
	end

	local sini = ini_file("scripts\\amk\\amk_respawns.ltx")

	local dv={}
	if sini:section_exist("default_values") then
		local result, id, value = nil, nil, nil
		for a=0,sini:line_count("default_values")-1 do
			result, id, value = sini:r_line("default_values",a,"","")
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				dv[amk.trim(id)]=amk.trim(value)
			end
		end
	end

	if sini:section_exist("amk_respawns") then
		local tmp={}
		local result, id, value = nil, nil, nil
		for a=0,sini:line_count("amk_respawns")-1 do
			result, id, value = sini:r_line("amk_respawns",a,"","")
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				table.insert(tmp, amk.trim(id))
			end
		end

		for k,v in pairs(tmp) do
			local flag = utils.cfg_get_bool(sini, "amk_respawns", v, true, false, false)
			if not respawners[v] and flag==true then
				local t = amk.parse_ini_section_to_array(sini, v)
				local xyzlg = amk.str_explode(",",t.xyzlg,true)
				local pos = vector():set(tonumber(xyzlg[1]),tonumber(xyzlg[2]),tonumber(xyzlg[3]))
				local respawner = amk.spawn_item("respawn",pos,tonumber(xyzlg[5]),tonumber(xyzlg[4]))
				local tbl = amk.get_spawner_data(respawner)
				t.xyzlg = nil
				t.amk_name = v

				for kkk,vvv in pairs(dv) do
					if t[kkk]==nil then
						t[kkk]=vvv
					end
				end

				tbl.custom = amk.gen_custom_data({respawn=t})
				amk.set_spawner_data(tbl, respawner)
				se_respawn.reinit_spawner_params(respawner:name(), true)
			end
			if flag==false then
				local o = se_respawn.get_respawner_by_name(v)
				if o then
					AI:release(o)
				end
			end
		end
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **          OTHER        **   **   **   **   **    **   **   **   **
--'*******************************************************************************

local last_armor_id=0
local last_condition=0

function repair_armor(val)
	local armor = Actor:item_in_slot(6)
	if armor then
		last_armor_id=armor:id()
		last_condition=val
		armor:set_condition(val)
	end
end

function check_armor()
	local armor = Actor:item_in_slot(6)

	if Actor:active_slot()==2 then
		local weapon = Actor:item_in_slot(2)
		local tmp = weapon and armor and armor:section()

		if tmp and weapon:section()=="wpn_pkm1" and not string_find(tmp, "exo") then
			Actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_pkm1")
			Actor:transfer_item(weapon, Actor)
			AI:release(tmpw)
		end
	end

	if not armor then
		last_armor_id=0
		return
	end
	if armor:id()~=last_armor_id then
		last_armor_id=armor:id()
		last_condition=armor:condition()
		return
	end
	if last_condition<armor:condition() then
		armor:set_condition(last_condition)
	else
		last_condition=armor:condition()
	end
end

function dezombify(id,v)
	local npc=level_object_by_id(id)
	if npc then
		if npc:alive()==false then
			return true
		end
		local sobj=AI:object(id)
		if sobj then
			npc:set_character_community(v.comm,0,0)
			npc:set_goodwill(v.gw,Actor)
			local orgtbl=amk.read_stalker_params(sobj)
			orgtbl.profile=string.gsub(orgtbl.profile,"(.*)_zombi","%1")
			-- amk.mylog("dezombified "..npc:name().." profile "..orgtbl.profile)
			amk.write_stalker_params(orgtbl,sobj)
			return true
		end
	end
	return false
end

btrs_friends={}

function build_btrs_table(obj, is_btr)
	if obj and ((is_btr and obj:get_car():GetfHealth() > 0) or
		    (obj:is_stalker() and obj:character_community() == "military" and obj:alive())) then
		btrs_friends[obj:id()] = is_btr or false
	end
end

function firebated(obj, amount, local_direction, who, bone_index)
	if who and bone_index > 0 then --false для отключения
		local script
		if obj:is_monster() then
			script=bind_monster
		elseif obj:is_stalker() then
			script=bind_stalker
		elseif obj:is_trader() then
			script = bind_trader
		end
		if script then
			local weapon = who:active_item()
			if not weapon or weapon:section()~="wpn_flame" then return end
			if string_find(obj:section(), "zomb") and obj.health<0.2 then obj:kill(obj) end
			script.play_particle(obj,
			{
				obj=obj,
				particle="amk\\flame",
				bone="bip01_spine1"
			})
		end
	end
end

local zombi_skeletons={
"physics\\dead_body\\skelet_combine_pose_03",
"physics\\dead_body\\skelet_combine_pose_04",
"physics\\dead_body\\skelet_combine_pose_05",
"physics\\dead_body\\skelet_torso"
}

function spawn_skel(obj)
	local skel = create("breakable_object", obj:position(), obj:level_vertex_id(), obj:game_vertex_id())
	local t = amk.get_breakable_data(skel)
	t.visual = table.random(zombi_skeletons)
	t.mass = 1.0
	t.physic_type = 3
	t.skeleton_flags = 1
	amk.set_breakable_data(t, skel)
end

function zomby_blow(obj)
	if obj:object("wpn_flame") then
		amk_particle.amk_particle({
				particle="explosions\\explosion_fuelcan",
				pos=obj:position(),
				sound=[[weapons\t_rgd5_explosion]]
			})
		local dist = Actor:position():distance_to(obj:position())
		if dist < 10 and Actor:see(obj) then
			local h = hit()
			h.impulse = 0
			h.draftsman = Actor
			h.direction = vector():set(0,0,0)
			h:bone("bip01_spine") -- чтобы учитывалась броня
			h.power = 1/dist
			h.type = hit.strike --chemical_burn
			Actor:hit(h)
			h.power = 15/dist
			h.type = hit.chemical_burn
			Actor:hit(h)
		end
		AI:release(AI:object(obj:id()))
	end
end

function firebat_ammo()
	local ammo=Actor:object("ammo_flame")
	if ammo then
		Actor:iterate_inventory(
			function(dummy,item)
				if item:section()=="ammo_flame" then
					AI:release(AI:object(item:id()))
				end
			end
			, Actor)
	end
end
