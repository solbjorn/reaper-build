--[[-----------------------------------------------------------------------------------------------
 File         : sa_callbacks.script
 Description  : Библиотека колбеков
 Copyright    : Shadows Addon
 Author       : Ray Twitty aka Shadows
 Date         : 06.11.2012
 Last edit    : 12.11.2018
--]]-----------------------------------------------------------------------------------------------
--[[-----------------------------------------------------------------------------------------------
 * ACTOR
--]]-----------------------------------------------------------------------------------------------
local pda_contacts_dialog
local hud_interface_mgr
local mob_health_bar
local car_mgr
---------------------------------------------------------------------------------------------------
local last_move_time
local next_500 = 0
---------------------------------------------------------------------------------------------------
function __init()
	if not sa_utils then
		abort("sa_utils is nil")
	end
	set_trade_filtration_on()
	set_manual_grouping_on()
	set_manual_highlight_on()
end
---------------------------------------------------------------------------------------------------
function actor_update(delta)
	if car_mgr then
		if last_move_time and last_move_time < time_real_ms then
			car_mgr.is_mouse_moving = false
			last_move_time = nil
		end
		car_mgr:update()
	end
	if mob_health_bar then
		mob_health_bar:update()
	end
	if not hud_interface_mgr then
		hud_interface_mgr = sa_hud_interface_mgr.get_hud_interface_mgr()
	end
	hud_interface_mgr:update()
	sa_inventory_items_mgr.repack_ammo()
	sa_main.overweight_power_fix()
	if next_500 < time_real_ms then
		sa_main.bunker_cooling_sound()
		next_500 = time_real_ms + 500
	end
end
---------------------------------------------------------------------------------------------------
function switch_mob_health_bar(obj)
	mob_health_bar = obj
end
---------------------------------------------------------------------------------------------------
function actor_net_spawn()
	sa_main.disable_ui_info()
	pda_talk.init()
end
---------------------------------------------------------------------------------------------------
local last_mob_type
local last_health
---------------------------------------------------------------------------------------------------
function actor_hit(binded, obj, amount, local_direction, who, bone_index)
	if last_mob_type then
		sa_main.hit_effectors(last_mob_type, who)
		last_mob_type = nil
	end
	if last_health then
		reap.hit_effectors(last_health - Actor.health)
		last_health = nil
	end
end
---------------------------------------------------------------------------------------------------
function actor_death(binded, victim, who)
	actor_flags.alive = false
	hud_interface_mgr:actor_death()
	sa_main.restore_torch(victim)
	reap_callback.actor_death(victim, who)
end
---------------------------------------------------------------------------------------------------
local trade_info = table.tohash({ "ui_inventory", "ui_trade", "ui_car_body" })
local trade_end_info = { }
for info, _ in pairs(trade_info) do
	trade_end_info[info .. "_hide"] = true
end
local trade_cond = nil
---------------------------------------------------------------------------------------------------
function item_take(obj)
	if trade_cond then
		sa_inventory_items_mgr.update_item_tradability_flags(obj, trade_cond)
	end
	reap_callback.item_take(obj)
	if screen.precache_frame == 0 then
		sa_inventory_items_mgr.artefacts_statistic(obj)
	end
end
---------------------------------------------------------------------------------------------------
local belt_obj_by_id = {}
---------------------------------------------------------------------------------------------------
function item_drop(obj)
	if trade_cond then
		sa_inventory_items_mgr.update_item_tradability_flags(obj, trade_cond)
	end
	reap_callback.item_drop(obj)
	if belt_obj_by_id[obj:id()] then
		item_drop_from_belt(obj)
		belt_obj_by_id[obj:id()] = nil
	end
end
---------------------------------------------------------------------------------------------------
function item_drop_from_belt(obj)
	sa_inventory_items_mgr.update_artefacts_lock_from_belt(obj)
	reap.item_drop_from_belt(obj)
end
---------------------------------------------------------------------------------------------------
function item_belt(binded, obj)
	sa_inventory_items_mgr.update_artefacts_lock_to_belt(obj)
	if Actor:belt_count() > 1 then
		sa_inventory_items_mgr.check_ammo(obj)
	end
	reap.item_belt(obj)
	belt_obj_by_id[obj:id()] = obj
end
---------------------------------------------------------------------------------------------------
function item_move_from_belt(obj)
	sa_inventory_items_mgr.update_artefacts_lock_from_belt(obj)
	reap.item_move_from_belt(obj)
end
---------------------------------------------------------------------------------------------------
function item_ruck(binded, obj)
	sa_inventory_items_mgr.update_artefacts_belt_lock(obj)
	if Actor:ruck_count() > 1 then
		sa_inventory_items_mgr.check_ammo(obj)
	end
	reap.item_ruck(obj)
	if belt_obj_by_id[obj:id()] then
		item_move_from_belt(obj)
		belt_obj_by_id[obj:id()] = nil
	end
end
---------------------------------------------------------------------------------------------------
function item_slot(binded, obj)
	reap.item_slot(obj)
	if belt_obj_by_id[obj:id()] then
		item_move_from_belt(obj)
		belt_obj_by_id[obj:id()] = nil
	end
end
---------------------------------------------------------------------------------------------------
function info(info_id, ui_info)
	if ui_info then
		sa_main.pda_tab_callback(info_id)
		sa_main.dead_body_sounds(info_id)
		sa_pda.info(info_id)
		if trade_info[info_id] then
			if info_id == "ui_trade" then
				trade_cond = trade_manager.get_item_condition() or true
			else
				trade_cond = info_id == "ui_car_body" or nil
			end
			level.parked_call(function()
				sa_inventory_items_mgr.set_items_tradability_flags(trade_cond)
				Actor:invalidate_inventory()
				update_inventory_window()
			end)
		elseif trade_cond and trade_end_info[info_id] then
			trade_cond = nil
		end
	end
end
---------------------------------------------------------------------------------------------------
function pda_tab(tab_id)
	sa_pda.show_hide_menu(tab_id)
	pda_contacts_dialog = sa_pda.get_pda_contacts_dialog()
	sa_main.pda_sounds(tab_id)
end
---------------------------------------------------------------------------------------------------
function select_pda_contact(binded, id)
	if pda_contacts_dialog then
		pda_contacts_dialog:choice_pda_contact(id)
	end
end
---------------------------------------------------------------------------------------------------
function hit_effector(binded, mob_type)
	last_mob_type = mob_type
end
---------------------------------------------------------------------------------------------------
function actor_before_hit()
	if not last_health then
		last_health = Actor.health
	end
end
---------------------------------------------------------------------------------------------------
function attach_vehicle(binded, car)
	local binder = car:binded_object()
	if binder then
		binder:attach_holder()
		car_mgr = sa_cars.get_car_mgr()
	end
	reap.attach_vehicle(car)
	actor_flags.in_car = true
end
---------------------------------------------------------------------------------------------------
function detach_vehicle(binded, car)
	actor_flags.in_car = false
	local binder = car:binded_object()
	if binder then
		binder:detach_holder()
		car_mgr = sa_cars.get_car_mgr()
	end
end
---------------------------------------------------------------------------------------------------
function key_press(binded, dik)
	if pda_contacts_dialog then
		local pda_talk_dialog = sa_pda.get_pda_talk_dialog()
		if pda_talk_dialog then
			pda_talk_dialog:on_keyboard(dik, key_events.pressed)
		end
	end
	if car_mgr then
		car_mgr:on_keyboard(dik, key_events.pressed)
	end
	if not level.main_input_receiver() then
		sa_main.pda_info_fix(dik)
	end
	sa_main.zoom_effect(dik, key_events.pressed)
	reap_callback.key_press(binded, dik)
	pressed_keys[dik] = true
end
---------------------------------------------------------------------------------------------------
function key_release(binded, dik)
	if car_mgr then
		car_mgr:on_keyboard(dik, key_events.released)
	end
	sa_main.zoom_effect(dik, key_events.released)
	reap_callback.key_release(binded, dik)
	pressed_keys[dik] = nil
end
---------------------------------------------------------------------------------------------------
function mouse_wheel(binded, vol)
	if car_mgr then
		car_mgr:zoom_factor(vol)
	end
end
---------------------------------------------------------------------------------------------------
function mouse_move()
	if not car_mgr then
		return
	end
	if not last_move_time then
		car_mgr.is_mouse_moving = true
	end
	last_move_time = time_real_ms + 80
end
---------------------------------------------------------------------------------------------------
function new_game()
	timer("sa_main.yantar_psy_blowout", math.random(5 * 60 * 1000, 7 * 60 * 1000), true)
	reap.new_game()
end
---------------------------------------------------------------------------------------------------
function actor_save(packet)
	sa_mob_health_bar.save(packet)
end
---------------------------------------------------------------------------------------------------
function actor_load(reader)
	sa_mob_health_bar.load(reader)
end
--[[-----------------------------------------------------------------------------------------------
 * NPC
--]]-----------------------------------------------------------------------------------------------
function npc_use(obj, who)
	if not (obj:alive() or is_key_pressed(bind_to_dik(key_bindings.kACCEL))) then
		Actor:give_info_portion("ui_dead_body")
	end
end
---------------------------------------------------------------------------------------------------
function npc_hit(obj, amount, local_direction, who, bone_index)
	if car_mgr then
		car_mgr:update_relation_registry(obj, who)
	end
end
---------------------------------------------------------------------------------------------------
function npc_death(victim, who)
	if car_mgr then
		car_mgr:update_relation_registry(victim, who)
	end
	sa_main.restore_torch(victim)
end
--[[-----------------------------------------------------------------------------------------------
 * MONSTER
--]]-----------------------------------------------------------------------------------------------
function monster_use(obj, who)
	if not (obj:alive() or is_key_pressed(bind_to_dik(key_bindings.kACCEL))) then
		Actor:give_info_portion("ui_dead_body")
	end
end
--[[-----------------------------------------------------------------------------------------------
 * PHYSIC OBJECT
--]]-----------------------------------------------------------------------------------------------
function physic_object_net_spawn(obj)
	local sect = obj:section()
	if sect == "mounted_weapon" or sect == "stationary_mgun" then
		obj:set_tip_text("mounted_weapon_use")
	end
end
---------------------------------------------------------------------------------------------------
function physic_object_hit(obj, amount, local_direction, who)
	sa_main.light_death_callback(obj, who)
end
