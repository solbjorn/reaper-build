local news = {
	tips_esc_trader_about_anomalies	= [[trader\trader_tutorial_anomalies_1]],
	gar_dolg_warning				= [[duty\duty_warning1]],
	esc_return_dv					= [[trader\return_from_dv]],
	escape_fox_quest				= [[trader\trader_pda_fox]],
	tip_petruha_report				= [[escape\petruha_raport_p]],

	tips_agr_krot_sos				= [[agroprom\krot_help_pda_1]],
	tips_agr_krot_sos1				= [[agroprom\krot_help_pda_2]],
	tips_agr_krot_sos2				= [[agroprom\krot_help_pda_2]],
    tips_agr_stalker_help_2			= [[agroprom\stalker_help_2]],
    tips_agr_stalker_help_1			= [[agroprom\stalker_help_1]],
	tips_agr_trader_documents		= [[agroprom\trader_pda_1]],
    pass_to_1st_door                = [[val\door1_password]],
    pass_to_2nd_door                = [[val\door2_password]],

	bar_ecolog_crush_heli_down		= [[Rostok\Heli_crush\wolfhound_pda_1]],
	bar_freedom_attack_attract_actor= [[Rostok\Heli_crush\wolfhound_pda_2]],
	bar_freedom_spam_1				= [[Rostok\Heli_crush\wolfhound_pda_6]],
	bar_freedom_spam_2				= [[Rostok\Heli_crush\wolfhound_pda_4]],
	bar_freedom_spam_3				= [[Rostok\Heli_crush\wolfhound_pda_3]],
	bar_freedom_spam_4				= [[Rostok\Heli_crush\wolfhound_pda_5]],
	bar_freedom_attack				= [[Rostok\Heli_crush\wolfhound_pda_7]],
	bar_freedom_attack_spy			= [[Rostok\Heli_crush\wolfhound_pda_8]],
	bar_ecolog_crush_start_heli		= [[Rostok\Heli_crush\kruglov_pda_1]],
	bar_ecolog_crush_attract_actor  = [[Rostok\Heli_crush\kruglov_pda_2]],
	bar_ecolog_spam_1				= [[Rostok\Heli_crush\kruglov_pda_3]],
	bar_ecolog_spam_2				= [[Rostok\Heli_crush\kruglov_pda_4]],
	bar_ecolog_spam_3				= [[Rostok\Heli_crush\kruglov_pda_5]],
	bar_ecolog_spam_4				= [[Rostok\Heli_crush\kruglov_pda_6]],
	bar_ecolog_attack				= [[Rostok\Heli_crush\kruglov_pda_7]],
    rostok_kruglov_spam_1			= [[Rostok\kruglov_pda_help_1]],
    rostok_kruglov_spam_2			= [[Rostok\kruglov_pda_help_3]],
	bar_ecolog_escape				= [[Rostok\volkodav_pda_kruglov_escape_1]],
    storyline_vasilyev_tip			= [[yantar\vasiliev_pda]],
    storyline_ghost_tip 			= [[yantar\ghost_pda]],
    yan_saharov_message 			= [[yantar\professor_to_actor_pda_3]],
	yan_saharov_message_2 			= [[yantar\professor_to_actor_pda_4]],
    yan_saharov_message_3 			= [[yantar\professor_to_actor_pda_5]],

	yan_scientist_probe				= [[yantar\kruglov_radiation_quest_13]],
	yan_scientist_probe_1			= [[yantar\kruglov_radiation_quest_11]],
	yan_scientist_probe_2			= [[yantar\kruglov_radiation_quest_12]],
	yan_scientist_probe_3			= [[yantar\kruglov_radiation_quest_6]],

	rostok_kruglov_follow			= [[Rostok\pda_kruglov_help_6]],
	bar_freedom_chase			= [[Rostok\pda_kruglov_stop_enemy_1]],
	rostok_kruglov_follow_2			= [[Rostok\pda_kruglov_stop_enemy_2]],
	rostok_kruglov_follow_3			= [[Rostok\pda_kruglov_help_5]],

	bar_territory_dolg_1_hit		= [[bar\pda\voronin_gunfire_pda_1]],
	bar_territory_dolg_2_hit		= [[bar\pda\voronin_gunfire_pda_2]],
	bar_territory_dolg_3_hit		= [[bar\pda\voronin_gunfire_pda_3]],
	bar_territory_dolg_kill			= [[bar\pda\voronin_gunfire_pda_4]],

	tips_bun_komand                 = [[bun\patrol_prikaz]],

	general_ecolog_tip_1            = [[yantar\professor_to_actor_pda_1]],
    general_ecolog_tip_2            = [[yantar\professor_to_actor_pda_2]],

    tips_gar_hellcar_alarm			= [[garbage\neutrals_commander_pda_1]],
	gar_dolg_blokpost_warning		= [[duty\duty_warning1]],
	gar_dolg_monster_rush			= [[duty\duty_request1]],
	gar_direction_fire				= [[garbage\junkyard_combat_ambush]],
	gar_hellcar_victory				= [[garbage\junkyard_combat_end]],
	gar_actor_looser				= [[garbage\duty_after_rush_bad]],
	gar_actor_normal				= [[garbage\duty_after_rush_normal]],
	gar_actor_winner				= [[garbage\duty_after_rush_good]],

	esc_direction_fire				= [[escape\lager_fanat_attack]],
	esc_fanat_victory				= [[escape\lager_fanat_victory]],

	rad_barman_spam					= [[radar\rad_barman_message]],

	val_monolith_trader_pda1		= [[val\trader_dialog1]],
	o_soznanie_text					= [[sarcofag\o_soznanie_call]],

-- dublicate pda sounds for remark scheme
    val_rob_leader_jeer_1           = [[val\rob_leader_jeer_1_p]],

    pri_followers_leader_phrase1_1  = [[pri\followers_leader_phrase1_1_p]],
    pri_followers_leader_phrase1_2  = [[pri\followers_leader_phrase1_2_p]],
    pri_followers_leader_phrase1_3  = [[pri\followers_leader_phrase1_3_p]]
}

local pda_news = voice([[device\pda\pda_news]])
local pda_tips = voice([[device\pda\pda_tip]])
local pda_task = voice([[device\pda\pda_objective]])

local random_icons = {
	bandit		= { { 498, 235 }, { 581, 235 } },
	dolg		= { { 498, 141 }, { 581, 141 } },
	ecolog		= { { 498, 0 }, { 581, 0 } },
	freedom		= { { 498, 94 }, { 581, 94 } },
	military	= { { 498, 188 }, { 581, 188 } },
	stalker		= { { 498, 705 }, { 498, 517 }, { 498, 564 }, { 498, 611 }, { 498, 658 } },
	trade		= { { 0, 0 }, { 581, 47 } }
}
random_icons.gen_info = random_icons.stalker

function random_tip_icon(sender)
	return table.fastrand(random_icons[sender])
end

local tips_icons = {
	default		= { 0, 658 },
	trader		= { 332, 893, "escape_trader_name" },
	bes		= { 415, 0, "gar_hellcar_name" },
	seryi		= { 415, 141, "gar_seryi_name" },
	fanat		= { 415, 658, "esc_fanat_name" },
	arena		= { 332, 141 },
	krot		= { 332, 47, "agr_krot_name" },
	barman		= { 332, 235, "bar_barmen_name" },
	wolf		= { 332, 940, "esc_wolf_name" },
	o_soznanie	= { 415, 893, "Osoznanie" },
	monolith	= { 0, 893 },
	saharov		= { 332, 470, "yan_saharov_name" },
	prizrak		= { 415, 705, "yan_ghost_name" },
	doctor		= { 415, 846, "cit_doctor_name" },
	killer		= { 0, 846 },
	volkodav	= { 332, 517, "ros_volkodav_name" },
	lukash		= { 415, 235, "mil_Svoboda_leader_name" },
	maks		= { 415, 282, "mil_Svoboda_master_Max_name" },
	kep		= { 415, 188, "mil_Svoboda_blockpost_leader_name" },
	voronin		= { 332, 423, "bar_voronin_name" },
	petrenko	= { 332, 376, "bar_petrenko_name" },
	ivancov		= { 332, 329, "bar_ivancov_name" },
	plichko		= { 332, 282, "bar_plichko_name" },
	prapor		= { 415, 47, "gar_dolg_blokpost_leader_name" },
	encyclopedia	= { 82, 282 },
	vasilyev	= { 249, 705, "yan_vasilyev_name" },
	kalugin		= { 249, 705, "dar_kalugin_name" },
	kruglov		= { 498, 0, "ros_kruglov_name" },
	borov		= { 332, 564, "val_borov_name" },
	death		= { 0, 752 },
	uniq		= { 498, 47 },
	unknown		= { 0, 940, "unknown_sender" },
	strelok		= { 415, 940, "strelok_name" },

	bandit		= random_tip_icon,
	dolg		= random_tip_icon,
	freedom		= random_tip_icon,
	military	= random_tip_icon,
	gen_info	= random_tip_icon,
	ecolog		= random_tip_icon,
	stalker		= random_tip_icon,
	trade 		= random_tip_icon
}
local name_to_sender = { }

local task_icons = { }

function prepare_data()
	for k, data in pairs(tips_icons) do
		if type(data) == "table" and data[3] then
			data[3] = translate(data[3])
			name_to_sender[data[3]] = k
		end
	end

	local t = parse_xml.file("gameplay\\game_tasks.xml")
	for i, v in ipairs(t.game_tasks_data.game_task) do
		task_icons[v.id] = v.objective[1] and v.objective[1].icon or v.objective.icon
	end
end

function get_sinfo(sender)
	local sinfo = sender and tips_icons[sender]
	if not sinfo then return nil end

	if type(sinfo) == "function" then
		sinfo = sinfo(sender)
	end

	return sinfo
end

function sender_info_byname(sender, header)
	local sinfo = get_sinfo(sender)
	if sinfo then
		return sinfo
	end

	sender = header and name_to_sender[header]
	sinfo = get_sinfo(sender)
	if sinfo then
		return sinfo
	end

	return get_sinfo("default")
end

function send_tip(news_id, timeout, sender, showtime, sender_id)
	if news_id == nil then return false end

	--' Если задан timeout, то вызываем отложенно для синхронизации озвучки
	if timeout and timeout > 0 then
		timer("news_manager.send_tip", timeout * 1000, true, news_id, 0, sender, showtime, sender_id)
		return true
	end

	if showtime == nil then showtime = 5000 end

	--' Играем дефолтный звук
	pda_tips:play(Actor, 0, sound_object.s2d)
	local sound = news[news_id]
	if sound ~= nil then
		sound = voice([[characters_voice\scenario\]] .. sound)
		--' Играем звук забитый
		sound:play(Actor, 1, sound_object.s2d)

		--' Необходимо поставить время показа по длине сцены
		showtime = sound:length() + 1500
		if showtime < 5000 then showtime = 5000 end
	end

	if sender_id then
		local sobj = story_object(tonumber(sender_id))
		local new = sobj and name_to_sender[sobj:get_netpk("character_name")]
		if new then
			sender = new
		end
	end
	if not sender then sender = "default" end

	local sinfo = get_sinfo(sender) or get_sinfo("default")
	local rect = Frect():set(sinfo[1], sinfo[2], 83, 47)
	local header = sinfo[3] or (sender_id and reap.story_name(sender_id)) or translate("st_tip")

	local news_text = "%c[sender]" .. header .. "\\n" .. "%c[default]" .. translate(news_id)
	Actor:give_game_news(news_text, "ui\\ui_iconsTotal", rect, 0, showtime)

	return true
end

function send_tip_nosound(news_id)
	if news_id == nil then return end

	--' Играем дефолтный звук
	pda_tips:play(Actor, 0, sound_object.s2d)

	return news[news_id] and voice([[characters_voice\scenario\]] .. news[news_id])
end

function send_task(type, _task, objective)
	if Actor == nil then return false end

	--' Играем дефолтный звук
	pda_task:play(Actor, 0, sound_object.s2d)

	-- цвет сообщения
	local text_color = type == "fail" and "%c[255,255,0,0]" or "%c[sender]"

	local task_title = _task:get_title()
	local color= (type=="complete") and "%c[green]" or "%c[255,0,255,255]"
	local news_text = text_color..translate("general_" .. type .. "_task").."\\n"..color..translate(task_title)

	if type ~= "complete" and type ~= "fail" then
		if type == "new" then
			local objective_index = objective:get_idx() + 1
			if _task:get_objectives_cnt() == objective_index then
				objective_index = objective_index - 1
			end
			local obj_desc = _task:get_objective(objective_index):get_description()
			if obj_desc ~= nil then
				news_text = news_text.."\\n".."%c[task_colour]"..translate("news_next")..": "..color..translate(obj_desc)
			end
		elseif type == "update" then
			local obj_desc1 = objective:get_description()
			local c_obj
			local c_idx=objective:get_idx()+1
			local finished=false
			while true do --поищем следующую задачу в процессе
				c_obj=_task:get_objective(c_idx)
				if c_obj==nil then --если шагнули совсем куда то далеко
					c_idx=1 --проверим с самого начала
				else
					if c_obj:get_state()==task.fail or c_obj:get_state()==task.completed then --если задача на данном шаге выполнена
						c_idx=c_idx+1 -- смотрим следующую
					end
				end
				if c_idx==_task:get_objectives_cnt()-1 then --если подошли к концу заданий и еще не были тут
					if not finished then
						finished=true --второй раз сюда уже не попадем
						c_idx=1 --проверим с самого начала
					else --обошли по кругу
						c_idx=_task:get_objectives_cnt()-1
						break
					end
				end
				local toc=_task:get_objective(c_idx)
				if toc~=nil then
					if toc:get_state()==task.in_progress then --ну и если еще в прогрессе - подходит для уведомления
						break
					end
				end
			end
			if obj_desc1 ~= nil then
				news_text = news_text.."\\n".."%c[task_colour]"..translate("news_finished")..": "..translate(obj_desc1)
			end
			c_obj2=_task:get_objective(c_idx)
			local obj_desc2 = (c_obj2~=nil and c_obj2:get_state()==task.in_progress) and c_obj2:get_description() or nil
			if obj_desc2 ~= nil then
				local color=(c_idx==_task:get_objectives_cnt()-1) and "%c[green]" or "%c[task_colour]"
				news_text = news_text.."\\n".."%c[task_colour]"..translate("news_next")..": "..color..translate(obj_desc2)
			end
		end
	end

	local task_texture, task_rect = get_texture_info(task_icons[_task:get_id()], "ui_iconsTotal_locations")
	if Actor:is_talking() then
		Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
	end
	--выдаем в любом случае чтобы попало в дневник
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 10000)
end

local article_types = {
	[0]	= "news_article",	-- Справка
	[1]	= "news_journal",	-- Журнал
	[2]	= "news_task",		-- Задания
	[3]	= "news_info"		-- Вырезанный раздел, но пусть будет
}

function send_encyclopedy(_type, group, name)
	pda_news:play(Actor, 0, sound_object.s2d)
	if _type == 2 then group = string.match(group, "^[^/]+") end
	local sinfo = get_sinfo("encyclopedia")
	local task_texture, task_rect = "ui\\ui_iconsTotal", Frect():set(sinfo[1], sinfo[2], 83, 47)
	local news_text = "%c[sender]"..translate(article_types[_type]).."\\n"..
		"%c[255,255,255,0]"..translate(group)
	if _type~=2 then
		news_text = news_text..":%c[255,255,255,127] "..translate(name)
	end
	if Actor:is_talking() then
		Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
	end
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
end

function send_treasure(name, level_name)
	pda_news:play(Actor, 0, sound_object.s2d)

	local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_thing")
	local news_text = "%c[sender]"..translate("st_found_new_treasure")..
		"\\n".."%c[120,255,120,160]"..translate(level_name)..
		": %c[170,200,200,200]"..translate(name)
	if Actor:is_talking() then
		Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
	end
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
end

function send_level_changer(from, to)
	pda_news:play(Actor, 0, sound_object.s2d)

	local sinfo = get_sinfo("encyclopedia")
	local task_texture, task_rect = "ui\\ui_iconsTotal", Frect():set(sinfo[1], sinfo[2], 83, 47)
	local news_text = "%c[sender]" .. translate("st_new_level_changer").. "\\n" ..
		"%c[255,255,255,0]" .. translate(from) .. " - " .. translate(to)

	if Actor:is_talking() then
		Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
	end
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
end

function relocate_item(type, item, count)
	if Actor == nil then return false end
	if not count then count = 1 end
	--' Играем дефолтный звук
	if type == "in" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_thing")
		local news_text = "%c[255,105,239,146]"..translate("general_in_item").."\\n".."%c[default]"..iif(count>1,count.."x ","")..get_inv_name(item)
		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		else
			Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
		end
	elseif type == "out" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_thing")
		local news_text = "%c[255,255,085,085]"..translate("general_out_item").."\\n".."%c[default]"..iif(count>1,count.."x ","")..get_inv_name(item)
		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		else
			Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
		end
	end
end

function relocate_money(type, amount)
	if Actor == nil then return false end

	--' Играем дефолтный звук
	if type == "in" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_money")
		local news_text = "%c[255,105,239,146]"..translate("general_in_money").."\\n".."%c[default]"..translate(tostring(amount))

		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		else
			Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
		end
	elseif type == "out" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
		local news_text = "%c[255,255,085,085]"..translate("general_out_money").."\\n".."%c[default]"..translate(tostring(amount))

		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		else
			Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
		end
	end
end
