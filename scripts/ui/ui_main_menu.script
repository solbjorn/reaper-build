-- Главное меню для Теней Чернобыля.
-- KRodin (c) 2018
-- Выкинул из скрипта всё что связано с мультиплеером и прочий мусор.
-- Исправил утечки памяти из-за неудаления частей меню после его закрытия (см. main_menu:close_and_delete_menu())
-- Сделано специально для использования с движком OGSR.

local all_good = db and modules and xr_logic
if not all_good then
	local broken = "Missing or broken:"
	if not db then broken = broken .. " db.script" end
	if not modules then
		broken = broken .. " modules.script"
	end
	if not xr_logic then
		broken = broken .. " xr_logic.script"
	end
	abort(broken)
end

local mod_version = table.concat({
	amk_ver.amk_title,
	amk_ver.amk_version,
	amk_ver.amk_revision,
	"+",
	sak_ver.sak_title,
	sak_ver.sak_version,
	"+",
	wawka_ver.wawka_title,
	wawka_ver.wawka_version,
	"+",
	"ReapeR build 6"
}, ' ')

class "main_menu" (CUIScriptWnd)

function main_menu:__init()
	super()

	self.alive_on_level = game_is_running()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function main_menu:__finalize()
end

function main_menu:InitControls()
	self:Init(0, 0, 1024, 768)
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_main.xml")

	xml:InitStatic("back_movie", self)
	xml:InitStatic("background", self)

	self.shniaga = xml:InitMMShniaga("shniaga_wnd", self)
	if self.alive_on_level then
		self.shniaga:SetWndRect(324, 440, 392, 280)
	end

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")

	local ver = xml:InitStatic("static_version", self)
	ver:SetText(_G.main_menu.get_main_menu():GetGSVer() .. " " .. jit.version)
	xml:InitStatic("mod_version", self):SetText(mod_version)
end

function main_menu:Show(...)
	self.shniaga:SetVisibleMagnifier(...)
end

function main_menu:InitCallBacks()
	-- new game
	self:Connect("btn_novice",  ui_events.BUTTON_CLICKED, self.StartGame, "gd_novice")
	self:Connect("btn_stalker", ui_events.BUTTON_CLICKED, self.StartGame, "gd_stalker")
	self:Connect("btn_veteran", ui_events.BUTTON_CLICKED, self.StartGame, "gd_veteran")
	self:Connect("btn_master",  ui_events.BUTTON_CLICKED, self.StartGame, "gd_master")
	-- options
	self:Connect("btn_options", ui_events.BUTTON_CLICKED, self.OnButton_options_clicked)
	-- load
	self:Connect("btn_load", ui_events.BUTTON_CLICKED, self.OnButton_load_clicked)
	-- save
	self:Connect("btn_save", ui_events.BUTTON_CLICKED, self.OnButton_save_clicked)
	-- quit
	self:Connect("btn_quit", ui_events.BUTTON_CLICKED, self.OnButton_quit_clicked)
	self:Connect("btn_quit_to_mm", ui_events.BUTTON_CLICKED, self.OnButton_disconnect_clicked)
	self:Connect("btn_lastsave", ui_events.BUTTON_CLICKED, self.OnButton_last_save)
	self:Connect("btn_credits", ui_events.BUTTON_CLICKED, self.OnButton_credits_clicked)
	-- message box
	self:Connect("msg_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgOk)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED, self.OnMsgCancel)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.OnMsgNo)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED, self.QuitGame, "disconnect")
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,  self.QuitGame, "quit")
	self:Connect("btn_ret", ui_events.BUTTON_CLICKED, self.close_and_delete_menu)
	--amk
	self:Connect("btn_amk", ui_events.BUTTON_CLICKED, self.amk_options)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	cmd("load_last_save")
	self:close_and_delete_menu()
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:OnButton_last_save()
	if not self.alive_on_level then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:QuitGame(_type)
	console:execute(_type)
end

function main_menu:StartGame( difficulty )
	cmd("g_game_difficulty "..difficulty)
	if alife() then
		cmd("disconnect")
	end
	cmd("start server(all/single/alife/new)")
	self:close_and_delete_menu()
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_mm_save_load_dialog.save_load_dialog( true )
		self.save_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.save_dlg)
	--
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if not self.load_dlg then
		self.load_dlg = ui_mm_save_load_dialog.save_load_dialog()
		self.load_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.load_dlg)
	--
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if self.alive_on_level and dik_to_bind(dik) == key_bindings.kQUIT then
			self:close_and_delete_menu()
		-- OGSE Team on
		-- Система быстрых сохранений игры
		elseif self.alive_on_level and dik_to_bind(dik) == key_bindings.kQUICK_SAVE then
			self:close_and_delete_menu()
			console:execute("save " .. user_name() .. "_quicksave")
		elseif dik_to_bind(dik) == key_bindings.kQUICK_LOAD and getFS():exist("$game_saves$", user_name() .. "_quicksave.sav") then
			if (alife() == nil) then
				console:execute("disconnect")
				console:execute("start server(" .. user_name() .. "_quicksave/single/alife/load)")
			else
				console:execute("load " .. user_name() .. "_quicksave")
			end
		elseif self.alive_on_level and (dik == DIK_keys.DIK_F8 or dik == DIK_keys.DIK_S) then
			local name = string.format(translate("ui_autosave_day") .. " %d. %02d.%02d. %s", game.days() + 1,
						   level.get_time_hours(), level.get_time_minutes(), translate(level.name()))
			name = name:clear()
			if string.len(name) > 60 then
				name = string.sub(name, 1, 57) .. "..."
			end

			self:close_and_delete_menu()
			console:execute("save " .. name)
		-- OGSE Team off
		elseif dik == DIK_keys.DIK_Q then
			console:execute("quit")
		elseif dik == DIK_keys.DIK_L then
			self:OnButton_last_save()
		elseif self.alive_on_level and dik == DIK_keys.DIK_A then
			self:amk_options()
		elseif dik == DIK_keys.DIK_RETURN or dik == DIK_keys.DIK_NUMPADENTER then
			return false
		end
	end

	return true
end

function main_menu:amk_options()
-- если еще ни разу не вызывали, то обозначим наш новый скрипт
	if self.amk_options_dlg == nil then
		self.amk_options_dlg = ui_amk_options.amk_options()
		self.amk_options_dlg.owner = self
	end
-- останавливаем родительский элемент, запускаем свой, но родителя показываем.
	self:GetHolder():start_stop_menu(self.amk_options_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end

function main_menu:close_and_delete_menu()
	for v, k in ipairs({ "amk_options_dlg", "load_dlg", "opt_dlg", "save_dlg" }) do
		v = self[k]
		if v then
			v.dlg_video_adv = nil
			v:ClearCallbacks()
			self[k] = nil
		end
	end
	self:ClearCallbacks()

	cmd("main_menu off")
end
