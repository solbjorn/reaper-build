----------------------------------------------------------------------------------------------------
-- Do nothing
----------------------------------------------------------------------------------------------------

local teleport_idle = 0
local teleport_activated = 1

class "action_teleport"
function action_teleport:__init(obj, storage)
	self.object = obj
	self.st = storage

	self.state = teleport_idle
	self.timer = nil
end
function action_teleport:update(delta)
	if self.state == teleport_idle then
		if self.object:inside(Actor:position()) then
			-- Обработка телепорта
			self.state = teleport_activated
			self.timer = time_global()
			level.add_pp_effector ("teleport.ppe", 2006, false)
		end
	end
	if self.state == teleport_activated then
		if time_global() - self.timer >= self.st.timeout then
			-- Производим телепортацию
			local temp = {}
			local max_rnd = 0
			for i,v in ipairs(self.st.points) do
				-- Определяются допустимые состояния для лагеря.
				temp[i] = v
				max_rnd = max_rnd + v.prob
			end
			-- Осуществляется рандомный взвешенный переход.
			local p = math.random(0,max_rnd)
			for i,v in ipairs(temp) do
				p = p - v.prob
				if p <= 0 then
					-- телепорт в выбранную точку
					Actor:set_actor_position(patrol(v.point):point(0))
					local dir = patrol(v.look):point(0):sub(patrol(v.point):point(0))
					Actor:set_actor_direction(-dir:getH())
					say([[affects\tinnitus3a]])
					break
				end
			end
			self.state = teleport_idle
		else
			return
		end
	end

	xr_logic.try_switch_to_another_section(self.object, self.st)
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, storage)
	storage.actions[ action_teleport(npc, storage) ] = true
end

function set_scheme(obj, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, obj)

	st.timeout = utils.cfg_get_number(ini, section, "timeout", obj, false, 1200)
	if st.timeout == 0 then st.timeout = 1200 end

	st.points = {}
	for i=1,10 do
		local t = {
			point = utils.cfg_get_string(ini, section, "point"..tostring(i), obj, false, "", "none"),
			look = utils.cfg_get_string(ini, section, "look"..tostring(i), obj, false, "", "none"),
			prob = utils.cfg_get_number(ini, section, "prob"..tostring(i), obj, false, 100)
		}
		if t.point == "none" or t.look == "none" then
			break
		end
		table.insert(st.points, t)
	end
	if #st.points == 0 then
		abort("Wrong point nums in sr_teleport [%s]", tostring(section))
	end
end
