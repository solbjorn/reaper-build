local nagrad = {

  level_1 = {
  "ammo_5.45x39_ap",
  "ammo_7.62x39_ap",
  "ammo_5.56x45_ap",
  "ammo_5.7x28_ap",
  "ammo_9x19_pbp",
  "ammo_11.43x23_hydro"
 },
  level_2 = {
  "af_vyvert",
  "af_gravi",
  "af_medusa",
  "af_night_star",
  "af_fireball",
  "af_gold_fish",
  "af_drops",
  "af_soul",
  "af_cristall_flower",
  "af_electra_moonlight",
  "af_rusty_sea-urchin",
  "af_dummy_glassbeads"
 },
  level_3 = {
  "ammo_357sw_jfp",
  "ammo_44mag_jhp",
  "ammo_50ae_thv",
  "ammo_7.62x25_ps",
  "ammo_7.62x51",
  "ammo_338_lapua"
 },
  level_4 = {
  "af_spirit_1",
  "af_cry_1",
  "af_babka_1",
  "af_pudd_1",
  "af_dik_1",
  "af_kol_1",
  "af_armor_1"
 },
  level_5 = {
  "wpn_p38_sk1",
  "wpn_apb_sk1",
  "wpn_tt33_sk1",
  "wpn_ppsh41_sk2",
  "wpn_m1891_30",
  "wpn_bm16_full",
  "wpn_bizon"
 },
  level_6 = {
  "af_spirit_2",
  "af_cry_2",
  "af_babka_2",
  "af_pudd_2",
  "af_dik_2",
  "af_kol_2",
  "af_armor_2",
  "af_simbion"
 }
}

function prines_kopyto(first_speaker, second_speaker)
	return has("mutant_boar_leg", 30)
end
function otdal_kopyto(first_speaker, second_speaker)
	local item = ""
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	lost("mutant_boar_leg", 30)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_hvost(first_speaker, second_speaker)
	return has("mutant_dog_tail", 15)
end
function otdal_hvost(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,4)
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	lost("mutant_dog_tail", 15)
	got(item, count)
end

function add_man()
	local obj=amk.spawn_item("mil_monolit_rush_respawn_1",vector():set(32.9309,-0.00135,197.588),1242,20400)
        local tbl = amk.read_stalker_params(obj)
        tbl.sid = 9498
        tbl.health = 0.2
	tbl.updhealth = 0.2
        amk.write_stalker_params(tbl, obj)
end

function metka_man()
level_tasks.add_location(507,"green_location","Раненый")
end

function voronin_flesh_have(task, objective)
if db.actor ~= nil then
return db.actor:object("crazy_flash") ~= nil
end
return false
end

function voronin_flesh_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "crazy_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function fox_kriss_have(task, objective)
if db.actor ~= nil then
return db.actor:object("outfit_exo_m1_bast") ~= nil
end
return false
end

function fox_kriss_done(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "outfit_exo_m1_bast", "out")
dialogs.relocate_item_section(second_speaker, "arbalet_bad", "in")
end

function prapor_jaw_have(task, objective)
if db.actor ~= nil then
return db.actor:object("mutant_krovosos_jaw") ~= nil
end
return false
end

function prapor_jaw_done(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "mutant_krovosos_jaw", "out")
dialogs.relocate_item_section(second_speaker, "outfit_exo_m1", "in")
end

function informator_pda_have(task, objective)
if db.actor ~= nil then
return db.actor:object("bar_tiran_pda") ~= nil
end
return false
end

function informator_pda_done(first_speaker, second_speaker)
dialogs.relocate_item_section(second_speaker, "bar_tiran_pda", "out")
dialogs.relocate_item_section(second_speaker, "af_medusa", "in")
end

function pda_take(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "bar_tiran_pda", "in")
second_speaker:set_relation(game_object.friend, second_speaker)
end

function gavr_pda_have(task, objective)
if db.actor ~= nil then
return db.actor:object("bar_lucky_pda") ~= nil
end
return false
end

function gavr_pda_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "bar_lucky_pda", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function saharov_pda_have(task, objective)
if db.actor ~= nil then
return db.actor:object("pda_priz") ~= nil
end
return false
end

function saharov_pda_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "pda_priz", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function freeman_eagle_have(task, objective)
if db.actor ~= nil then
return db.actor:object("wpn_eagle_m1") ~= nil
end
return false
end

function freeman_eagle_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "wpn_eagle_m1", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function ghange_set()
	local james_kodla = { 9608, 22067, 22068, 22069, 22070 }
	local npc
	for i = 1, #james_kodla do
		npc = level_story_object(james_kodla[i])
		if npc and npc:alive() then
			npc:set_character_community("killer", 0, 0)
		end
	end
end

function freeman_case_have(task, objective)
if db.actor ~= nil then
return db.actor:object("case_freeman") ~= nil
end
return false
end

function freeman_case_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "case_freeman", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function gavr_doc_have(task, objective)
if db.actor ~= nil then
return db.actor:object("lab_x10_documents") ~= nil
end
return false
end

function gavr_doc_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "lab_x10_documents", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function bland_flash_have(task, objective)
if db.actor ~= nil then
return db.actor:object("bland_flash") ~= nil
end
return false
end

function bland_flash_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "bland_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function krov_kamen()
	return has("mutant_flesh_eye",5)
end

function otdal_kamen(first_speaker, second_speaker)
	lost("mutant_flesh_eye",5)
end

function nagrada_kamen(first_speaker, second_speaker)
	got("ammo_9x19_pbp",3)
end

function prines_gravi()
	return has("mutant_face_tushkano",15)
end

function otdal_gravi(first_speaker, second_speaker)
	lost("mutant_face_tushkano",15)
end

function nagrada_gravi(first_speaker, second_speaker)
	got("ammo_11.43x23_hydro",3)
end

function prines_ruki()
	return has("mutant_hand_kontroler",2)
end

function otdal_ruki(first_speaker, second_speaker)
	lost("mutant_hand_kontroler",2)
end

function nagrada_ruki(first_speaker, second_speaker)
	got("ammo_5.45x39_ap",5)
	got("vodka",2)
end

function dan_grab_have(task, objective)
if db.actor ~= nil then
return db.actor:object("bad_psy_helmet") ~= nil
end
return false
end

function dan_grab_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "bad_psy_helmet", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function yakut_help_have(task, objective)
if db.actor ~= nil then
return db.actor:object("new_book") ~= nil
end
return false
end

function yakut_help_done(first_speaker, second_speaker)
    local item = ""
	local count = math.random(3,5)
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "new_book", "out", 1)
	got(item, count)
end

function yakut_treasure_have(task, objective)
if db.actor ~= nil then
return db.actor:object("notebook_new") ~= nil
end
return false
end

function yakut_treasure_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "notebook_new", "out")
	second_speaker:set_relation(game_object.friend, second_speaker)
end

function dan_flash_have(task, objective)
if db.actor ~= nil then
return db.actor:object("nauch_flash") ~= nil
end
return false
end

function dan_flash_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "nauch_flash", "out")
	dialogs.relocate_item_section(first_speaker, "good_psy_helmet", "in")
end

function treasure_ecolog_have(task, objective)
if db.actor ~= nil then
return db.actor:object("new_book_prizrak") ~= nil
end
return false
end

function treasure_ecolog_done(first_speaker, second_speaker)
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "new_book_prizrak", "out", 1)
	got(item, count)
end

function barmen_simbion_have(task, objective)
if db.actor ~= nil then
return db.actor:object("af_simbion") ~= nil
end
return false
end

function barmen_simbion_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "af_simbion", "out")
end

function system_ecolog_have(task, objective)
if db.actor ~= nil then
return db.actor:object("computer_new") ~= nil
end
return false
end

function system_ecolog_done(first_speaker, second_speaker)
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "computer_new", "out", 1)
	got(item, count)
end

function prizrak_zver_have(task, objective)
if db.actor ~= nil then
return db.actor:object("sniper_flash") ~= nil
end
return false
end

function prizrak_zver_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "sniper_flash", "out")
	dialogs.relocate_item_section(second_speaker, "wpn_dark_gauss", "in")
end

function prizrak_finalzver_have(task, objective)
if db.actor ~= nil then
return db.actor:object("new_document_sniper") ~= nil
end
return false
end

function prizrak_finalzver_done(first_speaker, second_speaker)
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "new_document_sniper", "out", 1)
	got(item, count)
end

function yakut_ograblen_have(task, objective)
if db.actor ~= nil then
return db.actor:object("inventory_new_box") ~= nil
end
return false
end

function yakut_ograblen_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "inventory_new_box", "out")
	got("ammo_5.56x45_ss190",5)
	got("antirad",3)
	got("medkit_army",4)
end

function helmet_est(task, objective)
if db.actor ~= nil then
return db.actor:object("good_psy_helmet") ~= nil
end
return false
end

function helmet_otdal(first_speaker, second_speaker)
    local item = ""
	local actor, trader
	if db.actor and 0 == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "good_psy_helmet", "out", 1)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function left_arhara(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "device_torch", "in")
end

function atak_larger_done(first_speaker, second_speaker)
    local item = ""
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(second_speaker, item , "in")
end

function tri_kristal()
	return has("af_cristall",2)
end

function otdal_kristal(first_speaker, second_speaker)
	local item = ""
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
	lost("af_cristall", 2)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_lomot()
	return has("af_mincer_meat",2)
end

function otdal_lomot(first_speaker, second_speaker)
	local item = ""
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	lost("af_mincer_meat", 2)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_odingrav()
	return has("af_gravi")
end

function otdal_odingrav(first_speaker, second_speaker)
	lost("af_gravi",1)
end

function nagrada_odingrav(first_speaker, second_speaker)
	got("medkit_scientic",3)
end

function zahar_naemnik_done(first_speaker, second_speaker)
    local item = ""
	local count = math.random(3,5)
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	got(item, count)
end

function prapor_apt_have()
	return has("medkit_scientic",10)
end

function prapor_apt_done(first_speaker, second_speaker)
	lost("medkit_scientic",10)
end

function barrem_talk_have()
	return has("af_cry_2")
end

function vzal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "voen_pda", "in")
end

function otdal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "voen_pda", "out")
end

function prizrak_tainiy_have(first_speaker, second_speaker)
	return has("plan_document")
end

function prizrak_tainiy_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "plan_document", "out")
end

function gold_art_have()
	return has("gold_art",10)
end

function gold_art_done()
	lost("gold_art",10)
end

function tri_tainik_first()
	return has("new_prizrak_document1")
end

function tri_tainik_second()
	return has("new_prizrak_document2")
end

function tri_tainik_third()
	return has("new_prizrak_document3")
end

function tri_tainik_have()
	return has("new_prizrak_document1") and
	       has("new_prizrak_document2") and
	       has("new_prizrak_document3")
end

function tri_tainik_done()
	lost("new_prizrak_document1")
	lost("new_prizrak_document2")
	lost("new_prizrak_document3")
end

function create_sarkbunker_exit()
	-- создается переход c САРКОФАГА В ЛАБ Х-10
	give_info("level_newtri")
	-- создается переход из ЛАБ Х-10 в САРКОФАГ
	give_info("level_newtwo")
end

function create_sarchaes2_exit()
	-- создается переход c САРКОФАГА на ЧАЕС2
	give_info("level_newfive")
	-- создается переход c ЧАЕС2 в САРКОФАГ
	give_info("level_newfour")
end
