----------------------------------------------------------------------------------------------------------------------
--	Менеджер изменения состояния тела
--	автор: Диденко Руслан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

local prop_state_mgr_idle_combat = xr_evaluators_id.state_mgr + 1
local prop_state_mgr_idle_alife  = xr_evaluators_id.state_mgr + 2
local prop_state_mgr_idle_off    = xr_evaluators_id.state_mgr + 3

local operator_state_mgr_to_idle_combat = xr_actions_id.state_mgr + 1
local operator_state_mgr_to_idle_alife  = xr_actions_id.state_mgr + 2
local operator_state_mgr_to_idle_off    = xr_actions_id.state_mgr + 3

local wp_prop_state_mgr_idle_combat_false = world_property(prop_state_mgr_idle_combat,	false)
local wp_prop_state_mgr_idle_combat_true  = world_property(prop_state_mgr_idle_combat,	true)
local wp_stalker_ids_property_enemy_false = world_property(stalker_ids.property_enemy,	false)
local wp_stalker_ids_property_danger_false = world_property(stalker_ids.property_danger,false)
local wp_prop_state_mgr_idle_alife_false  = world_property(prop_state_mgr_idle_alife,	false)
local wp_prop_state_mgr_idle_alife_true   = world_property(prop_state_mgr_idle_alife,	true)
local wp_prop_state_mgr_idle_off_false  = world_property(prop_state_mgr_idle_off,	false)
local wp_prop_state_mgr_idle_off_true   = world_property(prop_state_mgr_idle_off,	true)

local xr_actions_id_alife = xr_actions_id.alife
local stalker_ids_action_combat_planner  = stalker_ids.action_combat_planner
local stalker_ids_action_anomaly_planner = stalker_ids.action_anomaly_planner
local stalker_ids_action_danger_planner  = stalker_ids.action_danger_planner
local stalker_ids_action_gather_items    = stalker_ids.action_gather_items

local aim_ratio = 1000/50
local min_ratio = 1500

local game_object_enemy = game_object.enemy
local object_fire1 = object.fire1
local object_idle = object.idle

--' Эвалуатор, который синхронизирует менеджер.
--' Мы уже в безраличном состоянии idle или нет
class "evaluator_state_mgr_idle" (property_evaluator)
function evaluator_state_mgr_idle:__init(name, state_manager) super (nil, name)
	self.st = state_manager
	self.mgr = nil
	local planner = state_manager.planner
	local props   = state_manager.properties
	self.movement_eval = planner:evaluator(props["movement"])
	self.animstate_eval = planner:evaluator(props["animstate"])
	self.animation_eval = planner:evaluator(props["animation"])
end
function evaluator_state_mgr_idle:evaluate()
	local self_st = self.st
	local t = self_st.target_state == "idle" and
		self.movement_eval:evaluate() and
		self.animstate_eval:evaluate() and
		self.animation_eval:evaluate()

	local mgr = self.mgr
	if not mgr then
		mgr = self.object:motivation_action_manager()
		self.mgr = mgr
	end
	if not mgr:initialized() then
		return false
	end

	if xr_wounded.is_wounded(self.object) then
		self.st.combat = false
		return false
	end

	if t == true and mgr:current_action_id() == operator_state_mgr_to_idle_combat then
		self_st.combat = true
	end
	if self_st.combat == true then
		return true
	end

	return false
end

class "evaluator_state_mgr_idle_off" (property_evaluator)
function evaluator_state_mgr_idle_off:__init(name, state_manager) super (nil, name)
	self.st = state_manager
	self.mgr = nil
	local planner = state_manager.planner
	local props   = state_manager.properties
	self.movement_eval = planner:evaluator(props["movement"])
	self.animstate_eval = planner:evaluator(props["animstate"])
	self.animation_eval = planner:evaluator(props["animation"])
	self.bodystate_eval = planner:evaluator(props["bodystate"])
	self.weapon_eval = planner:evaluator(props["weapon"])
	self.mental_eval = planner:evaluator(props["mental"])
end
function evaluator_state_mgr_idle_off:evaluate()
	return self.st.target_state == "idle" and
		self.movement_eval:evaluate() and
		self.animstate_eval:evaluate() and
		self.animation_eval:evaluate() and
		self.bodystate_eval:evaluate() and
		self.weapon_eval:evaluate() and
		self.mental_eval:evaluate()
end

--' Мы уже в безраличном состоянии idle или нет ()учет с проверкой alife
class "evaluator_state_mgr_idle_alife" (property_evaluator)
function evaluator_state_mgr_idle_alife:__init(name, state_manager) super (nil, name)
	self.st = state_manager
	self.mgr = nil
	local planner = state_manager.planner
	local props   = state_manager.properties
	self.locked_eval = planner:evaluator(props["locked"])
	self.movement_eval = planner:evaluator(props["movement"])
	self.animstate_eval = planner:evaluator(props["animstate"])
	self.animation_eval = planner:evaluator(props["animation"])
end
function evaluator_state_mgr_idle_alife:evaluate()
	if not self.object:alive() then
		return true
	end

	local self_st = self.st
	-- апдейт менеджера анимаций
	-- раньше он был тут, сейчас он вынесен из эвалуатора

	local mgr = self.mgr
	if not mgr then
		mgr = self.object:motivation_action_manager()
		self.mgr = mgr
	end
	if not mgr:initialized() then
		return false
	end

	if mgr:current_action_id() ~= xr_actions_id_alife then
		self_st.alife = false
	end

	if self_st.combat == true then
		return false
	end

	if xr_wounded.is_wounded(self.object) then
		self_st.alife = false
		return false
	end

	if db.storage[self_st.npc:id()].active_section == nil then
		if xr_meet.is_meet(self.object) == false then
			if self_st.target_state == "idle" and
					not self.locked_eval:evaluate() and
					self.movement_eval:evaluate() and
					self.animstate_eval:evaluate() and
					self.animation_eval:evaluate() then
				self_st.alife = true
				return true
			else
				return self_st.alife == true
			end
		else
			return false
		end
	end
	return true
end

--' Переход в idle
class "act_state_mgr_to_idle" (action_base)
function act_state_mgr_to_idle:__init(name,state_manager) super (nil, name)
	self.st = state_manager
end
function act_state_mgr_to_idle:initialize()
	action_base.initialize(self)
	self.object:movement_enabled(true)
	if self.object:best_enemy() then
		self.st:set_state("idle", nil, nil, nil, {animation = true})
		xr_sound.set_sound(self.object, nil)
		stop_play_sound(self.object)
		return
	end
	if self.object:best_danger() then
		self.st:set_state("idle", nil, nil, nil, {animation = true})
		xr_sound.set_sound(self.object, nil)
		stop_play_sound(self.object)
		return
	end
	self.st:set_state("idle")
end
function act_state_mgr_to_idle:execute()
	action_base.execute(self)
	if self.object:best_enemy() then
		self.st:set_state("idle", nil, nil, nil, {animation = true})
		return
	end
	if self.object:best_danger() then
		self.st:set_state("idle", nil, nil, nil, {animation = true})
		return
	end
	self.st:set_state("idle")
end
function act_state_mgr_to_idle:finalize()
	-- По завершению перехода нужно записать -1 в указатель "на кого смотреть",
	-- чтобы при возврате было понятно что его нужно переинициализировать.

	self.st.current_object = -1

	action_base.finalize(self)
end

--' Переход в idle
class "act_state_mgr_to_off" (action_base)
function act_state_mgr_to_off:__init(name,state_manager) super (nil, name)
	self.st = state_manager
end

function act_state_mgr_to_off:initialize()
	action_base.initialize(self)
	self.st:set_state("idle", nil, nil, nil, {animation = true})
	xr_sound.set_sound(self.object, nil)
	stop_play_sound(self.object)
end

function act_state_mgr_to_off:execute()
	action_base.execute(self)
end

function act_state_mgr_to_off:finalize()
	-- По завершению перехода нужно записать -1 в указатель "на кого смотреть",
	-- чтобы при возврате было понятно что его нужно переинициализировать.

	self.st.current_object = -1
	self.object:movement_enabled(true)
	action_base.finalize(self)
end

--'-------------------------------------------------------------------------------------
--' Эвалуаторы и экшены менеджера
--'-------------------------------------------------------------------------------------
--' Закончил ли менеджер свою работу
class "eva_state_mgr_end" (property_evaluator)
function eva_state_mgr_end:__init(name, st) super (nil, name)
	self.st = st
	self.mgr = nil
end
function eva_state_mgr_end:evaluate()
	if self.mgr == nil then
		action_base.finalize(self)
		self.mgr = self.object:motivation_action_manager()
	end

	if not self.mgr:initialized() then
		self.st.combat = false
		return false
	end

	local current_action_id = self.mgr:current_action_id()
	if current_action_id ~= stalker_ids_action_combat_planner and
		current_action_id ~= stalker_ids_action_danger_planner and
		current_action_id ~= stalker_ids_action_anomaly_planner
	then
		self.st.combat = false
	end

	return false
end

--' Залочен ли менеджер
class "eva_state_mgr_locked" (property_evaluator)
function eva_state_mgr_locked:__init(name, st) super (nil, name)
	self.st = st
	local props   = st.properties
	self.props_weapon_locked = props["weapon_locked"]
	self.props_animstate_locked = props["animstate_locked"]
	self.props_animation_locked = props["animation_locked"]
	self.props_direction_turning = props["direction_turning"]
end
function eva_state_mgr_locked:evaluate()
	local self_st = self.st
	local planner = self_st.planner
	local props   = self_st.properties

	if self_st.combat or self_st.alife then
		return true
	end

	if not self.planner_initialized then
		self.planner_initialized = self_st.planner:initialized()
		if not self.planner_initialized then return false end
	end

	return planner:evaluator(self.props_weapon_locked):evaluate() or
			planner:evaluator(self.props_animstate_locked):evaluate() or
			planner:evaluator(self.props_animation_locked):evaluate() or
			planner:evaluator(self.props_direction_turning):evaluate()
end

--' Идловый экшн менеджера
class "act_state_mgr_end" (action_base)
function act_state_mgr_end:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_end:initialize()
	action_base.initialize(self)
end
function act_state_mgr_end:execute()
	action_base.execute(self)

	local wpn = self.object:best_weapon()
	if not wpn or not wpn:is_weapon() then
		return
	end

	local t = state_lib.states[self.st.target_state].weapon
	if t == "fire" or t == "sniper_fire" then
		local sniper_aim = 3000
		if self.st.look_object ~= nil then
			local look_object = level.object_by_id(self.st.look_object)
			if look_object == nil then
				self.st.look_object = nil
				return
			end
			if (self.object:see(look_object) or look_object:is_car() or look_object:is_helicopter()) and
				(not look_object:is_stalker() or
				self.object:relation(look_object) == game_object_enemy) and
				look_object:alive() == true
			then
				if t == "sniper_fire" then
					sniper_aim = self.object:position():distance_to(look_object:position())*aim_ratio
					if sniper_aim <= min_ratio then
						self.object:set_item(object_fire1, wpn, 1, min_ratio)
						return
					end
					self.object:set_item(object_fire1, wpn, 1, sniper_aim)
				else
					self.object:set_item(object_fire1, wpn, state_mgr_weapon.get_queue_params(self.object, look_object))
				end
				return
			else
				self.object:set_item(object_idle, wpn)
				return
			end
		end

		if self.st.look_position ~= nil then
			if t == "sniper_fire" then
				self.object:set_item(object_fire1, wpn, 1, sniper_aim)
			else
				self.object:set_item(object_fire1, wpn, state_mgr_weapon.get_queue_params(self.object, nil))
			end
			return
		else
			if self.st.target_state == "psy_shoot" then
				self.object:set_item(object_fire1, wpn)
				return
			end
			self.object:set_item(object_idle, wpn)
			return
		end
		return
	elseif t == "unstrapped" then
		self.object:set_item(state_mgr_weapon.get_idle_state(self.st.target_state), wpn)
	end
end
function act_state_mgr_end:finalize()
	action_base.finalize(self)
end

--' Лок менеджера
class "act_state_mgr_locked" (action_base)
function act_state_mgr_locked:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_locked:initialize()
	action_base.initialize(self)
end
function act_state_mgr_locked:execute()
	action_base.execute(self)
end
function act_state_mgr_locked:finalize()
	action_base.finalize(self)
end

animation_reset_denied = {
	wounded = true,
	wounded_heavy = true,
	wounded_heavy_2 = true,
	wounded_heavy_3 = true,
	wounded_zombie = true
	}

--' Сам менеджер
class "state_manager"
function state_manager:__init(npc)
	state_mgr_goap.goap_graph(self, npc)

	self.target_state = "idle"
	self.current_direction = nil
	self.target_position = nil
	self.current_object = nil
	self.combat = false
	self.alife = true
	self.emerg = {}
	self.synsound = nil
	self.yaw_delta = nil
	self.subanim = 0
	self.need_reweapon = false
end
function state_manager:set_state(state_name, callback, timeout, target, emerg, synsound, extrakeys)
	if state_lib.states[state_name] == nil then
		state_name = "idle"
	end

	--сперва устанавливаем цели
	if target ~= nil then
		self.look_position = target.look_position
		if target.look_object ~= nil then
			self.look_object = target.look_object:id()
		else
			self.look_object = nil
		end
	else
		self.look_position = nil
		self.look_object = nil
	end
	-- меняем угол точности.
	if extrakeys and extrakeys.yaw_delta ~= nil then
		self.yaw_delta = extrakeys.yaw_delta
	else
		self.yaw_delta = 5
	end
	-- меняем глубину рекурсивности анимации.
	if extrakeys and extrakeys.subanim ~= nil then
		self.subanim = extrakeys.subanim
	else
		self.subanim = 0
	end

	local switched = false
	local last_state = self.target_state
	if last_state ~= state_name then
		local lib_new_state = state_lib.states[state_name]
		local lib_last_state = state_lib.states[last_state]
		--' Если мы переключаемся из стреляющего состояния в нестреляющее - необходимо сразу же прекратить стрельбу
		if (lib_last_state.weapon == "fire" or
		   lib_last_state.weapon == "sniper_fire") and
		   (lib_new_state.weapon ~= "fire" and
		   lib_new_state.weapon ~= "sniper_fire")
		then
			self.npc:set_item(state_mgr_weapon.get_idle_state(state_name), state_mgr_weapon.get_weapon(self.npc, state_name))
		end

		if lib_new_state.movement ~= move.stand
			or lib_new_state.mental ~= anim.free
			or lib_new_state.weapon == "fire"
			or lib_new_state.weapon == "sniper_fire"
		then
			self.npc:movement_enabled(true) -- отключить анимации поворота
		else	--' Для спокойно стоящих состояний можно задизаблить перемещение
			self.npc:movement_enabled(false)
		end

		self.target_state = state_name
		self.current_object = nil
		switched = true
	end

	if state_lib.states[state_name].reset == true then
		self.reset_state = true
	else
		self.reset_state = false
	end

	if switched and emerg ~= nil then
		if animation_reset_denied[last_state] ~= true  then
			self.emerg.animation = emerg.animation
			self.emerg.animation_nout = emerg.animation_nout
		end
	end

	self.synsound = synsound

	self.callback = callback
	if timeout ~= nil and
	   timeout >= 0
	then
		self.callback.timeout = timeout
		self.callback.begin = nil
	else
		if self.callback then
			self.callback.func = nil
			self.callback.timeout = nil
		end
	end

	if switched == true and (self.npc:best_enemy() or self.npc:best_danger()) and
	   (last_state == nil or last_state == "idle") then
		self:update()
	end
end
function state_manager:get_state()
	return self.target_state
end
function state_manager:update()
	self.animstate:update()
	self.animation:update()
	self.planner:update()
end

function set_state(npc, state_name, callback, timeout, target, emerg, synsound, extrakeys)
	local st_mgr = db.storage[npc:id()].state_mgr
	if st_mgr then
		st_mgr:set_state(state_name, callback, timeout, target, emerg, synsound, extrakeys)
	end
end
function get_state(npc)
	local st_mgr = db.storage[npc:id()].state_mgr
	if st_mgr then
		return st_mgr:get_state()
	end
	return nil
end

function bind_manager(object)
	local wp_state_mgr_idle_combat_true = wp_prop_state_mgr_idle_combat_true
	local wp_state_mgr_idle_alife_true = wp_prop_state_mgr_idle_alife_true
	local manager = object:motivation_action_manager()

	local state_manager = state_mgr.state_manager(object)

	manager:add_evaluator(prop_state_mgr_idle_combat, 	evaluator_state_mgr_idle("state_mgr_idle_combat", state_manager))
	manager:add_evaluator(prop_state_mgr_idle_alife, 	evaluator_state_mgr_idle_alife("state_mgr_idle_alife", state_manager))
	manager:add_evaluator(prop_state_mgr_idle_off, 	evaluator_state_mgr_idle_off("state_mgr_idle_off", state_manager))

	local action = this.act_state_mgr_to_idle("state_mgr_to_idle_combat", state_manager)
	action:add_precondition		(wp_prop_state_mgr_idle_combat_false)
	action:add_effect 			(wp_state_mgr_idle_combat_true)
	manager:add_action(operator_state_mgr_to_idle_combat, action)

	-- Добавим ещё один тип отключения этого безобразия
	action = this.act_state_mgr_to_off("state_mgr_to_off", state_manager)
	action:add_precondition(wp_prop_state_mgr_idle_off_false)
	action:add_effect(wp_prop_state_mgr_idle_off_true)
	manager:add_action(operator_state_mgr_to_idle_off, action)

	action = this.act_state_mgr_to_idle("state_mgr_to_idle_alife", state_manager)
	action:add_precondition		(wp_stalker_ids_property_enemy_false)
	action:add_precondition		(wp_stalker_ids_property_danger_false)
	action:add_precondition		(wp_prop_state_mgr_idle_alife_false)
	action:add_effect 			(wp_state_mgr_idle_alife_true)
	manager:add_action(operator_state_mgr_to_idle_alife, action)

	action = manager:action(xr_actions_id_alife)
	action:add_precondition(wp_state_mgr_idle_alife_true)

	action = manager:action(stalker_ids_action_combat_planner)
	action:add_precondition(wp_state_mgr_idle_combat_true)

	action = manager:action(stalker_ids_action_anomaly_planner)
	action:add_precondition(wp_state_mgr_idle_combat_true)

	action = manager:action(stalker_ids_action_danger_planner)
	action:add_precondition(wp_state_mgr_idle_combat_true)

	action = manager:action(stalker_ids_action_gather_items)
	action:add_precondition(wp_state_mgr_idle_alife_true)

	return state_manager
end
