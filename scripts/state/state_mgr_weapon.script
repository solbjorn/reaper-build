--' ОРУЖИЕ
--' Соответствует ли состояние оружия требуемому
class "eva_state_mgr_weapon" (property_evaluator)
function eva_state_mgr_weapon:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon:evaluate()
	local weapon = state_lib.states[self.st.target_state].weapon
	if (weapon == nil) then
		return true
	end

	local bestweapon = self.object:best_weapon()
	if not (bestweapon and bestweapon:is_weapon()) then
		return true
	end
	local activeitem = self.object:active_item()
	if weapon == "strapped" then
		if strappable_weapon(bestweapon) then
			if self.object:weapon_strapped() then return true end
		else
			if activeitem == nil then return true end
		end
	end
	if	(
			(
				(weapon == "unstrapped") or
				(weapon == "fire") or
				(weapon == "sniper_fire")
			) and
			(self.object:weapon_unstrapped() == true) and
			(activeitem ~= nil) and
			(bestweapon ~= nil) and
			(activeitem:id() == bestweapon:id())
		) then
		return true
	end
	if (weapon == "none" and
	   activeitem == nil) then
		return true
	end
	if (weapon == "drop" and
	   activeitem == nil) then
		return true
	end
	return false
end
--' Лочим ли мы все это для оружия или нет?
class "eva_state_mgr_weapon_locked" (property_evaluator)
function eva_state_mgr_weapon_locked:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_locked:evaluate()
	return not (self.object:weapon_unstrapped() or self.object:weapon_strapped())
end

--' Необходимо ли повесить оружие на спину
class "eva_state_mgr_weapon_strapped" (property_evaluator)
function eva_state_mgr_weapon_strapped:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_strapped:evaluate()
	return state_lib.states[self.st.target_state].weapon == "strapped"
end
--' Висит ли уже оружие на спине
class "eva_state_mgr_weapon_strapped_now" (property_evaluator)
function eva_state_mgr_weapon_strapped_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_strapped_now:evaluate()
	local wpn = self.object:best_weapon()
	if not wpn:is_weapon() then
		return true
	end

	return self.object:weapon_strapped() or
		   (not strappable_weapon(wpn) and self.object:active_item() == nil)
end

--' Необходимо ли держать оружие в руках
class "eva_state_mgr_weapon_unstrapped" (property_evaluator)
function eva_state_mgr_weapon_unstrapped:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_unstrapped:evaluate()
	local weapon_state = state_lib.states[self.st.target_state].weapon
	return weapon_state == "unstrapped" or weapon_state == "fire" or weapon_state == "sniper_fire"
end
--' Держит ли уже он оружие в руках
class "eva_state_mgr_weapon_unstrapped_now" (property_evaluator)
function eva_state_mgr_weapon_unstrapped_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_unstrapped_now:evaluate()
	if self.object:weapon_unstrapped() then
		local active = self.object:active_item()
		if active ~= nil then
			local wpn = self.object:best_weapon()
			return wpn ~= nil and active:id() == wpn:id()
		end
	end
	return false
end

--' Необходимо ли спрятать оружие вообще
class "eva_state_mgr_weapon_none" (property_evaluator)
function eva_state_mgr_weapon_none:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_none:evaluate()
	return state_lib.states[self.st.target_state].weapon == "none"
end
--' Спрятано ли оружие вообще.
class "eva_state_mgr_weapon_none_now" (property_evaluator)
function eva_state_mgr_weapon_none_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_none_now:evaluate()
	return self.object:active_item() == nil
end

--' Необходимо ли бросить оружие
class "eva_state_mgr_weapon_drop" (property_evaluator)
function eva_state_mgr_weapon_drop:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_drop:evaluate()
	return state_lib.states[self.st.target_state].weapon == "drop"
end

--' Необходимо ли стрелять
class "eva_state_mgr_weapon_fire" (property_evaluator)
function eva_state_mgr_weapon_fire:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_fire:evaluate()
	return state_lib.states[self.st.target_state].weapon == "fire" or
	       state_lib.states[self.st.target_state].weapon == "sniper_fire"
end

--' Достать оружие
class "act_state_mgr_weapon_unstrapp" (action_base)
function act_state_mgr_weapon_unstrapp:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_unstrapp:initialize()
	action_base.initialize(self)
	self.object:set_item(get_idle_state(self.st.target_state), get_weapon(self.object, self.st.target_state))
end
function act_state_mgr_weapon_unstrapp:execute()
	action_base.execute(self)
end
function act_state_mgr_weapon_unstrapp:finalize()
	action_base.finalize(self)
end

--' Спрятать оружие
class "act_state_mgr_weapon_strapp" (action_base)
function act_state_mgr_weapon_strapp:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_strapp:initialize()
	action_base.initialize(self)
	local weap = get_weapon(self.object, self.st.target_state)
	if strappable_weapon(weap) then
		self.object:set_item(object.strap, weap)
	else
		self.object:set_item(object.idle, nil)
	end
end
function act_state_mgr_weapon_strapp:execute()
	action_base.execute(self)
end
function act_state_mgr_weapon_strapp:finalize()
	action_base.finalize(self)
end

--' убрать оружие
class "act_state_mgr_weapon_none" (action_base)
function act_state_mgr_weapon_none:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_none:initialize()
	action_base.initialize(self)
	self.object:set_item(object.idle, nil)
end
function act_state_mgr_weapon_none:execute()
	action_base.execute(self)
end
function act_state_mgr_weapon_none:finalize()
	action_base.finalize(self)
end

--' бросить оружие
class "act_state_mgr_weapon_drop" (action_base)
function act_state_mgr_weapon_drop:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_drop:initialize()
	action_base.initialize(self)
	local weap = get_weapon(self.object, self.st.target_state)
	if strappable_weapon(weap) then
		self.object:set_item(object.drop, weap)
	else
		self.object:set_item(object.idle, nil)
	end
end
function act_state_mgr_weapon_drop:execute()
	action_base.execute(self)
end
function act_state_mgr_weapon_drop:finalize()
	action_base.finalize(self)
end

function get_idle_state(target_state)
	local state = state_lib.states[target_state]
	if state.mental == anim.danger and
		state.movement == move.stand and
		state.animation == nil
	then
		return object.aim1
	else
		return object.idle
	end
end

function get_weapon(obj, target_state)
	local target_state_weapon_slot = state_lib.states[target_state].weapon_slot
	if target_state_weapon_slot == nil then
		return obj:best_weapon()
	else
		return obj:item_in_slot(target_state_weapon_slot)
	end
end

local strappable_clsids = nil

function strappable_weapon(obj)
	local id = obj and obj:clsid()
	if id == nil then return false end

	if strappable_clsids == nil then
		strappable_clsids = {
			[clsid.wpn_ak74_s] = true,
			[clsid.wpn_lr300_s] = true,
			[clsid.wpn_groza_s] = true,
			[clsid.wpn_val_s] = true,
			[clsid.wpn_shotgun_s] = true,
			[clsid.wpn_bm16_s] = true,
			[clsid.wpn_svd_s] = true,
			[clsid.wpn_svu_s] = true,
			[clsid.wpn_rpg7_s] = true,
			[clsid.wpn_vintorez_s] = true
		}
	end
	return strappable_clsids[id] or false
end

function get_queue_params(npc, target)
	return 3, 1000
end
