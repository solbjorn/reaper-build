--[[----------------------------------------------------------------------------------------------
Распарсевание и хранение настроек смарт террейнов
Чугай Александр
------------------------------------------------------------------------------------------------]]

local params_loaded = false

local stay_times

--[[ кешированные предустановок рангов и группировок
формат:
	presets = {
		preset_name1 = {
			community1 = {rank_min1,rank_max1},
			community2 = {rank_min2,rank_max2},
			...
		},
		preset_name2 = false,
		...
	}
false означает, что пытались прочитать, но не нашли такой предустановки
]]
local ltx_stpresets = ini_file( "misc\\smart_terrain_presets.ltx" )
local presets = {}

-- возвращает таблицу с предустановкой или false
function read_preset( preset_name )
	if ltx_stpresets and ltx_stpresets:section_exist( preset_name ) then
		local preset = {}
		local t
		local rank_min, rank_max, rank_interval

		ltx_stpresets:iterate_lines(preset_name, function(result, field, str)
			t = string.parse_names( str )

			rank_min, rank_max = 10000, 0

			for i, rank_name in ipairs( t ) do
				rank_interval = ranks.get_rank_interval( rank_name )

				if rank_interval[1] < rank_min then
					rank_min = rank_interval[1]
				end

				if rank_interval[2] > rank_max then
					rank_max = rank_interval[2]
				end
			end

			preset[field] = { rank_min, rank_max }
		end)

		return preset
	else
		return false
	end
end

-- загрузить различные общие для всех смартов настройки
function load_params()
	params_loaded = true
	stay_times = {}

	config:iterate_lines("smart_terrain_stay_time", function(result, field, str)
		stay_times[field] = string.parse_nums(str)
	end)
end

-- получить временной интервал
function get_stay_time_interval( name )
	if not params_loaded then
		load_params()
	end

	if not stay_times[name] then
		abort( "unknown stay_time interval '%s'", name )
		return nil, nil
	end

	return stay_times[name][1], stay_times[name][2]
end

-- получить предустановку
function get_preset( preset_name )
	local pset = presets[preset_name]
	if pset == nil then
		pset = read_preset( preset_name )
		presets[preset_name] = pset
	end

	return pset
end
