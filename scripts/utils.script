--[[
ОПИСАНИЕ ФУНКЦИЙ

-- Выводит отладочное сообщение в лог, если скрипт активен (активный скрипт выбирается с помощью
-- переменной debug_info.trace_script).
function trace(script_name, fmt, ...)

-- Переводит переменную любого типа (включая nil) в строку. Используется для отладочного вывода информации.
function to_str(what)

-- Создает и возвращает копию вектора
function vector_copy_by_val(vec)

-- Настройка параметров игровых объектов:
function cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
function cfg_get_string(char_ini, section, field, object, mandatory, gulag_name, default_val)
function cfg_get_number(char_ini, section, field, object, mandatory, default_val)

-- Проверяет, находится ли stalker рядом с точкой path_point пути patrol_path
function stalker_at_waypoint(stalker, patrol_path, path_point)

-- Послать stalker в заданную точку patrol_path(path_point)
function stalker_go_to_waypoint(stalker, patrol_path, path_point)

--]]

----------------------------------------------------------------------------------------------------
local string_find = string.find
local string_sub  = string.sub
local string_gfind = string.gfind
local string_gsub = string.gsub

-- Переводит переменную любого типа (включая nil) в строку. Используется для отладочного вывода информации.
function to_str(what)
	if what == nil then
		return "<nil>"
	else
		return tostring(what)
	end
end

--' Сравнивает два вектора
function vector_cmp(a, b)
    return a.x == b.x and a.y == b.y and a.z == b.z
end

--' Сравнивает два вектора с заданной погрешностью
function vector_cmp_prec(a, b, d)
    return math.abs(a.x - b.x) <= d and
           math.abs(a.y - b.y) <= d and
           math.abs(a.z - b.z) <= d
end

-- Создает и возвращает копию вектора
function vector_copy_by_val(vec)
	return vector():set(vec)
end

-- Настройка параметра типа bool у игрового объекта.
--
-- char_ini - указатель на customdata (обычно object:spawn_ini())
-- section - имя секции в customdata
-- field - имя поля в customdata
-- object - игровой объект, от которого будет взято имя для сообщения об ошибке
-- mandatory - поле обязательно должно быть задано
--
-- Возвращает true или false
function cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
	if mandatory == nil then
		abort("section '%s': wrong arguments order in call to cfg_get_bool", section)
	end

	if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
		local ret = char_ini:r_bool(section, field)
		return ret
	end
	if not mandatory then
		if default_val then
			if default_val ~= false and default_val ~= true then
				abort("object '%s': section '%s': field '%s': default value is " ..
					"not boolean", object:name(), section, field)
			end
			return default_val
		end
		return false
	end
	abort("object '%s': attempt to read a non-existant boolean field '%s' in " ..
		"section '%s'", object:name(), field, section)
end

function cfg_get_string(char_ini, section, field, object, mandatory, gulag_name, default_val)
	if mandatory == nil or gulag_name == nil then
		abort("section '%s': wrong arguments order in call to cfg_get_string", section)
	end

	if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
		if gulag_name and gulag_name ~= "" then
			return gulag_name .. "_" .. char_ini:r_string(section, field)
		else
			return char_ini:r_string(section, field)
		end
	end
	if not mandatory then
		return default_val
	end
	local err = "object name '" .. object:name() .. "': attempt to read a non-existant string field '" ..
		field .. "' in section '" .. section .. "'";
	abort("%s", err)
end

function cfg_get_number(char_ini, section, field, object, mandatory, default_val)
	if mandatory == nil then
		abort("section '%s': wrong arguments order in call to cfg_get_number", section)
	end

	if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
		return char_ini:r_float(section, field)
	end
	if not mandatory then
		return default_val
	end
end

-- Проверяет, находится ли stalker рядом с точкой path_point пути patrol_path
function stalker_at_waypoint(stalker, patrol_path, path_point)
	local stalker_pos = stalker:position()
	local distance = stalker_pos:distance_to_sqr(patrol_path:point(path_point))
	if distance <= 0.13 then
		return true
	end
	return false

end

function stalker_stop(stalker)
	stalker:set_movement_type(move.stand)
end

function parse_waypoint_data(pathname, wpflags, wpname)
	local rslt = {}

	rslt.flags = wpflags

	local at
	if string_find(wpname, "|", at, true) == nil then
		return rslt
	end

	local par_num
	local fld_num
	local fld
	local val

	par_num = 1
	for param in string_gfind(wpname, "([%w_\\%=%-%,%*]+)|*") do
		if par_num == 1 then
			-- continue
		else
			if param == "" then
				abort("path '%s': waypoint '%s': syntax error in waypoint name", pathname, wpname)
			end

			fld_num = 1
			fld = nil
			val = nil
			for v in string_gfind(param, "([%w_\\%-%,%*]+)=*") do
				if fld_num == 1 then
					fld = v
				elseif fld_num == 2 then
					val = v
				else
					abort("path '%s': waypoint '%s': syntax error while parsing the param '%s'",
						pathname, wpname, param)
				end
				fld_num = fld_num + 1
			end

			if not fld or fld == "" then
				abort("path '%s': waypoint '%s': syntax error while parsing the param '%s': no field specified",
					pathname, wpname, param)
			end

			if not val or val == "" then
				val = "true"
			end

			rslt[fld] = val
		end
		par_num = par_num + 1
	end
	return rslt
end

function path_parse_waypoints(pathname)
	if not pathname then
		return nil
	end

	local ptr = patrol(pathname)
	local cnt = ptr:count()
	local rslt = {}

	for pt = 0, cnt - 1 do
		rslt[pt] = parse_waypoint_data(pathname, ptr:flags(pt), ptr:name(pt))
		if not rslt[pt] then
			abort("error while parsing point %d of path '%s'", pt, pathname)
		end

	end

	return rslt
end

function path_parse_waypoints_from_arglist(pathname, num_points, ...)
	local arg = {...}

	if not pathname then
		return nil
	end

	local ptr = patrol(pathname)
	local cnt = ptr:count()

	if cnt ~= num_points then
		abort("path '%s' has %d points, but %d points were expected", pathname, cnt, num_points)
	end

	local rslt = {}

	local cur_arg
	local fl
	for pt = 0, cnt-1 do
		cur_arg = arg[pt + 1]
		if not cur_arg then
			abort("script error [1] while processing point %d of path '%s'", pt, pathname)
		end
		fl = flags32()
		fl:assign(cur_arg[1])
		rslt[pt] = parse_waypoint_data(pathname, fl, cur_arg[2])
		if not rslt[pt] then
			abort("script error [2] while processing point %d of path '%s'", pt, pathname)
		end
	end

	return rslt
end

function get_scheme_by_section(section)
	local scheme = string_gsub(section, "%d", "")
	local at, to = string_find(scheme, "@", 1, true)
	if at and to then
		scheme = string_sub(scheme, 1, at - 1)
	end
	return scheme
end

-- a | b | c  ==>  { 1 = "a", 2 = "b", 3 = "c" }
function parse_params(params)
	local rslt = {}
	local n = 1
	for fld in string_gfind(params, "%s*([^|]+)%s*") do
		rslt[n] = fld
		n = n + 1
	end
	return rslt
end

function is_day()
	local hours = level.get_time_hours()
	return hours >= 5 and hours < 22
end

function electro_art_enabled ()
	local hours = level.get_time_hours()
	return hours >= 0 and hours < 5
end

function no_need_to_rotate(npc, target_pos)
	local y = yaw(npc:direction(), vector():set(target_pos):sub(npc:position()))

	return y < 0.3
end

function no_need_to_rotate_xz(npc, target_pos)
	local dir1 = npc:direction()
	dir1.y = 0
	local dir2 =  vector():set(target_pos):sub(npc:position())
	dir2.y = 0
	local y = yaw(dir1, dir2)

	return y < 0.3
end

-- Перевод угла из радианов в градусы
function rad2deg(r)
	return r * 180.0 / math.pi
end

-- Перевод угла из градусов в радианы
function deg2rad(d)
	return d * math.pi / 180.0
end

-- угол между двумя векторами в градусах.
function angle_diff(a1, a2)
	local b1 = a1:normalize()
	local b2 = a2:normalize()
	local dotp = b1:dotproduct(b2)

	return rad2deg(math.acos(math.abs(dotp)))
end

-- true, если нужно поворачивать влево
function angle_left(dir1, dir2)
	local dir_res = vector()
	dir_res:crossproduct(dir1, dir2)
	return dir_res.y <= 0
end

function angle_left_xz(dir1, dir2)
	local dir_res = vector()
	dir1.y = 0
	dir2.y = 0
	dir_res:crossproduct(dir1, dir2)
	return dir_res.y <= 0
end

function get_nearest_waypoint(obj, pathname, ptr, cnt)
	local pt_chosen = nil
	local min_dist = nil
	local dist
	for i = 0, cnt - 1 do
		dist = obj:position():distance_to(ptr:point(i))
		if not min_dist or dist < min_dist then
			min_dist = dist
			pt_chosen = i
		end
	end
	if not pt_chosen then
		abort("object '%s': path '%s': get_nearest_waypoint: unable to choose a nearest waypoint (path has no waypoints?)",
			obj:name(), pathname)
	end
	return pt_chosen
end

function npc_in_zone(npc, zone)
	return npc ~= nil and zone ~= nil and zone:inside(npc:position())
end

------------------------- запись/загрузка CTime ---------------------------
local CTime_0

if not editor() then
	CTime_0 = game.CTime()
end

-- запись CTime в пакет. если t=nil, то запишет один нулевой байт
function w_CTime( p, t )
	if t and not (t == CTime_0) then
		local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
		Y, M, D, h, m, s, ms = t:get( Y, M, D, h, m, s, ms )

		p:w_u8 ( Y - 2000 )
		p:w_u8 ( M )
		p:w_u8 ( D )
		p:w_u8 ( h )
		p:w_u8 ( m )
		p:w_u8 ( s )
		p:w_u16( ms )
	else
		p:w_u8 ( 0 )
	end
end

-- чтение CTime из пакета
function r_CTime( p )
	local Y = p:r_u8()

	if Y ~= 0 then
		local t = game.CTime()
		local M, D, h, m, s, ms = p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u16()
		t:set( Y + 2000,  M, D, h, m, s, ms)
		return t
	else
		return CTime_0
	end
end
---------------------------------------------------------------------------

-- отослать в ближайшую разрешённую ноду по направлению к заданной.
-- возвращает vertex_id, в которое отправил персонажа
function send_to_nearest_accessible_vertex( npc, v_id )
	if not npc:accessible( v_id ) then
		local vtemp = vector()
		v_id, vtemp = npc:accessible_nearest( level.vertex_position( v_id ), vtemp )
	end

	npc:set_dest_level_vertex_id( v_id )

	return v_id
end

-- происходит ли в данный момент смена уровня?
-- нужно для того, чтобы объекты знали, какую информацию записывать при сохранении, а какую нет
function level_changing()
	local sim = alife()

	if not sim then
		return false
	end

	local actor_gv = game_graph():vertex( sim:actor().m_game_vertex_id )

	return actor_gv:level_id() ~= sim:level_id()
end

function parse_data_1v(npc,s)
	local t = {}

	if s then
		for name in string_gfind( s, "(%|*%d+%|[^%|]+)%p*" ) do
			local dat = {	dist = nil,
							state = nil}

			local t_pos = string_find( name, "|", 1, true )

			local dist = string_sub( name, 1, t_pos - 1 )
			local state	= string_sub( name, t_pos + 1)

			dat.dist = tonumber(dist)
			if state then
				dat.state = xr_logic.parse_condlist_q(state)
			end
			t[tonumber(dist)] = dat
		end
	end
	return t
end
