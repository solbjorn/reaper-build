function allow_break_dialog(first_speaker, second_speaker, id)
	if second_speaker:profile_name() == "osoznanie" then
		return false
	end

	return true
end

function break_dialog(first_speaker, second_speaker, id)
	first_speaker:stop_talk()
	second_speaker:stop_talk()

	level.parked_call(function()
		sa_pda.close_pda_talk_dialog()
	end, 3)
end

function disable_talk_self(first_speaker, second_speaker)
	first_speaker:disable_talk()
end
function disable_talk_victim(first_speaker, second_speaker)
	second_speaker:disable_talk()
end

function punch(first_speaker, second_speaker)
	db.storage[second_speaker:id()].punch.enabled = true
end

function get_money_then_leave(first_speaker, second_speaker)
	db.storage[first_speaker:id()].meet.enabled = false
	db.storage[first_speaker:id()].robber.enabled = true
end

function is_wounded(first_speaker, second_speaker)
    if db.storage[first_speaker:id()].wounded ~= nil and
       db.storage[first_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end

	return xr_wounded.is_wounded(first_speaker)
end

function is_opp_wounded(first_speaker, second_speaker, dialog_id)
    if db.storage[second_speaker:id()].wounded ~= nil and
       db.storage[second_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end
	return xr_wounded.is_wounded(second_speaker)
end

function is_not_wounded(first_speaker, second_speaker)
	return not is_wounded(first_speaker, second_speaker)
end

function actor_have_medkit(first_speaker, second_speaker)
	return first_speaker:object("medkit") ~= nil or
		   first_speaker:object("medkit_army") ~= nil or
		   first_speaker:object("medkit_scientic") ~= nil
end

function actor_have_bandage(first_speaker, second_speaker)
	return first_speaker:object("bandage") ~= nil
end

function transfer_medkit(first_speaker, second_speaker)
	if first_speaker:object("medkit") ~= nil then
		transfer(second_speaker, "medkit", "out")
	elseif first_speaker:object("medkit_army") ~= nil then
		transfer(second_speaker, "medkit_army", "out")
	else
		transfer(second_speaker, "medkit_scientic", "out")
	end

	--' Òóò íàäî àíëî÷èòü àïòå÷êó äëÿ èñïîëüçîâàíèÿ.
	xr_wounded.unlock_medkit(second_speaker)

	if second_speaker:relation(first_speaker) ~= game_object.enemy then
		second_speaker:set_relation(game_object.friend, first_speaker)
		first_speaker:change_character_reputation(10)
	else
		first_speaker:change_character_reputation(-10)
		xr_wounded.help_wounded(second_speaker)
	end
	if second_speaker:alive() then
		if second_speaker:is_talk_enabled() == true then
			if second_speaker:active_sound_count() == 0 then
				xr_sound.set_sound_play(second_speaker, "help_thanx")
			end
		end
	end
end
function transfer_bandage(first_speaker, second_speaker)
	transfer(second_speaker, "bandage", "out")
	second_speaker:set_relation(game_object.friend, first_speaker)
end
function kill_yourself(npc, actor)
	npc:kill(actor)
end

function relocate_item_section(victim, section, type)
	if quest_section[section] then
		transfer(victim, section, type)
	elseif type == "in" then
		got(section)
	else
		lost(section)
	end
end

--'---------------------------------------------------------------------------------
--' DIALOG ALLOWED
--'---------------------------------------------------------------------------------
function dialog_allowed(object, victim, id)
	if db.storage[victim:id()].actor_dialogs ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_dialogs) do
			if v == id then return true end
		end
	end
	return false
end
function dialog_not_disable(object, victim, id)
	if db.storage[victim:id()].actor_disable ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_disable) do
			if v == id then return false end
		end
	end
	return true
end

function allow_wounded_dialog(object, victim, id)
	if db.storage[victim:id()].wounded == nil then
		return false
	end
	if db.storage[victim:id()].wounded.help_dialog == id then
		return true
	end
	return false
end

-----------------------------------------------------------------------------------
-- LEVELS
-----------------------------------------------------------------------------------
function level_escape(first_speaker, second_speaker)
	return level.name() == "l01_escape"
end

function level_garbage(first_speaker, second_speaker)
	return level.name() == "l02_garbage"
end

function level_agroprom(first_speaker, second_speaker)
	return level.name() == "l03_agroprom"
end

-----------------------------------------------------------------------------------
-- Relation functions
-----------------------------------------------------------------------------------
function is_friend(first_speaker, second_speaker)
	return first_speaker:relation(second_speaker) == game_object.friend
end

function is_not_friend(first_speaker, second_speaker)
	return not is_friend(first_speaker, second_speaker)
end

function become_friend(first_speaker, second_speaker)
	first_speaker:set_relation(game_object.friend, second_speaker)
end

-----------------------------------------------------------------------------------
-- Community
-----------------------------------------------------------------------------------
function actor_in_dolg(actor, npc)
	if Actor then
		return Actor:character_community() == "actor_dolg"
	end
	return false
end
function actor_not_in_dolg(actor, npc)
	return not actor_in_dolg(actor, npc)
end
function actor_set_dolg(actor, npc)
	if Actor then
		Actor:set_character_community("actor_dolg", 0, 0)
	end
	return true
end
function actor_clear_community(actor, npc)
	if Actor then
		Actor:set_character_community("actor", 0, 0)
	end
	return true
end

-----------------------------------------------------------------------------------
-- Money functions
-----------------------------------------------------------------------------------
function has_2000_money(first_speaker, second_speaker)
	return first_speaker:money() >= 2000
end
