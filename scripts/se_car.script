local spawn_list = {}

function check_spawn(s_object)
	local obj_id = s_object.id
	if spawn_list[obj_id] == nil then
		local ini = s_object:spawn_ini()
		if ini and ini:section_exist("spawner") and ini:line_exist("spawner", "cond") then
			spawn_list[obj_id] = xr_logic.parse_condlist(ini:r_string("spawner", "cond"))
			spawn_list[obj_id] = reap_misc.cached_condlist(spawn_list[obj_id], 1000)
		else
			spawn_list[obj_id] = false
		end
	end

	return ( not spawn_list[obj_id] )
		or ( spawn_list[obj_id]:pick_section_from_condlist(s_object) ~= nil )
end

---------------------------------------------------------------------
class "se_car" (cse_alife_car)
--------------------
function se_car:__init (section) super (section)
	self.trunk_id = 0
	self.fuel = -1
end
--------------------
function se_car:can_switch_offline ()
	return cse_alife_car.can_switch_offline(self)
end
--------------------
function se_car:can_switch_online ()
	return cse_alife_car.can_switch_online(self)
		and check_spawn(self)
end
--------------------
function se_car:STATE_Write(packet)
	cse_alife_car.STATE_Write(self, packet)

	local obj = level_object(self.id)
	if obj then
		self.fuel = obj:get_fuel()
	end

	if self.fuel ~= -1 or self.trunk_id ~= 0 then
		packet:w_u16(self.trunk_id)
		packet:w_float(self.fuel)
	end
end
--------------------
function se_car:STATE_Read(packet, size)
	cse_alife_car.STATE_Read(self, packet, size)

	if packet:r_eof() then
		return
	end

	self.trunk_id = packet:r_u16()
	self.fuel = packet:r_float()
end
--------------------

--'Helicopter
class "se_heli" (cse_alife_helicopter)
--------------------
function se_heli:__init (section) super (section)
end
function se_heli:keep_saved_data_anyway()
	return true
end
