---------------------------------------------------------------------------------------------------------------------
--	Схема озвучки
--	автор:  Диденко Руслан  (Stohe)
--	update: Чугай Александр (Chugai)
----------------------------------------------------------------------------------------------------------------------
local rmk_chatter   = 0 -- one second
local rmk_react     = 1 -- one to two
local rmk_muse      = 2 -- three to five
local rmk_once      = 3 -- three to five, played only once
local rmk_greet     = 4 -- requires min/max
local rmk_sporadic  = 5 -- requires min/max
local rmk_priority  = 6 -- requires min/max

db_sound = {}
key_by_id = {}
group_idle = {}

local math_random = math.random

function get_sound(path, tt, npc)
	if path == nil then return nil end
	if path.exec ~= nil then
		path = path.types[path.exec(path.types, npc)]
		if path == nil then return nil end
	end
	-- чтение настроек темы
	tt.rmk_type = path.rmk_type
	if tt.rmk_type == nil then return nil end
	local npc_id_tbl = path.max_ids[npc:id()]
	tt.into_id = path.into_id
	tt.into_max = npc_id_tbl.into_max
	tt.into_cycled = npc_id_tbl.into_cycled

	tt.rnd_id = path.rnd_id
	tt.rnd_max = npc_id_tbl.rnd_max

	if tt.rmk_type > rmk_once then
		tt.min_snd = path.min_snd or 1
		tt.max_snd = path.max_snd or 2
		tt.rnd     = path.rnd
	end
	return tt.rmk_type
end
-- Формирование ключа персонажа
function get_key(npc)
	local key
	local npc_id = npc:id()

	-- формирование ключа
	local overrides = db.storage[npc:id()].overrides
	if overrides and
	   overrides.soundgroup
	then
		key = overrides.soundgroup
	else
		key = tostring(npc_id)
	end

	-- апдейт таблиц :) не менять!
	local keyid = key_by_id[npc_id]
	if keyid ~= key then
		if group_idle[keyid] ~= nil	then
			group_idle[keyid].num_in_group = group_idle[keyid].num_in_group - 1
		end
		key_by_id[npc_id] = key
		if group_idle[key] == nil then
			group_idle[key] = {num_in_group = 1}
		else
			group_idle[key].num_in_group = group_idle[key].num_in_group + 1
		end
	end
	return key
end

-----------------------------------------------------------------------------------------------------------------------------------
--	Установка и распарсивание тем в файлы.
-----------------------------------------------------------------------------------------------------------------------------------
function set_sound(npc, sound, now, into_timeout)
	local npc_sounds = db_sound[npc:id()]
	if npc_sounds == nil then
		npc_sounds = {}
		db_sound[npc:id()] = npc_sounds
	end
	if npc_sounds.theme ~= sound or now == true then
		-- Туточки надобно распарсить имена тем в их id
		if sound == nil then sound = "" end
		npc_sounds.theme = sound
		npc_sounds.snd = parse_names(sound)
		if npc_sounds.last_snd == nil then
			npc_sounds.last_snd = {}
		else
			local snd_table = {}
			local t = 0
			for k,v in pairs(npc_sounds.snd) do
				snd_table[t] = {}
				if sound_theme.theme[v] then
					if get_sound(sound_theme.theme[v], snd_table[t], npc) ~= nil then
						t = t + 1
					end
				end
			end
			if t == 0 then
				npc_sounds.snd = {}
				if now == true then stop_play_sound(npc) end
				return
			end
			for k,v in pairs(snd_table) do
				if v.rmk_type and v.rmk_type < rmk_greet then
					if v.into_id then npc_sounds.last_snd[v.into_id] = nil end
					if v.rnd_id then npc_sounds.last_snd[v.rnd_id] = nil end
				end
			end
		end
		-- Устанавливаем входную паузу
		local key = get_key(npc)
		local group_table = group_idle[key]
		if now == true then
			stop_play_sound(npc)
		end
		if into_timeout then
			group_table.busy_until = time_global() + into_timeout
		else
			group_table.busy_until = time_global() + 250
		end
	end
end

function set_sound_play(npc, sound, timeout)
	local npc_sounds = db_sound[npc:id()]
	if npc_sounds == nil then
		npc_sounds = {}
		db_sound[npc:id()] = npc_sounds
		npc_sounds.last_snd = {}
	elseif npc_sounds.last_snd == nil then
		npc_sounds.last_snd = {}
	end

	npc_sounds.theme = sound
	npc_sounds.snd = parse_names(sound)

	local key = get_key(npc)
	local group_table = group_idle[key]

	stop_play_sound(npc)
	this.play_sound(npc, group_table, timeout)
end

function update(npc)
	if npc:active_sound_count() ~= 0 then return end
	local npc_id = npc:id()

	--' Если задана тема, то нужно играть ее.
	--' Если не задана, то нужно играть idle, при условии что у нас нет врагов и денжеров.
	local npc_sounds = db_sound[npc_id]
	if npc_sounds ~= nil and npc_sounds.snd == nil then
		return
	end

	local key = get_key(npc)

	local group_table = group_idle[key]
	if group_table == nil then
		return
	end

	if group_table.busy == true then
		if group_table.last_npc ~= npc_id then
			return
		end
		group_table.busy = false
	end

	if group_table.num_in_group > 1 and
	   group_table.last_npc == npc_id then
		return
	end

	if #npc_sounds.snd == 0 then
		return
	end

	if group_table.busy_until == nil or time_global() > group_table.busy_until then
		this.play_sound(npc, group_table)
	end
end

function play_sound(npc, group_table, timeout)
	local npc_id = npc:id()
	local npc_sounds = db_sound[npc_id]
	-- нужно составить список тем
	local snd_table = {}
	local t = 0
	for k,v in pairs(npc_sounds.snd) do
		snd_table[t] = {}
		if sound_theme.theme[v] ~= nil then
			snd_table[t].theme = v
			if get_sound(sound_theme.theme[v], snd_table[t], npc) ~= nil then
				t = t + 1
			end
		else
			abort("ERROR: INVALID PLAY SOUND %s for %s", v, npc:name())
		end
	end
	if t == 0 then return end

	group_table.last_npc = npc_id
	local idle = 1000

	-- из списка тем выбираем одну.
	local snd = snd_table[math_random(0, t-1)]
	if snd == nil or snd.rmk_type == nil then
		group_table.busy_until = time_global() + idle
		group_table.busy = true
		return
	 end

	local theme_idle = 0
	local global_time
	local snd_type = snd.rmk_type
	if snd_type > rmk_once then
		if snd_type == rmk_priority and npc_sounds.last_theme_id ~= snd.rnd_id then
			npc_sounds.busy_until = nil
			npc_sounds.last_theme_id = snd.rnd_id
		end
		if npc_sounds.busy_until == nil or time_global() > npc_sounds.busy_until then
			theme_idle = math_random(snd.min_snd*1000, snd.max_snd*1000)
			if snd.rnd and math_random(100) > snd.rnd then
				global_time = time_global()
				group_table.busy_until = global_time + idle
				npc_sounds.busy_until  = global_time + theme_idle
				group_table.busy = true
				return
			end
		else
			group_table.busy_until = time_global() + idle
			group_table.busy = true
			return
		end
	else
		if snd_type > rmk_react then
			idle = math_random(32, 50) * 100
		elseif snd_type == rmk_react then
			idle = math_random(10, 20) * 100
		end
		theme_idle = idle
	end

	group_table.busy = true

	if group_table.last_snd	== nil then
		group_table.last_snd = {}
	end
	-- необходимо ли нам играть into или rnd звуки
	if snd.into_max ~= nil and snd.into_max > 0 then
		local last_seq = npc_sounds.last_snd[snd.into_id]
		if last_seq == nil then
			last_seq = -1
		elseif last_seq == snd.into_max - 1 then
			if snd.into_cycled == true then
				last_seq = -1
			else
				group_table.busy = false
				global_time = time_global()
				group_table.busy_until = global_time + idle
				npc_sounds.busy_until  = global_time + 86400000
				return
			end
		end

		local this_seq = last_seq + 1
		npc:play_sound(snd.into_id, 1, 0, 1, 0, this_seq)
		npc_sounds.last_snd[snd.into_id] = this_seq
		group_table.last_snd[snd.into_id] = this_seq
	elseif snd.rnd_max ~= nil and snd.rnd_max > 0 then
		-- играем рандомные
		local s = 0
		local last_rnd = group_table.last_snd[snd.rnd_id]
		if snd.rmk_type > rmk_once then last_rnd = npc_sounds.last_snd[snd.rnd_id] end
		if snd.rnd_max > 1 then
			-- Если прошлый раз проигрывался такой же набор тем
			-- то учитывать последний звук для группы.
			if last_rnd == nil then
				s = math_random(0, snd.rnd_max-1)
			else
				s = math_random(0, snd.rnd_max-2)
				if s >= last_rnd then s = s + 1 end
			end
		end

		if timeout == nil then
			timeout = 0
		end
		npc:play_sound(snd.rnd_id, timeout+1, timeout, 1, 0, s)
		npc_sounds.last_snd[snd.rnd_id] = s
		group_table.last_snd[snd.rnd_id] = s
	end
	if snd_type == rmk_once then npc_sounds.snd = nil end
	global_time = time_global()
	group_table.busy_until = global_time + idle
	npc_sounds.busy_until  = global_time + theme_idle
end

function get_last_IDS(npc, theme)
	local last_table = db_sound[npc:id()].last_snd
	local snd_table = {}
	if sound_theme.theme[theme] ~= nil then
		get_sound(sound_theme.theme[theme], snd_table, npc)
	end
	return last_table[snd_table.into_id], snd_table.into_max
end

--' Actor sound player
local actor_sound = {}
function set_actor_sound(sound)
	if actor_sound.theme ~= sound then
		--' Туточки надобно распарсить имена тем в их id
		if sound == nil then sound = "" end
		actor_sound.theme = sound
		actor_sound.begin = nil

		this.set_actor_sound_factor(1)
	end
end

function set_actor_sound_factor(factor)
	local theme = sound_theme.actor_theme[actor_sound.theme]
	if theme ~= nil then
		actor_sound.min_snd = theme.min_snd * factor
		actor_sound.max_snd = theme.max_snd * factor
	end
end

function update_actor()
	local theme = sound_theme.actor_theme[actor_sound.theme]
	if theme == nil then return end

	if #theme.sounds == 0 then
		return
	end

	if actor_sound.begin == nil or
	   time_global() - actor_sound.begin >= actor_sound.idle
	then
		actor_sound.begin = time_global()

		--' Тут надо отыграть звук
		local sound = theme.sounds[math_random(#theme.sounds)]
		if sound ~= nil then
			sound:play(db_actor, 0, sound_object.s2d)
		end
		actor_sound.idle = math_random(actor_sound.min_snd, actor_sound.max_snd)
	end
end

--' Таблица для хранения созданных саунд обжектов.
sound_object_by_theme = {}
--' type = [random|seq|looped]
function get_sound_object(theme, t_type)
	local ph_sound_theme = sound_theme.ph_snd_themes[theme]
	if ph_sound_theme == nil then
		abort("Missing ph_snd_themes for theme %s", tostring(theme))
		return
	end

	local theme_sound_object = sound_object_by_theme[theme]
	if theme_sound_object == nil then
		theme_sound_object = {}
		sound_object_by_theme[theme] = theme_sound_object
	end

	if t_type == nil then
		t_type = "random"
	end

	--' Выбор следующего айдишника
	local play_id = -1
	local table_size = #ph_sound_theme
	if theme_sound_object.last_id == nil then
		if t_type == "random" then
			if table_size >= 2 then
				play_id = math_random(1, table_size)
			else
				play_id = 1
			end
		else
			play_id = 1
		end
	else
		if t_type == "random" then
			if table_size >= 2 then
				play_id = math_random(1, table_size - 1)
				if play_id >= theme_sound_object.last_id then play_id = play_id + 1 end
			else
				play_id = 1
			end
		else
			if theme_sound_object.last_id < table_size then
				play_id = theme_sound_object.last_id + 1
			else
				if t_type == "looped" then
					play_id = 1
				end
			end
		end
	end

	if play_id == -1 then
		return
	end

	theme_sound_object.last_id = play_id

	--' Возвращаем саунд обжект
	if type(ph_sound_theme[play_id]) == "table" then
		if theme_sound_object[play_id] == nil then
			theme_sound_object[play_id.."_r"] = get_safe_sound_object(ph_sound_theme[play_id][1].."_r")
			theme_sound_object[play_id.."_l"] = get_safe_sound_object(ph_sound_theme[play_id][1].."_l")
		end
		return theme_sound_object[play_id.."_r"], theme_sound_object[play_id.."_l"]
	else
		if theme_sound_object[play_id] == nil then
			theme_sound_object[play_id] = get_safe_sound_object(ph_sound_theme[play_id])
		end
		return theme_sound_object[play_id]
	end
end

local sound_object_by_path = {}
--' Обертка вокруг функции, возвращающий звуковой объект.
function get_safe_sound_object(path)
	local sobp = sound_object_by_path[path]
	if sobp == nil then
		sobp = sound_object(path)
		sound_object_by_path[path] = sobp
	end
	return sobp
end

function stop_all_sound_object()
	for k,v in pairs(sound_object_by_path) do
		if v:playing() then
			v:stop()
		end
	end
end
function clear_all_sound_object()
	sound_object_by_theme = {}
end
