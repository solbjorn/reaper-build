-----------------------[[Заканчивающиеся болты]]-----------------------------------
-- Автор: Charsi
-- Дата: 17/08/2010 - 26/04/2011
-----------------------------------------------------------------------------------

local game_start = true
local redraw = true
local boxes = { }
local st

function on_item_take(obj)
	local sect = obj:section()
	if sect == "fake_bolt" then
		if get_value("b_dr", false, true) then
			create("bolt", xyz(), 0, 0, 0)
			release(obj)
		end

		game_start = false
	elseif sect == "bolt" then
		if game_start and get_value("b_dr") then
			-- выкидываем только движковый стартовый
			reap.load_del_bolt = true
		end
		if not Actor:is_in_slot(obj) then
			create("fake_bolt", xyz(), 0, 0, 0)
			Actor:drop_item_and_teleport(obj, xyz())
		end

		del_value("b_dr")
		game_start = false
	end
end

function on_item_drop(obj)
	if obj:section() == "bolt" and not Actor:item_in_slot(5) then
		set_value("b_dr", true)
	end
end

function bolt_to_belt(id, obj)
	level.parked_call(function()
		Actor:move_to_belt(obj)
	end)
end

function on_item_belt(obj)
	local sect = obj:section()
	if sect == "fake_bolt" then
		local actor = Actor
		local sim = g_alife

		sim:release(sim:object(obj:id()), true)
		local sobj = sim:create_ammo("bolt_box", actor:position(), actor:level_vertex_id(),
					     actor:game_vertex_id(), 0, 1)
		level.client_spawn_manager():add(sobj.id, 0, bolt_to_belt)
	elseif sect == "bolt_box" then
		local size = get_ammo_data(obj, "box_size")
		boxes[obj:id()] = obj
		redraw = true

		if not Actor:object("bolt") and get_value("b_dr") then
			amk.spawn_item_in_inv("bolt")
			use_one(obj, size)
		end
	end
end

function fake_bolt_drop(id, obj)
	Actor:drop_item(obj)
end

function on_item_drop_from_belt(obj, drop)
	if obj:section() ~= "bolt_box" then return end
	boxes[obj:id()] = nil
	redraw = true

	local sobj = server_object(obj)
	if not sobj then return end

	local num = get_ammo_data(obj, "box_size")
	release(sobj)

	for i = 1, num do
		sobj = amk.spawn_item_in_inv("fake_bolt")
		if drop and sobj then
			level.client_spawn_manager():add(sobj.id, 0, fake_bolt_drop)
		end
	end
end

function update()
	if Actor:active_slot() == 5 and not level.main_input_receiver() then
		if st and redraw then
			local bolt_cnt = 0
			for id, obj in pairs(boxes) do
				bolt_cnt = bolt_cnt + get_ammo_data(obj, "box_size")
			end

			st:SetText("1/" .. bolt_cnt)
		elseif not st then
			show_static()
			redraw = true
		end
	elseif st then
		remove_static()
	end
end

function remove_static()
	hud:RemoveDialogToRender(st)
	st = nil
end

function show_static()
	st=CUIStatic()
	st:Init("ui\\ui_icon_equipment", 23,708, 42, 42)	-- координаты где рисовать

	local sect = "bolt_box"
	local x = config:r_u32_cache(sect, "inv_grid_x") * 50
	local y = config:r_u32_cache(sect, "inv_grid_y") * 50
	local width = config:r_u32_cache(sect, "inv_grid_width") * 50
	local height = config:r_u32_cache(sect, "inv_grid_height") * 50
	st:SetOriginalRect(x,y,width,height)
	st:SetStretchTexture(true)

	st:SetFont(GetFontGraffiti22Russian())
	st:SetTextAlign(CGameFont.alCenter)
	st:SetTextColor(130,238,255,255)
	st:SetTextY(4)
	st:SetTextX(69)

	hud:AddDialogToRender(st)
end

function use_one(box, left)
	if left > 1 then
		set_ammo_data(box, "box_size", left - 1)
		redraw = true
	else
		release(box)
	end
end

function remove_bolt()
	local box, left, size = nil, 20

	for id, obj in pairs(boxes) do
		size = get_ammo_data(obj, "box_size")
		if size < left then
			box = obj
			left = size
		end
	end

	if box then use_one(box, left) else del_bolt() end
end

function del_bolt()
	Actor:drop_item_and_teleport(Actor:object("bolt"), xyz(0, 0, 0))
end

function drop_bolt()
	local actor = Actor
	del_bolt()
	g_alife:create("fake_bolt", random_position(actor:position(), 1),
		       actor:level_vertex_id(), actor:game_vertex_id())
end

function net_spawn()
	amk.spawn_item_in_inv("bolt_fix")
end

function net_destroy()
	if st then remove_static() end
end
