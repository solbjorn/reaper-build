----------------------------------------------------------------------------------------------------
-- Physic objects binding
----------------------------------------------------------------------------------------------------
-- Разработчик: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Доработки: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

local clsid_projector = clsid.projector

function init(obj)
	----------------------------------------------------------------------------------------
	-- Новые схемы
	----------------------------------------------------------------------------------------

	local ini = obj:spawn_ini()
	if not ini then
		return
	end
	-- Биндить предмет нет смысла, если у него нет секции logic
	if not (ini:section_exist("logic") or ini:section_exist("drop_box")) and
	-- Прожектор нужно биндить даже без logic
	   obj:clsid() ~= clsid_projector then
		return
	end
	
	obj:bind_object(generic_physics_binder(obj))
end

---------------------------------------------------------------------------------------------
local callback_hit = callback.hit
local callback_death = callback.death
local callback_use_object = callback.use_object

class "generic_physics_binder" (object_binder)
function generic_physics_binder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end 

function generic_physics_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_physics_binder:reinit()
	object_binder.reinit(self)

	self.st = { }
	db.storage[self.object:id()] = self.st

	self.is_drop_box = self.object:spawn_ini():section_exist("drop_box")
  self.health=self.object:get_car() and self.object:get_car():GetfHealth()
end

function generic_physics_binder:update(delta)
	object_binder.update(self, delta)

	if self.initialized then
		if self.is_drop_box and not self.drop_box_cb_set then
			self.object:set_callback(callback_death, generic_physics_binder.death_callback, self)
			self.drop_box_cb_set = true
		end
	else
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_item)

		local ini = self.st.ini
		local section = self.st.section_logic
		if section and ini:section_exist(section) then
			local function get_field_string(field)
				return ini:line_exist(section, field) and ini:r_string(section, field)
			end

			--' Запускаем ассоциированный с объектом партикл.
			local particle = get_field_string("particle")
			if particle then
				self.particle = particles_object(particle)
				self.particle:play_at_pos(self.object:position())
			end

			--' Дизаблим ассоциированный с объектом граф
			local graph_point_marker = get_field_string("graph_point_marker")
			if graph_point_marker then
				self.disable_graph_point = patrol(graph_point_marker):game_vertex_id(0)
				game_graph():accessible(self.disable_graph_point, false)
			end
			self.object:set_callback(callback_hit, generic_physics_binder.hit_callback, self)
			self.object:set_callback(callback_death, generic_physics_binder.death_callback, self)
			self.object:set_callback(callback_use_object, generic_physics_binder.use_callback, self)
		end
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
    -- для бтра hit_callback не вызывается. заткнём эту дырку.
    if self.health and (not self.nofixonhit) then
      local health=self.object:get_car() and self.object:get_car():GetfHealth()
      if health then
        if self.health-health>0.00001 then
          self.health=health
          self:hit_callback(self.object, self.health-health, vector():set(1,0,0), db.actor, 0)
          self.nofixonhit=nil
        end
      end
    end
	end
end

function generic_physics_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end

	if self.is_drop_box then
		self.box_items = xr_box.ph_item_box(self.object)
	end

	amk.on_net_spawn(self.object)
	
	return true
end

function generic_physics_binder:net_destroy()
	local st = db.storage[self.object:id()]
	if st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

    if self.particle ~= nil then
        self.particle:stop()
    end

	db.storage[self.object:id()] = nil

	self.object:set_callback(callback_hit, nil)
	self.object:set_callback(callback_death, nil)
	self.object:set_callback(callback_use_object, nil)

	object_binder.net_destroy(self)
end

function generic_physics_binder:net_save_relevant()
	--printf("generic_physics_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function generic_physics_binder:save(packet)
	--printf("generic_physics_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function generic_physics_binder:load(reader)
	self.loaded = true

	--printf("generic_physics_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end

function generic_physics_binder:use_callback(obj, who)
	--xr_use.notify_on_use(obj, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end
	

  
	--AMK UTILS--
	amk.on_use(obj, who)
	amk_utils.physics_use(obj, who)
	--AMK UTILS--

end

function generic_physics_binder:hit_callback(obj, amount, local_direction, who, bone_index)

	--AMK UTILS--
	amk.on_ph_obj_hit(obj, amount, local_direction, who, bone_index)
	amk_utils.physics_hit(obj, amount, local_direction, who, bone_index)
	--AMK UTILS--

  self.nofixonhit=true
	if self.st.ph_on_hit then
		xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
end

function generic_physics_binder:death_callback(victim, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end

    if self.particle ~= nil then
        self.particle:stop()
    end

    if self.disable_graph_point ~= nil then
        game_graph():accessible(self.disable_graph_point, true)
    end
	
	if self.is_drop_box then
		self.box_items:spawn_items()
	end
    
	--AMK UTILS--
	amk_utils.physics_death(victim, who)
	--AMK UTILS--
	
end
