--/amk_rel_1/
-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

local all_good = db and modules and xr_logic
if not all_good then
	local broken = "Missing or broken:"
	if not db then broken = broken .. " db.script" end
	if not modules then
		broken = broken .. " modules.script"
	end
	if not xr_logic then
		broken = broken .. " xr_logic.script"
	end
	abort(broken)
end

local pause_menu_init = true

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	-- DMX MOD on
	if game_is_running() and pause_menu_init then
		local xml = CScriptXmlInit()
		xml:ParseFile("ui_load_pause.xml")
		self.load_window = xml:InitStatic("intro_static", self)
		xml:InitStatic("load_progress", self)
		local level_intro = xml:InitStatic("level_intro", self)
		level_intro:InitTexture("intro\\intro_"..level.name())
		self.sound_volume_music = console:get_float("snd_volume_music")
		console:execute("snd_volume_music 0")
		return
	end
	-- DMX MOD off

	self.alive_on_level = game_is_running()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function main_menu:__finalize()
end

function main_menu:InitControls()
	self:Init(0, 0, 1024, 768)
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_main.xml")

	xml:InitStatic("back_movie", self)
	xml:InitStatic("background", self)
	self.shniaga = xml:InitMMShniaga("shniaga_wnd", self)

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")

	local ver = xml:InitStatic("static_version", self)
	ver:SetText("Версия игры - " .. _G.main_menu.get_main_menu():GetGSVer())

	local mod_ver = xml:InitStatic("mod_version", self)
	local amk_title 	= amk_ver.amk_title
	local amk_version    	= amk_ver.amk_version
	local sak_title 	= sak_ver.sak_title
	local sak_version    	= sak_ver.sak_version
	local wawka_title 	= wawka_ver.wawka_title
	local wawka_version    	= wawka_ver.wawka_version
	local debug_mode = ""
	mod_ver:SetText		(amk_title .. " " .. amk_version .. " + " .. sak_title .. " " .. sak_version .. " + " .. wawka_title .. " " .. wawka_version)
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallbackEx("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game)
	self:AddCallbackEx("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game)
	self:AddCallbackEx("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game)
	self:AddCallbackEx("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game)
	-- options
	self:AddCallbackEx("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked)
	-- load
	self:AddCallbackEx("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked)
	-- save
	self:AddCallbackEx("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked)
	-- quit
	self:AddCallbackEx("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked)
	self:AddCallbackEx("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked)
	self:AddCallbackEx("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game)
	self:AddCallbackEx("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save)
	self:AddCallbackEx("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked)
	-- message box
	self:AddCallbackEx("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk)
	self:AddCallbackEx("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel)
	self:AddCallbackEx("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes)
	self:AddCallbackEx("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin)
	--amk
	self:AddCallbackEx("btn_amk",		ui_events.BUTTON_CLICKED,				self.amk_options)

end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	console:execute			("main_menu off")
	console:execute			("load_last_save")
end

function main_menu:OnButton_last_save()
	if not self.alive_on_level then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	console:execute("quit")
end

local dlgs = {
	amk_options_dlg	= true,
	load_dlg	= true,
	opt_dlg		= true,
	save_dlg	= true
}

function main_menu:OnButton_return_game()
	self:ClearCallbacks()
	for k, v in pairs(dlgs) do
		v = self[k]
		if v then
			v:ClearCallbacks()
			self[k] = nil
		end
	end
	get_console():execute("main_menu off")
end

function main_menu:OnButton_new_novice_game()
	console:execute("g_game_difficulty gd_novice")
	self:StartGame()
end

function main_menu:OnButton_new_stalker_game()
	console:execute("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	console:execute("g_game_difficulty gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	console:execute("g_game_difficulty gd_master")
	self:StartGame()
end

function main_menu:StartGame()
	if (alife() ~= nil) then
		console:execute	("disconnect")
	end

	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
  amk_mod.hud_update=true
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)
	-- DMX MOD on
	if self.load_window then
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik_to_bind(dik) ~= key_bindings.kCONSOLE then
				self.load_window = nil
				console:execute("snd_volume_music "..self.sound_volume_music)
				console:execute("main_menu off")

				reap_misc.intro_dream()
				disable_info("paused_on_load")
				pause_menu_init = false
			end
		end
		return true
	end
	-- DMX MOD off

	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE and self.alive_on_level then
			self:OnButton_return_game()
		-- OGSE Team on
		-- Система быстрых сохранений игры
		elseif dik == DIK_keys.DIK_F6 and self.alive_on_level then
			self:OnButton_return_game()
			console:execute("save " .. user_name() .. "_quicksave")
		elseif dik == DIK_keys.DIK_F7 and ui_load_dialog.file_exist(user_name() .. "_quicksave.sav") then
			if (alife() == nil) then
				console:execute("disconnect")
				console:execute("start server(" .. user_name() .. "_quicksave/single/alife/load) client(localhost)")
			else
				console:execute("load " .. user_name() .. "_quicksave")
			end
		elseif (dik == DIK_keys.DIK_F8 or dik == DIK_keys.DIK_S) and self.alive_on_level then
			local name = string.format(translate("ui_autosave_day") .. " %d. %02d.%02d. %s", game.days() + 1,
						   level.get_time_hours(), level.get_time_minutes(), translate(level.name()))
			name = name:clear()
			if string.len(name) > 60 then
				name = string.sub(name, 1, 57) .. "..."
			end

			self:OnButton_return_game()
			console:execute("save " .. name)
		-- OGSE Team off
		elseif dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		elseif dik == DIK_keys.DIK_L then
			self:OnButton_last_save()
		elseif dik == DIK_keys.DIK_A and self.alive_on_level then
			self:amk_options()
		elseif dik == DIK_keys.DIK_RETURN then
			return false
		end
	end

	return true
end

function main_menu:amk_options()
-- если еще ни разу не вызывали, то обозначим наш новый скрипт
	if self.amk_options_dlg == nil then
		self.amk_options_dlg = ui_amk_options.amk_options()
		self.amk_options_dlg.owner = self
	end
-- останавливаем родительский элемент, запускаем свой, но родителя показываем.
	self:GetHolder():start_stop_menu(self.amk_options_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end
