#include "common.h"
#include "lmodel.h"
#include "hmodel.h"

struct         _input      {
        float4         hpos        : POSITION        ;
#ifdef        USE_VTF
          float4         tc0                : TEXCOORD0        ;        // tc.xy, tc.w = tonemap scale
#else
          float2         tc0                : TEXCOORD0        ;        // tc.xy
#endif
};

struct        _out                {
        half4        low                : COLOR0        ;
        half4        high        : COLOR1        ;
};

uniform sampler1D         fog_table        ;

#ifdef ECB_SSAO
	#include "ssao.h"
#endif // ECB_SSAO

_out         main                ( _input I )
{
  	// Sample the buffers:
  	half4 P 	= tex2D 	(s_position, 	I.tc0);
  	half4 N 	= tex2D 	(s_normal,	I.tc0);		// normal.material
  	half4 D		= tex2D		(s_diffuse,	I.tc0);		// rgb.gloss
  	half4 L 	= tex2D		(s_accumulator, I.tc0);		// diffuse.specular

#ifdef  FORCE_GLOSS
		D.w	= FORCE_GLOSS	;
#endif

#ifdef 	USE_GAMMA_22
	D.rgb		*= D.rgb;	// pow(2.2)
#endif

        // static sun
	half mtl 		= P.w;
#ifdef        USE_R2_STATIC_SUN
	half	sun_occ        	=       P.w*2	;
			mtl 			= 		xmaterial;
            L              +=       Ldynamic_color * sun_occ * plight_infinity	(mtl, P.xyz, N.xyz, Ldynamic_dir);
#endif

	// hemisphere
	half3 		hdiffuse,hspecular;

	hmodel		(hdiffuse, hspecular, P.w, N.w, D.w, P.xyz, N.xyz);
			// hdiffuse *= hdiffuse;	//.

#ifdef ECB_SSAO

	half occ = calc_ssao(P, N, I.tc0);

	#ifdef SSAO_TEX_CONT
			hdiffuse*=(D.rgb*0.95 + CONT_COEF);	// rise texture contrast for diffuse lighting
	#endif
			hdiffuse *= occ;
			hspecular *= occ;

#endif // SSAO

  	half4 	light 	= half4 	(L.rgb + hdiffuse, L.w);
  	half4 	C	= D*light;				// rgb.gloss * light(diffuse.specular)
#ifdef 	USE_SPECULAR_RGB
  	half3 	color 	= C.rgb + hspecular + C.www*lerp(C.rgb,1.h,.5h);// use diffuse*light as estimation of specular color
#else
  	half3 	color 	= C.rgb + hspecular + C.www ;			// replicated specular
#endif

	// here should be distance fog
	half   	distance	= length	(P.xyz);
	half 	fog 		= saturate	(distance*fog_params.w + fog_params.x);
		color		= lerp		(color,fog_color,fog);

#ifdef 	DBG_TMAPPING
	color			= D.xyz;
#endif

	// final tone-mapping
#ifdef	USE_VTF
	half  	tm_scale	= I.tc0.w;		// interpolated from VS
#else
	half 	tm_scale 	= tex2D	(s_tonemap,I.tc0).x;
#endif
	_out	o;
	tonemap	(o.low,o.high, color, tm_scale );

	o.high.a = (half) saturate (fog*fog);
	o.low.a = o.high.a;

  	return 	o;
}
