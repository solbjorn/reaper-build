#include "common.h"
#include "shared\waterconfig.h"

struct vf
{
	float4	hpos		: POSITION;	  // position in projected space for rasterizer
	float2	tbase		: TEXCOORD0;  // base tc
	float2	tnorm0		: TEXCOORD1;  // tc for normal map
	float2	tnorm1		: TEXCOORD2;  // tc for normal map
	half3	M1			: TEXCOORD3;  // matrix for tangent2world normal transformation
	half3	M2			: TEXCOORD4;
	half3	M3			: TEXCOORD5;
	half3	v2point		: TEXCOORD6;  // eye-to-point vector in world space - for reflections
	float4	tctexgen    : TEXCOORD7;  // position in view space for pixel shader
	half4	c0			: COLOR0;
	float	fog			: FOG;
};

uniform sampler2D	s_nmap;
uniform sampler2D	s_leaves;
uniform samplerCUBE	s_env0;
uniform samplerCUBE	s_env1;
half4 main (vf I) : COLOR
{
	half4 base = tex2D(s_base,I.tbase);
	half3 n0 = tex2D(s_nmap,I.tnorm0);
	half3 n1 = tex2D(s_nmap,I.tnorm1);
	half3 Navg = n0 + n1 - 1;
	half3 Nw = normalize(mul(half3x3(I.M1, I.M2, I.M3), Navg));

		/*cubemap reflections*/
	half3 v2point = normalize(I.v2point);
	half3 vreflect = reflect(v2point, Nw);
	vreflect.y = vreflect.y*2-1;

	half3        env0               = texCUBE          (s_env0, vreflect);
	half3        env1               = texCUBE          (s_env1, vreflect);
	half3         env               = lerp                (env0,env1,L_ambient.w);

	half fresnel = saturate(dot(vreflect,v2point));
	half power = pow(fresnel,9);
	half amount	= 0.15h+0.25h*power;	// 1=full env, 0=no env

	half3 c_reflection = amount*env;
	half3 final = lerp(c_reflection,base.rgb,base.a);

	final *= I.c0*2;

#ifdef	USE_SOFT_WATER
	half alpha = 0.75h+0.25h*power;                        // 1=full env, 0=no env
	//	additional depth test
//	half4 texgen_proj = mul(m_P, I.tctexgen);
//	half4 depth_tc = convert_to_screen_space(texgen_proj);
	half4 _P = 	tex2Dproj( s_position, I.tctexgen);
	half waterDepth = (_P.z-I.tctexgen.z);

	//	water fog
	half fog_exp_intens = -4.0h;
	float fog = 1 - exp(fog_exp_intens*waterDepth);
	half3 Fc = half3(0.1h, 0.1h, 0.1h) * SW_WATER_INTENSITY;
	final = lerp(Fc, final, alpha);

	alpha = min(alpha, saturate(waterDepth));
	alpha = max (fog, alpha);

	#ifndef LOW_WATER_DEPTH
		#ifdef SW_USE_FOAM
			//	Leaves
			half4	leaves	= tex2D(s_leaves, I.tbase);
					leaves.rgb *= SW_WATER_INTENSITY;
					leaves.rgb = saturate(leaves.rgb);
			half	calc_cos = -dot(float3(I.M1.z, I.M2.z, I.M3.z),  normalize(v2point));
			half	calc_depth = saturate(waterDepth*calc_cos);
			half	fLeavesFactor = smoothstep(0.025, 0.05, calc_depth );
					fLeavesFactor *= smoothstep(0.075+SW_FOAM_THICKNESS, 0.05+SW_FOAM_THICKNESS, calc_depth );
			final		= lerp(final, leaves.rgb, leaves.a*fLeavesFactor);
			alpha		= lerp(alpha, leaves.a, leaves.a*fLeavesFactor);
		#endif
		return  half4   (final, alpha*I.c0.a*I.c0.a );
	#else
		return  half4   (final, saturate(alpha*5));
	#endif 	// LOW_WATER_DEPTH
#else	//	USE_SOFT_WATER
    return  half4   (final, 1 );
#endif	//	USE_SOFT_WATER
}
